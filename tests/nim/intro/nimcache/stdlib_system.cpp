/* Generated by Nim Compiler v0.14.2 */
/*   (c) 2015 Andreas Rumpf */
/* The generated code is subject to the original license. */
/* Compiled for: Linux, amd64, gcc */
/* Command for C compiler:
   g++ -c  -w -w -fpermissive  -I/home/primat/programs/nim-0.14.2/lib -o /home/primat/projects/tests/nim/intro/nimcache/stdlib_system.o /home/primat/projects/tests/nim/intro/nimcache/stdlib_system.cpp */
#define NIM_INTBITS 64

#include "nimbase.h"
#include <setjmp.h>
#include <sys/mman.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <signal.h>
#include <dlfcn.h>
struct Exception;
struct NimStringDesc;
struct TGenericSeq;
struct Ioerror3428;
struct Systemerror3426;
struct TNimObject;
struct TNimType;
struct TNimNode;
struct Cell48106;
struct Gcheap50618;
struct Gcstack50616;
struct Cellseq48122;
struct Memregion30286;
struct Smallchunk30240;
struct Llchunk30280;
struct Bigchunk30242;
struct Intset30214;
struct Trunk30210;
struct Avlnode30284;
struct Gcstat50614;
struct Cellset48118;
struct Pagedesc48114;
struct Basechunk30238;
struct Freecell30230;
struct Outofmemerror3450;
struct Reraiseerror3460;
struct Rangeerror3456;
struct Indexerror3452;
struct Fielderror3454;
struct Valueerror3446;
struct Objectconversionerror3464;
struct Objectassignmenterror3462;
struct Overflowerror3440;
struct Arithmeticerror3436;
struct Divbyzeroerror3438;
struct Floatinvalidoperror3468;
struct Floatingpointerror3466;
struct Floatoverflowerror3472;
struct Floatunderflowerror3474;
struct TY16005;
struct TSafePoint;
struct Foreigncell71404;
struct Reprclosure87355;
struct Slice90451;
struct Assertionerror3444;
typedef N_NIMCALL_PTR(NIM_BOOL, TY10009) (Exception* e0);
typedef N_NIMCALL_PTR(NIM_BOOL, TY10014) (Exception* e0);
typedef N_NIMCALL_PTR(void, TY10019) (void);
struct  TGenericSeq  {
NI len;
NI reserved;
};
struct  NimStringDesc  : public TGenericSeq {
NIM_CHAR data[SEQ_DECL_SIZE];
};
typedef NU8 Tnimkind3203;
typedef NU8 Tnimtypeflag3209Set;
typedef N_NIMCALL_PTR(void, TY3289) (void* p0, NI op0);
typedef N_NIMCALL_PTR(void*, TY3294) (void* p0);
struct  TNimType  {
NI size;
Tnimkind3203 kind;
Tnimtypeflag3209Set flags;
TNimType* base;
TNimNode* node;
void* finalizer;
TY3289 marker;
TY3294 deepcopy;
};
struct  TNimObject  {
TNimType* m_type;
};
struct  Exception  : public TNimObject {
Exception* parent;
NCSTRING name;
NimStringDesc* message;
NimStringDesc* trace;
};
struct  Systemerror3426  : public Exception {
};
struct  Ioerror3428  : public Systemerror3426 {
};
typedef NU8 Walkop50610;
struct  Cell48106  {
NI refcount;
TNimType* typ;
};
struct  Cellseq48122  {
NI len;
NI cap;
Cell48106** d;
};
typedef Smallchunk30240* TY30301[512];
typedef Trunk30210* Trunkbuckets30212[256];
struct  Intset30214  {
Trunkbuckets30212 data;
};
struct  Memregion30286  {
NI minlargeobj;
NI maxlargeobj;
TY30301 freesmallchunks;
Llchunk30280* llmem;
NI currmem;
NI maxmem;
NI freemem;
NI lastsize;
Bigchunk30242* freechunkslist;
Intset30214 chunkstarts;
Avlnode30284* root;
Avlnode30284* deleted;
Avlnode30284* last;
Avlnode30284* freeavlnodes;
NIM_BOOL locked;
};
struct  Gcstat50614  {
NI stackscans;
NI cyclecollections;
NI maxthreshold;
NI maxstacksize;
NI maxstackcells;
NI cycletablesize;
NI64 maxpause;
};
struct  Cellset48118  {
NI counter;
NI max;
Pagedesc48114* head;
Pagedesc48114** data;
};
struct  Gcheap50618  {
Gcstack50616* stack;
void* stackbottom;
NI cyclethreshold;
Cellseq48122 zct;
Cellseq48122 decstack;
Cellseq48122 tempstack;
NI recgclock;
Memregion30286 region;
Gcstat50614 stat;
Cellset48118 marked;
Cellseq48122 additionalroots;
};
typedef Avlnode30284* TY30291[2];
struct  Avlnode30284  {
TY30291 link;
NI key;
NI upperbound;
NI level;
};
typedef NI TY30219[8];
struct  Trunk30210  {
Trunk30210* next;
NI key;
TY30219 bits;
};
struct  Basechunk30238  {
NI prevsize;
NI size;
NIM_BOOL used;
};
struct  Smallchunk30240  : public Basechunk30238 {
Smallchunk30240* next;
Smallchunk30240* prev;
Freecell30230* freelist;
NI free;
NI acc;
NF data;
};
struct  Freecell30230  {
Freecell30230* next;
NI zerofield;
};
struct  Bigchunk30242  : public Basechunk30238 {
Bigchunk30242* next;
Bigchunk30242* prev;
NI align;
NF data;
};
struct  Llchunk30280  {
NI size;
NI acc;
Llchunk30280* next;
};
typedef N_NIMCALL_PTR(void, Finalizer) (void* self0);
typedef NU8 Tnimtypeflag3209;
typedef NU8 Tnimnodekind3205;
struct  TNimNode  {
Tnimnodekind3205 kind;
NI offset;
TNimType* typ;
NCSTRING name;
NI len;
TNimNode** sons;
};
struct  Pagedesc48114  {
Pagedesc48114* next;
NI key;
TY30219 bits;
};
struct  Outofmemerror3450  : public Systemerror3426 {
};
struct  Reraiseerror3460  : public Exception {
};
struct  Rangeerror3456  : public Exception {
};
struct  Indexerror3452  : public Exception {
};
struct  Fielderror3454  : public Exception {
};
struct  Valueerror3446  : public Exception {
};
struct  Objectconversionerror3464  : public Exception {
};
struct  Objectassignmenterror3462  : public Exception {
};
struct  Arithmeticerror3436  : public Exception {
};
struct  Overflowerror3440  : public Arithmeticerror3436 {
};
struct  Divbyzeroerror3438  : public Arithmeticerror3436 {
};
struct  Floatingpointerror3466  : public Exception {
};
struct  Floatinvalidoperror3468  : public Floatingpointerror3466 {
};
struct  Floatoverflowerror3472  : public Floatingpointerror3466 {
};
struct  Floatunderflowerror3474  : public Floatingpointerror3466 {
};
typedef NU8 Filemode12409;
typedef NimStringDesc* TY84213[5];
typedef N_NOCONV_PTR(void, TY19005) (void);
typedef N_NOCONV_PTR(void, Signalhandler23608) (int sign0);
typedef N_NIMCALL_PTR(void, TY19401) (NimStringDesc* msg0);
typedef NIM_CHAR TY80565[65];
typedef N_NIMCALL_PTR(void, Globalmarkerproc56602) (void);
typedef struct {
N_NIMCALL_PTR(NIM_BOOL, ClPrc) (Exception* e0, void* ClEnv);
void* ClEnv;
} TY18011;
struct  TSafePoint  {
TSafePoint* prev;
NI status;
jmp_buf context;
NIM_BOOL hasRaiseAction;
TY18011 raiseAction;
};
typedef TFrame* TY20003[128];
typedef NU8 Nimset27202[8192];
typedef Globalmarkerproc56602 TY56610[7001];
struct  Foreigncell71404  {
void* data;
Gcheap50618* owner;
};
struct  Gcstack50616  {
Gcstack50616* prev;
Gcstack50616* next;
void* starts;
void* pos;
NI maxstacksize;
};
typedef NU8 Gcstrategy9808;
typedef NU8 char136Set[32];
typedef NF TY80608[23];
typedef NIM_CHAR TY81003[500];
typedef NI16 TY82807[1000001];
struct  Reprclosure87355  {
Cellset48118 marked;
NI recdepth;
NI indent;
};
typedef NIM_CHAR TY87019[60];
struct  Slice90451  {
NI a;
NI b;
};
struct  Assertionerror3444  : public Exception {
};
struct TY16005 : TGenericSeq {
  NimStringDesc* data[SEQ_DECL_SIZE];
};
N_NIMCALL(NI, min_8666_1689653243)(NI x0, NI y0);
N_NIMCALL(NI8, min_8671_1689653243)(NI8 x0, NI8 y0);
N_NIMCALL(NI16, min_8676_1689653243)(NI16 x0, NI16 y0);
N_NIMCALL(NI32, min_8681_1689653243)(NI32 x0, NI32 y0);
N_NIMCALL(NI64, min_8686_1689653243)(NI64 x0, NI64 y0);
N_NIMCALL(NI, max_8701_1689653243)(NI x0, NI y0);
N_NIMCALL(NI8, max_8706_1689653243)(NI8 x0, NI8 y0);
N_NIMCALL(NI16, max_8711_1689653243)(NI16 x0, NI16 y0);
N_NIMCALL(NI32, max_8716_1689653243)(NI32 x0, NI32 y0);
N_NIMCALL(NI64, max_8721_1689653243)(NI64 x0, NI64 y0);
N_NIMCALL(NF, abs_8736_1689653243)(NF x0);
N_NIMCALL(NF, min_8740_1689653243)(NF x0, NF y0);
N_NIMCALL(NF, max_8745_1689653243)(NF x0, NF y0);
N_NIMCALL(void, add_10037_1689653243)(NimStringDesc*& x0, NCSTRING y0);
N_NIMCALL(NI, abs_11006_1689653243)(NI x0);
N_NIMCALL(NI8, abs_11010_1689653243)(NI8 x0);
N_NIMCALL(NI16, abs_11014_1689653243)(NI16 x0);
N_NIMCALL(NI32, abs_11018_1689653243)(NI32 x0);
N_NIMCALL(NI64, abs_11022_1689653243)(NI64 x0);
static N_INLINE(void, sysfatal_15626_1689653243)(NimStringDesc* message0, NimStringDesc* arg0) __attribute__((noreturn));
N_NIMCALL(void, nimGCvisit)(void* d0, NI op0);
N_NIMCALL(void, dooperation_52618_1689653243)(void* p0, Walkop50610 op0);
static N_INLINE(Cell48106*, usrtocell_52241_1689653243)(void* usr0);
static N_INLINE(void, nimFrame)(TFrame* s0);
N_NOINLINE(void, stackoverflow_22201_1689653243)(void);
N_NIMCALL(void, writestacktrace_19007_1689653243)(void);
N_NIMCALL(NimStringDesc*, copyString)(NimStringDesc* src0);
N_NIMCALL(NimStringDesc*, rawNewStringNoInit)(NI space0);
N_NIMCALL(void*, newObjNoInit)(TNimType* typ0, NI size0);
N_NIMCALL(void*, rawnewobj_58201_1689653243)(TNimType* typ0, NI size0, Gcheap50618& gch0);
N_NIMCALL(void, collectct_52607_1689653243)(Gcheap50618& gch0);
N_NOINLINE(NI, stacksize_71801_1689653243)(void);
static N_INLINE(NI, getoccupiedmem_48031_1689653243)(Memregion30286* a0);
static N_INLINE(void, popFrame)(void);
N_NIMCALL(void, collectctbody_75609_1689653243)(Gcheap50618& gch0);
static N_INLINE(void, prepareforinteriorpointerchecking_45488_1689653243)(Memregion30286& a0);
N_NIMCALL(NI, lowgauge_31212_1689653243)(Avlnode30284* n0);
N_NIMCALL(NI, highgauge_31229_1689653243)(Avlnode30284* n0);
N_CDECL(void, markstackandregisters_73237_1689653243)(Gcheap50618& gch0);
static N_INLINE(void, gcmark_70813_1689653243)(Gcheap50618& gch0, void* p0);
N_NIMCALL(void*, interiorallocatedptr_45492_1689653243)(Memregion30286* a0, void* p0);
static N_INLINE(NIM_BOOL, isaccessible_32816_1689653243)(Memregion30286* a0, void* p0);
N_NIMCALL(NIM_BOOL, contains_31540_1689653243)(Intset30214* s0, NI key0);
N_NIMCALL(Trunk30210*, intsetget_31490_1689653243)(Intset30214* t0, NI key0);
static N_INLINE(NI, pageindex_31976_1689653243)(void* p0);
static N_INLINE(Basechunk30238*, pageaddr_31981_1689653243)(void* p0);
static N_INLINE(NIM_BOOL, chunkunused_31889_1689653243)(Basechunk30238* c0);
static N_INLINE(NIM_BOOL, issmallchunk_31869_1689653243)(Basechunk30238* c0);
N_NIMCALL(Avlnode30284*, inrange_31281_1689653243)(Avlnode30284* root0, NI key0);
static N_INLINE(void, add_48193_1689653243)(Cellseq48122& s0, Cell48106* c0);
N_NOCONV(void*, alloc_7401_1689653243)(NI size0);
N_NIMCALL(void*, alloc_46640_1689653243)(Memregion30286& allocator0, NI size0);
N_NIMCALL(void*, rawalloc_37404_1689653243)(Memregion30286& a0, NI requestedsize0);
static N_INLINE(NI, roundup_28801_1689653243)(NI x0, NI v0);
N_NIMCALL(Smallchunk30240*, getsmallchunk_36816_1689653243)(Memregion30286& a0);
N_NIMCALL(Bigchunk30242*, getbigchunk_36016_1689653243)(Memregion30286& a0, NI size0);
static N_INLINE(void, listremove_33802_1689653243)(Bigchunk30242*& head0, Bigchunk30242* c0);
N_NIMCALL(void, splitchunk_35810_1689653243)(Memregion30286& a0, Bigchunk30242* c0, NI size0);
static N_INLINE(void, updateprevsize_32869_1689653243)(Memregion30286& a0, Bigchunk30242* c0, NI prevsize0);
N_NIMCALL(void, incl_31561_1689653243)(Memregion30286& a0, Intset30214& s0, NI key0);
N_NIMCALL(Trunk30210*, intsetput_31512_1689653243)(Memregion30286& a0, Intset30214& t0, NI key0);
N_NIMCALL(void*, llalloc_30443_1689653243)(Memregion30286& a0, NI size0);
static N_INLINE(void*, osallocpages_30014_1689653243)(NI size0);
N_NOINLINE(void, raiseoutofmem_28434_1689653243)(void);
static N_INLINE(void, inccurrmem_30402_1689653243)(Memregion30286& a0, NI bytes0);
static N_INLINE(NI, pageindex_31971_1689653243)(Basechunk30238* c0);
static N_INLINE(void, listadd_35025_1689653243)(Bigchunk30242*& head0, Bigchunk30242* c0);
N_NIMCALL(Bigchunk30242*, requestoschunks_31988_1689653243)(Memregion30286& a0, NI size0);
static N_INLINE(void, listadd_38416_1689653243)(Smallchunk30240*& head0, Smallchunk30240* c0);
static N_INLINE(void, listremove_41202_1689653243)(Smallchunk30240*& head0, Smallchunk30240* c0);
N_NIMCALL(void, add_31353_1689653243)(Memregion30286& a0, Avlnode30284*& t0, NI key0, NI upperbound0);
N_NIMCALL(Avlnode30284*, allocavlnode_30628_1689653243)(Memregion30286& a0, NI key0, NI upperbound0);
N_NIMCALL(void, skew_31334_1689653243)(Avlnode30284*& t0);
N_NIMCALL(void, split_31339_1689653243)(Avlnode30284*& t0);
N_NOCONV(void, dealloc_7448_1689653243)(void* p0);
N_NIMCALL(void, dealloc_46823_1689653243)(Memregion30286& allocator0, void* p0);
N_NIMCALL(void, rawdealloc_43818_1689653243)(Memregion30286& a0, void* p0);
N_NIMCALL(void, freebigchunk_33003_1689653243)(Memregion30286& a0, Bigchunk30242* c_33007_1689653243);
N_NIMCALL(void, excl_31574_1689653243)(Intset30214& s0, NI key0);
N_NIMCALL(void, freeoschunks_32607_1689653243)(Memregion30286& a0, void* p0, NI size0);
static N_INLINE(void, osdeallocpages_30025_1689653243)(void* p0, NI size0);
static N_INLINE(void, deccurrmem_30416_1689653243)(Memregion30286& a0, NI bytes0);
N_NIMCALL(void, del_31403_1689653243)(Memregion30286& a0, Avlnode30284*& t0, NI x0);
static N_INLINE(void, deallocavlnode_31203_1689653243)(Memregion30286& a0, Avlnode30284* n0);
N_NIMCALL(NIM_BOOL, collectzct_70207_1689653243)(Gcheap50618& gch0);
N_NIMCALL(void, preparedealloc_52808_1689653243)(Cell48106* cell0);
static N_INLINE(void*, celltousr_52223_1689653243)(Cell48106* cell0);
N_NIMCALL(void, forallchildren_52614_1689653243)(Cell48106* cell0, Walkop50610 op0);
N_NIMCALL(void, forallchildrenaux_52622_1689653243)(void* dest0, TNimType* mt0, Walkop50610 op0);
N_NIMCALL(void, forallslotsaux_56634_1689653243)(void* dest0, TNimNode* n0, Walkop50610 op0);
N_NIMCALL(TNimNode*, selectbranch_28007_1689653243)(void* aa0, TNimNode* n0);
N_NIMCALL(NI, getdiscriminant_27604_1689653243)(void* aa0, TNimNode* n0);
N_NIMCALL(void, collectcycles_70211_1689653243)(Gcheap50618& gch0);
N_NIMCALL(void, cellsetreset_56628_1689653243)(Cellset48118& s0);
N_NIMCALL(void, deinit_48236_1689653243)(Cellset48118& s0);
N_NIMCALL(void, init_48228_1689653243)(Cellset48118& s0);
N_NOCONV(void*, alloc0_7417_1689653243)(NI size0);
N_NIMCALL(void*, alloc0_46816_1689653243)(Memregion30286& allocator0, NI size0);
N_NIMCALL(void, marks_68401_1689653243)(Gcheap50618& gch0, Cell48106* c0);
N_NOINLINE(void, incl_48847_1689653243)(Cellset48118& s0, Cell48106* cell0);
N_NIMCALL(Pagedesc48114*, cellsetput_48641_1689653243)(Cellset48118& t0, NI key0);
static N_INLINE(NI, nexttry_48255_1689653243)(NI h0, NI maxhash0);
N_NIMCALL(void, cellsetenlarge_48603_1689653243)(Cellset48118& t0);
N_NIMCALL(void, cellsetrawinsert_48280_1689653243)(Cellset48118* t0, Pagedesc48114** data0, Pagedesc48114* desc0);
N_NIMCALL(NIM_BOOL, containsorincl_48914_1689653243)(Cellset48118& s0, Cell48106* cell0);
N_NIMCALL(Pagedesc48114*, cellsetget_48260_1689653243)(Cellset48118* t0, NI key0);
N_NIMCALL(void, markglobals_68613_1689653243)(Gcheap50618& gch0);
N_NIMCALL(void, sweep_68201_1689653243)(Gcheap50618& gch0);
static N_INLINE(NIM_BOOL, iscell_31956_1689653243)(void* p0);
N_NIMCALL(NIM_BOOL, contains_48808_1689653243)(Cellset48118* s0, Cell48106* cell0);
N_NIMCALL(void, freecycliccell_67015_1689653243)(Gcheap50618& gch0, Cell48106* c0);
N_NIMCALL(NI, getoccupiedmem_8055_1689653243)(void);
N_NIMCALL(NI, gettotalmem_8059_1689653243)(void);
N_NIMCALL(NI, getfreemem_8057_1689653243)(void);
N_NIMCALL(void, unmarkstackandregisters_75402_1689653243)(Gcheap50618& gch0);
static N_INLINE(void, decref_53801_1689653243)(Cell48106* c0);
static N_INLINE(void, rtladdzct_53401_1689653243)(Cell48106* c0);
N_NOINLINE(void, addzct_52217_1689653243)(Cellseq48122& s0, Cell48106* c0);
static N_INLINE(void, addnewobjtozct_57674_1689653243)(Cell48106* res0, Gcheap50618& gch0);
N_NIMCALL(void, rawwritestacktrace_20601_1689653243)(NimStringDesc*& s0);
static N_INLINE(void, appendString)(NimStringDesc* dest0, NimStringDesc* src0);
N_NIMCALL(NimStringDesc*, resizeString)(NimStringDesc* dest0, NI addlen0);
static N_INLINE(NI, resize_79201_1689653243)(NI old0);
N_NIMCALL(void*, growobj_67009_1689653243)(void* old0, NI newsize0);
N_NIMCALL(void*, growobj_64003_1689653243)(void* old0, NI newsize0, Gcheap50618& gch0);
N_NIMCALL(void, auxwritestacktrace_20005_1689653243)(TFrame* f0, NimStringDesc*& s0);
N_NIMCALL(NimStringDesc*, nimIntToStr)(NI x0);
N_NIMCALL(NimStringDesc*, mnewString)(NI len0);
N_NIMCALL(NimStringDesc*, rawNewString)(NI space0);
N_NIMCALL(void*, newObj)(TNimType* typ0, NI size0);
N_NIMCALL(NimStringDesc*, mnewString)(NI len0);
N_NIMCALL(NimStringDesc*, setLengthStr)(NimStringDesc* s0, NI newlen0);
N_NIMCALL(NimStringDesc*, addChar)(NimStringDesc* s0, NIM_CHAR c0);
N_NIMCALL(void, showerrormessage_19606_1689653243)(NCSTRING data0);
N_NIMCALL(NimStringDesc*, cstrToNimstr)(NCSTRING str0);
N_NIMCALL(NimStringDesc*, toNimStr)(NCSTRING str0, NI len0);
N_NIMCALL(void, writetostderr_19601_1689653243)(NCSTRING msg0);
N_NIMCALL(void, write_15701_1689653243)(FILE* f0, NCSTRING c0);
static N_INLINE(void, quitordebug_21013_1689653243)(void);
N_NIMCALL(void, TMP3)(void* p, NI op);
N_NIMCALL(void, TMP11)(void* p, NI op);
static N_INLINE(void, asgnRefNoCycle)(void** dest0, void* src0);
N_NIMCALL(void, raiseException)(Exception* e0, NCSTRING ename0);
N_NIMCALL(NimStringDesc*, copyStringRC1)(NimStringDesc* src0);
N_NIMCALL(void*, newObjRC1)(TNimType* typ0, NI size0);
static N_INLINE(void, nimGCunrefNoCycle)(void* p0);
N_NIMCALL(void, raiseexceptionaux_21201_1689653243)(Exception* e0);
static N_INLINE(NIM_BOOL, isObjWithCache)(TNimType* obj0, TNimType* subclass0, TNimType** cache0);
N_NOINLINE(NIM_BOOL, isobjslowpath_24136_1689653243)(TNimType* obj0, TNimType* subclass0, TNimType** cache0);
static N_INLINE(void, pushCurrentException)(Exception* e0);
static N_INLINE(void, asgnRef)(void** dest0, void* src0);
static N_INLINE(void, incref_54219_1689653243)(Cell48106* c0);
static N_INLINE(void, sysfatal_21618_1689653243)(NimStringDesc* message0) __attribute__((noreturn));
N_NIMCALL(void, TMP12)(void* p, NI op);
static N_INLINE(void, sysfatal_23803_1689653243)(NimStringDesc* message0, NimStringDesc* arg0) __attribute__((noreturn));
N_NIMCALL(void, TMP13)(void* p, NI op);
static N_INLINE(void, sysfatal_23827_1689653243)(NimStringDesc* message0) __attribute__((noreturn));
N_NIMCALL(void, TMP14)(void* p, NI op);
static N_INLINE(void, sysfatal_23850_1689653243)(NimStringDesc* message0, NimStringDesc* arg0) __attribute__((noreturn));
N_NIMCALL(void, TMP15)(void* p, NI op);
static N_INLINE(void, sysfatal_24018_1689653243)(NimStringDesc* message0) __attribute__((noreturn));
N_NIMCALL(void, TMP16)(void* p, NI op);
static N_INLINE(void, sysfatal_24077_1689653243)(NimStringDesc* message0) __attribute__((noreturn));
N_NIMCALL(void, TMP17)(void* p, NI op);
static N_INLINE(void, sysfatal_24113_1689653243)(NimStringDesc* message0) __attribute__((noreturn));
N_NIMCALL(void, TMP18)(void* p, NI op);
static N_INLINE(void, sysfatal_24265_1689653243)(NimStringDesc* message0) __attribute__((noreturn));
N_NIMCALL(void, TMP19)(void* p, NI op);
static N_INLINE(void, sysfatal_24287_1689653243)(NimStringDesc* message0) __attribute__((noreturn));
N_NIMCALL(void, TMP20)(void* p, NI op);
static N_INLINE(void, sysfatal_26423_1689653243)(NimStringDesc* message0) __attribute__((noreturn));
N_NIMCALL(void, TMP21)(void* p, NI op);
static N_INLINE(void, sysfatal_26449_1689653243)(NimStringDesc* message0) __attribute__((noreturn));
N_NIMCALL(void, TMP22)(void* p, NI op);
static N_INLINE(void, sysfatal_26468_1689653243)(NimStringDesc* message0) __attribute__((noreturn));
N_NIMCALL(void, TMP23)(void* p, NI op);
N_NIMCALL(NIM_BOOL, contains_33811_1689653243)(Bigchunk30242* list0, Bigchunk30242* x0);
N_NIMCALL(NIM_BOOL, contains_38425_1689653243)(Smallchunk30240* list0, Smallchunk30240* x0);
static N_INLINE(void, sysfatal_81472_1689653243)(NimStringDesc* message0) __attribute__((noreturn));
static N_INLINE(void, sysfatal_86903_1689653243)(NimStringDesc* message0) __attribute__((noreturn));
N_NIMCALL(void, initgc_11601_1689653243)(void);
N_NIMCALL(void, init_48213_1689653243)(Cellseq48122& s0, NI cap0);
static N_INLINE(void, initallocator_11801_1689653243)(void);
static N_INLINE(void, initStackBottom)(void);
N_NOINLINE(void, setStackBottom)(void* thestackbottom0);
static N_INLINE(void, initStackBottomWith)(void* locals0);
N_NIMCALL(NI, cmp_5483_1689653243)(NimStringDesc* x0, NimStringDesc* y0);
N_NIMCALL(NIM_BOOL, open_15603_1689653243)(FILE*& f0, NimStringDesc* filename0, Filemode12409 mode0, NI bufsize0);
N_NIMCALL(NIM_BOOL, open_15611_1689653243)(FILE*& f0, int filehandle0, Filemode12409 mode0);
N_NIMCALL(FILE*, open_15617_1689653243)(NimStringDesc* filename0, Filemode12409 mode0, NI bufsize0);
N_NIMCALL(NIM_BOOL, reopen_15646_1689653243)(FILE* f0, NimStringDesc* filename0, Filemode12409 mode0);
N_NIMCALL(NIM_BOOL, endoffile_15654_1689653243)(FILE* f0);
N_NIMCALL(NimStringDesc*, readall_15663_1689653243)(FILE* file0);
N_NIMCALL(NI, rawfilesize_82266_1689653243)(FILE* file0);
N_NIMCALL(NimStringDesc*, readallfile_82277_1689653243)(FILE* file0, NI len0);
N_NIMCALL(NI, readbuffer_15754_1689653243)(FILE* f0, void* buffer0, NI len0);
N_NOINLINE(void, raiseeio_81467_1689653243)(NimStringDesc* msg0) __attribute__((noreturn));
N_NIMCALL(NimStringDesc*, readallbuffer_82258_1689653243)(FILE* file0);
N_NIMCALL(NimStringDesc*, readfile_15666_1689653243)(NimStringDesc* filename0);
static N_INLINE(void, setFrame)(TFrame* s0);
N_NIMCALL(void, writefile_15669_1689653243)(NimStringDesc* filename0, NimStringDesc* content0);
N_NIMCALL(void, write_15689_1689653243)(FILE* f0, NimStringDesc* s0);
N_NIMCALL(NI, writebuffer_15776_1689653243)(FILE* f0, void* buffer0, NI len0);
N_NIMCALL(void, write_15673_1689653243)(FILE* f0, NF32 r0);
N_NIMCALL(void, write_15677_1689653243)(FILE* f0, NI i0);
N_NIMCALL(void, write_15681_1689653243)(FILE* f0, NI64 i0);
N_NIMCALL(void, write_15685_1689653243)(FILE* f0, NF r0);
N_NIMCALL(void, write_15693_1689653243)(FILE* f0, NIM_BOOL b0);
N_NIMCALL(void, write_15697_1689653243)(FILE* f0, NIM_CHAR c0);
N_NIMCALL(void, write_15705_1689653243)(FILE* f0, NimStringDesc** a0, NI a0Len0);
N_NIMCALL(NimStringDesc*, readline_15710_1689653243)(FILE* f0);
N_NIMCALL(NimStringDesc*, rawNewString)(NI cap0);
N_NIMCALL(NIM_BOOL, readline_15713_1689653243)(FILE* f0, NimStringDesc*& line0);
N_NIMCALL(NI64, getfilesize_15732_1689653243)(FILE* f0);
N_NIMCALL(NI64, getfilepos_15785_1689653243)(FILE* f0);
N_NIMCALL(void, setfilepos_15781_1689653243)(FILE* f0, NI64 pos0);
N_NIMCALL(NI, readchars_15746_1689653243)(FILE* f0, NIM_CHAR* a0, NI a0Len0, NI start0, NI len0);
N_NIMCALL(NI, writechars_15769_1689653243)(FILE* f0, NIM_CHAR* a0, NI a0Len0, NI start0, NI len0);
N_NIMCALL(TY16005*, cstringarraytoseq_16001_1689653243)(NCSTRING* a0, NI len0);
N_NIMCALL(void, TMP40)(void* p, NI op);
N_NIMCALL(void*, newSeq)(TNimType* typ0, NI len0);
static N_INLINE(NI, addInt)(NI a0, NI b0);
N_NOINLINE(void, raiseOverflow)(void);
N_NIMCALL(NI, mulInt)(NI a0, NI b0);
N_NIMCALL(TY16005*, cstringarraytoseq_16222_1689653243)(NCSTRING* a0);
N_NIMCALL(NCSTRING*, alloccstringarray_16401_1689653243)(NimStringDesc** a0, NI a0Len0);
N_NIMCALL(void, dealloccstringarray_16629_1689653243)(NCSTRING* a0);
static N_INLINE(NI, atomicinc_16801_1689653243)(NI& memloc0, NI x0);
static N_INLINE(NI, atomicdec_16806_1689653243)(NI& memloc0, NI x0);
static N_INLINE(NI, addandfetch_17001_1689653243)(NI* p0, NI val0);
static N_INLINE(void, cpurelax_17801_1689653243)(void);
N_NIMCALL(void, setcontrolchook_19001_1689653243)(TY19005 hook0);
N_NIMCALL(NimStringDesc*, getstacktrace_19201_1689653243)(void);
N_NIMCALL(NimStringDesc*, getstacktrace_19203_1689653243)(Exception* e0);
static N_INLINE(NI, chckIndx)(NI i0, NI a0, NI b0);
N_NOINLINE(void, raiseIndexError)(void);
static N_INLINE(NI, chckRange)(NI i0, NI a0, NI b0);
N_NOINLINE(void, raiseRangeError)(NI64 val0);
N_NIMCALL(NimStringDesc*, nimInt64ToStr)(NI64 x0);
static N_INLINE(NF, chckRangeF)(NF x0, NF a0, NF b0);
N_NIMCALL(NimStringDesc*, nimFloatToStr)(NF f0);
N_NOINLINE(void, chckNil)(void* p0);
N_NIMCALL(void, TMP48)();
N_NIMCALL(void, nimRegisterGlobalMarker)(Globalmarkerproc56602 markerproc0);
static N_INLINE(TFrame*, getFrame)(void);
static N_INLINE(void, pushSafePoint)(TSafePoint* s0);
static N_INLINE(void, popSafePoint)(void);
static N_INLINE(void, popCurrentException)(void);
N_NIMCALL(NIM_BOOL, stacktraceavailable_20474_1689653243)(void);
N_NIMCALL(void, reraiseException)(void);
N_NOCONV(void, signalHandler)(int sign0);
static N_INLINE(void, Gcdisable_9801_1689653243)(void);
static N_INLINE(void, Gcenable_9803_1689653243)(void);
N_NIMCALL(void, registersignalhandler_23401_1689653243)(void);
N_NOINLINE(void, raiseFieldError)(NimStringDesc* f0);
N_NIMCALL(NI64, chckRange64)(NI64 i0, NI64 a0, NI64 b0);
N_NIMCALL(void, chckObj)(TNimType* obj0, TNimType* subclass0);
static N_INLINE(void, chckObjAsgn)(TNimType* a0, TNimType* b0);
N_NIMCALL(NIM_BOOL, isObj)(TNimType* obj0, TNimType* subclass0);
N_NOINLINE(void, raiseDivByZero)(void);
static N_INLINE(NI64, addInt64)(NI64 a0, NI64 b0);
static N_INLINE(NI64, subInt64)(NI64 a0, NI64 b0);
N_NIMCALL(NI64, mulInt64)(NI64 a0, NI64 b0);
static N_INLINE(NI64, negInt64)(NI64 a0);
static N_INLINE(NI64, absInt64)(NI64 a0);
static N_INLINE(NI64, divInt64)(NI64 a0, NI64 b0);
static N_INLINE(NI64, modInt64)(NI64 a0, NI64 b0);
static N_INLINE(NI, absInt)(NI a0);
static N_INLINE(NI, subInt)(NI a0, NI b0);
static N_INLINE(NI, negInt)(NI a0);
static N_INLINE(NI, divInt)(NI a0, NI b0);
static N_INLINE(NI, modInt)(NI a0, NI b0);
N_NOINLINE(void, raisefloatinvalidop_26419_1689653243)(void);
static N_INLINE(void, nanCheck)(NF x0);
N_NOINLINE(void, raisefloatoverflow_26444_1689653243)(NF x0);
static N_INLINE(void, infCheck)(NF x0);
N_NIMCALL(void, rawwrite_26602_1689653243)(FILE* f0, NimStringDesc* s0);
N_NOINLINE(void, nimLoadLibraryError)(NimStringDesc* path0);
N_NOINLINE(void, procaddrerror_26609_1689653243)(NCSTRING name0);
N_NIMCALL(void, nimUnloadLibrary)(void* lib0);
N_NIMCALL(void*, nimLoadLibrary)(NimStringDesc* path0);
N_NIMCALL(void*, nimGetProcAddr)(void* lib0, NCSTRING name0);
N_NIMCALL(NI, countBits32)(NI32 n0);
N_NIMCALL(NI, countBits64)(NI64 n0);
N_NIMCALL(NI, cardSet)(Nimset27202 s0, NI len0);
static N_INLINE(void*, ostryallocpages_30020_1689653243)(NI size0);
N_NIMCALL(NI, getmaxmem_30434_1689653243)(Memregion30286& a0);
N_NIMCALL(Avlnode30284*, find_31246_1689653243)(Avlnode30284* root0, NI key0);
N_NIMCALL(void, lldeallocall_31471_1689653243)(Memregion30286& a0);
N_NIMCALL(void, writefreelist_32830_1689653243)(Memregion30286* a0);
N_NIMCALL(NIM_BOOL, isallocatedptr_37202_1689653243)(Memregion30286* a0, void* p0);
N_NIMCALL(void*, rawalloc0_43811_1689653243)(Memregion30286& a0, NI requestedsize0);
N_NIMCALL(NI, ptrsize_46413_1689653243)(void* p0);
N_NIMCALL(void*, realloc_47804_1689653243)(Memregion30286& allocator0, void* p0, NI newsize0);
N_NIMCALL(void, deallocospages_47814_1689653243)(Memregion30286& a0);
static N_INLINE(NI, getfreemem_48023_1689653243)(Memregion30286* a0);
static N_INLINE(NI, gettotalmem_48027_1689653243)(Memregion30286* a0);
static N_INLINE(NIM_BOOL, contains_48159_1689653243)(Cellseq48122* s0, Cell48106* c0);
N_NIMCALL(void, deinit_48222_1689653243)(Cellseq48122& s0);
N_NIMCALL(void, excl_48875_1689653243)(Cellset48118& s0, Cell48106* cell0);
N_NIMCALL(void, deallocospages_51001_1689653243)(void);
N_NOCONV(void*, realloc_7433_1689653243)(void* p0, NI newsize0);
N_NOCONV(void*, allocshared_7451_1689653243)(NI size0);
N_NOCONV(void*, allocshared0_7467_1689653243)(NI size0);
N_NOCONV(void, deallocshared_7498_1689653243)(void* p0);
N_NOCONV(void*, reallocshared_7483_1689653243)(void* p0, NI newsize0);
N_NIMCALL(TNimType*, extGetCellType)(void* c0);
N_NIMCALL(NI, getRefcount)(void* p0);
N_NIMCALL(void, writecell_52418_1689653243)(NCSTRING msg0, Cell48106* c0);
N_NOINLINE(NIM_BOOL, isonstack_52611_1689653243)(void* p0);
static N_INLINE(void, rtladdcycleroot_53032_1689653243)(Cell48106* c0);
N_NIMCALL(void, nimGCref)(void* p0);
N_NIMCALL(void, nimGCunref)(void* p0);
N_NIMCALL(void, unsureAsgnRef)(void** dest0, void* src0);
N_NIMCALL(void, gcinvariant_57892_1689653243)(void);
N_NIMCALL(void*, newSeqRC1)(TNimType* typ0, NI len0);
N_NIMCALL(Foreigncell71404, protect_71408_1689653243)(void* x0);
N_NIMCALL(void, dispose_71413_1689653243)(Foreigncell71404 x0);
N_NIMCALL(NIM_BOOL, isnotforeign_71601_1689653243)(Foreigncell71404 x0);
N_NIMCALL(NI, len_71617_1689653243)(Gcstack50616* stack0);
N_NIMCALL(void, Gcsetstrategy_9814_1689653243)(Gcstrategy9808 strategy0);
N_NIMCALL(void, Gcenablemarkandsweep_9817_1689653243)(void);
N_NIMCALL(void, Gcdisablemarkandsweep_9819_1689653243)(void);
N_NIMCALL(void, Gcfullcollect_9805_1689653243)(void);
N_NIMCALL(NimStringDesc*, Gcgetstatistics_9821_1689653243)(void);
static N_INLINE(NI, cmpStrings)(NimStringDesc* a0, NimStringDesc* b0);
static N_INLINE(NIM_BOOL, eqStrings)(NimStringDesc* a0, NimStringDesc* b0);
N_NIMCALL(NimStringDesc*, copyStrLast)(NimStringDesc* s0, NI start_79810_1689653243, NI last0);
N_NIMCALL(NimStringDesc*, copyStr)(NimStringDesc* s0, NI start0);
N_NIMCALL(NI, hashString)(NimStringDesc* s0);
static N_INLINE(void, appendChar)(NimStringDesc* dest0, NIM_CHAR c0);
N_NIMCALL(TGenericSeq*, incrSeq)(TGenericSeq* seq0, NI elemsize0);
N_NIMCALL(TGenericSeq*, incrSeqV2)(TGenericSeq* seq0, NI elemsize0);
N_NIMCALL(TGenericSeq*, setLengthSeq)(TGenericSeq* seq0, NI elemsize0, NI newlen0);
N_NIMCALL(NI, nimParseBiggestFloat)(NimStringDesc* s0, NF& number0, NI start0);
N_NIMCALL(NimStringDesc*, nimBoolToStr)(NIM_BOOL x0);
N_NIMCALL(NimStringDesc*, nimCharToStr)(NIM_CHAR x0);
N_NIMCALL(NI, binaryStrSearch)(NimStringDesc** x0, NI x0Len0, NimStringDesc* y0);
N_NIMCALL(NimStringDesc*, readallfile_82284_1689653243)(FILE* file0);
static N_INLINE(void, rawEcho)(NimStringDesc* x0);
static N_INLINE(void, rawEchoNL)(void);
N_NIMCALL(NI, len_82812_1689653243)(NI16* w0);
N_NIMCALL(NI16*, newwidecstring_83812_1689653243)(NCSTRING source0, NI L0);
N_NIMCALL(void, TMP78)(void* p, NI op);
N_NIMCALL(NI16*, newwidecstring_83923_1689653243)(NCSTRING s0);
N_NIMCALL(NI16*, newwidecstring_84002_1689653243)(NimStringDesc* s0);
N_NIMCALL(NimStringDesc*, HEX24_84006_1689653243)(NI16* w0, NI estimate0, NI replacement0);
N_NIMCALL(NimStringDesc*, HEX24_84072_1689653243)(NI16* s0);
N_NIMCALL(void, genericresetaux_85401_1689653243)(void* dest0, TNimNode* n0);
N_NIMCALL(void, genericReset)(void* dest0, TNimType* mt0);
N_NIMCALL(void, genericassignaux_85406_1689653243)(void* dest0, void* src0, TNimType* mt0, NIM_BOOL shallow0);
N_NIMCALL(void, genericassignaux_85412_1689653243)(void* dest0, void* src0, TNimNode* n0, NIM_BOOL shallow0);
N_NIMCALL(void, genericAssign)(void* dest0, void* src0, TNimType* mt0);
N_NIMCALL(void, genericShallowAssign)(void* dest0, void* src0, TNimType* mt0);
N_NIMCALL(void, genericSeqAssign)(void* dest0, void* src_86204_1689653243, TNimType* mt0);
N_NIMCALL(void, genericAssignOpenArray)(void* dest0, void* src0, NI len0, TNimType* mt0);
N_NIMCALL(void, objectInit)(void* dest0, TNimType* typ0);
N_NIMCALL(void, objectinitaux_86278_1689653243)(void* dest0, TNimNode* n0);
N_NIMCALL(TNimNode*, selectbranch_86843_1689653243)(NI discval0, NI L0, TNimNode** a0);
N_NIMCALL(void, FieldDiscriminantCheck)(NI olddiscval0, NI newdiscval0, TNimNode** a0, NI L0);
N_NIMCALL(NimStringDesc*, reprAny)(void* p_87003_1689653243, TNimType* typ0);
N_NIMCALL(void, initreprclosure_87401_1689653243)(Reprclosure87355& cl0);
N_NIMCALL(void, repraux_88224_1689653243)(NimStringDesc*& result0, void* p0, TNimType* typ0, Reprclosure87355& cl0);
N_NIMCALL(void, reprsetaux_87271_1689653243)(NimStringDesc*& result0, void* p0, TNimType* typ0);
N_NIMCALL(void, addsetelem_87264_1689653243)(NimStringDesc*& result0, NI elem0, TNimType* typ0);
N_NIMCALL(NimStringDesc*, reprEnum)(NI e0, TNimType* typ0);
N_NIMCALL(NimStringDesc*, reprBool)(NIM_BOOL x0);
N_NIMCALL(NimStringDesc*, reprChar)(NIM_CHAR x0);
N_NIMCALL(NimStringDesc*, reprInt)(NI64 x0);
N_NIMCALL(void, reprarray_88232_1689653243)(NimStringDesc*& result0, void* p0, TNimType* typ0, Reprclosure87355& cl0);
N_NIMCALL(void, reprrecord_88444_1689653243)(NimStringDesc*& result0, void* p0, TNimType* typ0, Reprclosure87355& cl0);
N_NIMCALL(void, reprrecordaux_88295_1689653243)(NimStringDesc*& result0, void* p0, TNimNode* n0, Reprclosure87355& cl0);
N_NIMCALL(void, reprref_88470_1689653243)(NimStringDesc*& result0, void* p0, TNimType* typ0, Reprclosure87355& cl0);
N_NIMCALL(NimStringDesc*, reprPointer)(void* x0);
N_NIMCALL(void, reprsequence_88263_1689653243)(NimStringDesc*& result0, void* p0, TNimType* typ0, Reprclosure87355& cl0);
N_NIMCALL(NimStringDesc*, HEX24_7801_1689653243)(NU64 x0);
N_NIMCALL(void, reprstraux_87144_1689653243)(NimStringDesc*& result0, NimStringDesc* s0);
N_NIMCALL(void, deinitreprclosure_87802_1689653243)(Reprclosure87355& cl0);
N_NIMCALL(NimStringDesc*, reprFloat)(NF x0);
N_NIMCALL(NimStringDesc*, reprStr)(NimStringDesc* s0);
N_NIMCALL(NimStringDesc*, reprSet)(void* p0, TNimType* typ0);
N_NIMCALL(void, reprbreak_88201_1689653243)(NimStringDesc*& result0, Reprclosure87355* cl0);
N_NIMCALL(NimStringDesc*, reprOpenArray)(void* p0, NI length0, TNimType* elemtyp0);
static N_INLINE(Exception*, getCurrentException)(void);
static N_INLINE(NimStringDesc*, getcurrentexceptionmsg_89405_1689653243)(void);
N_NIMCALL(void, onraise_89421_1689653243)(TY18011 action0);
static N_INLINE(void, setcurrentexception_89436_1689653243)(Exception* exc0);
N_NIMCALL(void, quit_90232_1689653243)(NimStringDesc* errormsg0, NI errorcode0) __attribute__((noreturn));
static N_INLINE(NF, HEX2F_90407_1689653243)(NI x0, NI y0);
static N_INLINE(NimStringDesc*, HEX5BHEX5D_90444_1689653243)(NimStringDesc* s0, Slice90451 x0);
N_NIMCALL(NimStringDesc*, copyStrLast)(NimStringDesc* s0, NI first0, NI last0);
N_NIMCALL(void, HEX5BHEX5DHEX3D_90458_1689653243)(NimStringDesc*& s0, Slice90451 x0, NimStringDesc* b0);
N_NIMCALL(NimStringDesc*, gorge_90789_1689653243)(NimStringDesc* command0, NimStringDesc* input0, NimStringDesc* cache0);
N_NIMCALL(NimStringDesc*, staticexec_90795_1689653243)(NimStringDesc* command0, NimStringDesc* input0, NimStringDesc* cache0);
static N_INLINE(void, HEX2FHEX3D_90859_1689653243)(NF& x0, NF y0);
static N_INLINE(void, sysfatal_91021_1689653243)(NimStringDesc* message0) __attribute__((noreturn));
N_NIMCALL(void, TMP118)(void* p, NI op);
N_NOINLINE(void, raiseassert_91016_1689653243)(NimStringDesc* msg0);
N_NIMCALL(void, failedassertimpl_91039_1689653243)(NimStringDesc* msg0);
static N_INLINE(void, shallow_91618_1689653243)(NimStringDesc*& s_91621_1689653243);
N_NIMCALL(void, insert_92001_1689653243)(NimStringDesc*& x0, NimStringDesc* item0, NI i0);
N_NIMCALL(void, safeadd_92412_1689653243)(NimStringDesc*& x0, NIM_CHAR y0);
N_NIMCALL(void, safeadd_92417_1689653243)(NimStringDesc*& x0, NimStringDesc* y0);
N_NIMCALL(void, locals_92601_1689653243)(TNimObject* Result);
N_NIMCALL(void, genericdeepcopyaux_92611_1689653243)(void* dest0, void* src0, TNimType* mt0);
static N_INLINE(NimStringDesc*, copydeepstring_92815_1689653243)(NimStringDesc* src0);
N_NIMCALL(void, genericdeepcopyaux_92616_1689653243)(void* dest0, void* src0, TNimNode* n0);
N_NIMCALL(void, genericDeepCopy)(void* dest0, void* src0, TNimType* mt0);
N_NIMCALL(void, genericSeqDeepCopy)(void* dest0, void* src_93471_1689653243, TNimType* mt0);
N_NIMCALL(void, genericDeepCopyOpenArray)(void* dest0, void* src0, NI len0, TNimType* mt0);
N_NIMCALL(NI, HEX5E_93611_1689653243)(NI x0);
N_NIMCALL(NI, xlen_93635_1689653243)(NimStringDesc* x0);
static N_INLINE(NIM_BOOL, HEX3DHEX3D_93646_1689653243)(NCSTRING x0, NCSTRING y0);
STRING_LITERAL(TMP4, "", 0);
STRING_LITERAL(TMP5, "out of memory", 13);
STRING_LITERAL(TMP6, "No stack traceback available\012", 29);
STRING_LITERAL(TMP7, "Traceback (most recent call last)\012", 34);
STRING_LITERAL(TMP8, "(", 1);
STRING_LITERAL(TMP9, " calls omitted) ...", 19);
STRING_LITERAL(TMP10, "\012", 1);
STRING_LITERAL(TMP24, "rb", 2);
STRING_LITERAL(TMP25, "wb", 2);
STRING_LITERAL(TMP26, "w+b", 3);
STRING_LITERAL(TMP27, "r+b", 3);
STRING_LITERAL(TMP28, "ab", 2);
NIM_CONST TY84213 Formatopen_84210_1689653243 = {((NimStringDesc*) &TMP24),
((NimStringDesc*) &TMP25),
((NimStringDesc*) &TMP26),
((NimStringDesc*) &TMP27),
((NimStringDesc*) &TMP28)}
;
STRING_LITERAL(TMP29, "cannot open: ", 13);
STRING_LITERAL(TMP30, "error while reading from file", 29);
STRING_LITERAL(TMP33, "cannot write string to file", 27);
STRING_LITERAL(TMP34, "true", 4);
STRING_LITERAL(TMP35, "false", 5);
STRING_LITERAL(TMP36, "EOF reached", 11);
STRING_LITERAL(TMP37, "cannot retrieve file position", 29);
STRING_LITERAL(TMP38, "cannot set file position", 24);
STRING_LITERAL(TMP39, "buffer overflow: (start+len) > length of openarray buffer", 57);
STRING_LITERAL(TMP41, "over- or underflow", 18);
STRING_LITERAL(TMP42, "index out of bounds", 19);
STRING_LITERAL(TMP43, "value out of range: ", 20);
STRING_LITERAL(TMP44, "nan", 3);
STRING_LITERAL(TMP45, "-inf", 4);
STRING_LITERAL(TMP46, "inf", 3);
STRING_LITERAL(TMP47, "attempt to write to a nil address", 33);
STRING_LITERAL(TMP49, "[GC] cannot register global variable; too many global variables", 63);
STRING_LITERAL(TMP50, "no exception to reraise", 23);
STRING_LITERAL(TMP51, "SIGINT: Interrupted by Ctrl-C.\012", 31);
STRING_LITERAL(TMP52, "SIGSEGV: Illegal storage access. (Attempt to read from nil?)\012", 61);
STRING_LITERAL(TMP53, "SIGABRT: Abnormal termination.\012", 31);
STRING_LITERAL(TMP54, "SIGFPE: Arithmetic error.\012", 26);
STRING_LITERAL(TMP55, "SIGILL: Illegal operation.\012", 27);
STRING_LITERAL(TMP56, "SIGBUS: Illegal storage access. (Attempt to read from nil?)\012", 60);
STRING_LITERAL(TMP57, "SIGPIPE: Pipe closed.\012", 22);
STRING_LITERAL(TMP58, "unknown signal\012", 15);
STRING_LITERAL(TMP59, " is not accessible", 18);
STRING_LITERAL(TMP60, "invalid object conversion", 25);
STRING_LITERAL(TMP61, "invalid object assignment", 25);
STRING_LITERAL(TMP62, "division by zero", 16);
STRING_LITERAL(TMP63, "FPU operation caused a NaN result", 33);
STRING_LITERAL(TMP64, "FPU operation caused an overflow", 32);
STRING_LITERAL(TMP65, "FPU operations caused an underflow", 34);
STRING_LITERAL(TMP66, "could not load: ", 16);
STRING_LITERAL(TMP67, "could not import: ", 18);
STRING_LITERAL(TMP68, "[GC] total memory: ", 19);
STRING_LITERAL(TMP69, "\012[GC] occupied memory: ", 23);
STRING_LITERAL(TMP70, "\012[GC] stack scans: ", 19);
STRING_LITERAL(TMP71, "\012[GC] stack cells: ", 19);
STRING_LITERAL(TMP72, "\012[GC] cycle collections: ", 25);
STRING_LITERAL(TMP73, "\012[GC] max threshold: ", 21);
STRING_LITERAL(TMP74, "\012[GC] zct capacity: ", 20);
STRING_LITERAL(TMP75, "\012[GC] max cycle table size: ", 28);
STRING_LITERAL(TMP76, "\012[GC] max pause time [ms]: ", 27);
STRING_LITERAL(TMP77, "[GC] max stack size: ", 21);
NIM_CONST char136Set Identchars_80605_1689653243 = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x03,
0xFE, 0xFF, 0xFF, 0x87, 0xFE, 0xFF, 0xFF, 0x07,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
;
NIM_CONST TY80608 powtens_80607_1689653243 = {1.0000000000000000e+00,
1.0000000000000000e+01,
1.0000000000000000e+02,
1.0000000000000000e+03,
1.0000000000000000e+04,
1.0000000000000000e+05,
1.0000000000000000e+06,
1.0000000000000000e+07,
1.0000000000000000e+08,
1.0000000000000000e+09,
1.0000000000000000e+10,
1.0000000000000000e+11,
1.0000000000000000e+12,
1.0000000000000000e+13,
1.0000000000000000e+14,
1.0000000000000000e+15,
1.0000000000000000e+16,
1.0000000000000000e+17,
1.0000000000000000e+18,
1.0000000000000000e+19,
1.0000000000000000e+20,
1.0000000000000000e+21,
1.0000000000000000e+22}
;
STRING_LITERAL(TMP79, "assignment to discriminant changes object branch", 48);
STRING_LITERAL(TMP80, "...", 3);
STRING_LITERAL(TMP81, "{", 1);
STRING_LITERAL(TMP82, ", ", 2);
STRING_LITERAL(TMP83, " (invalid data!)", 16);
STRING_LITERAL(TMP84, "\'", 1);
STRING_LITERAL(TMP85, "\\\"", 2);
STRING_LITERAL(TMP86, "\\\\", 2);
STRING_LITERAL(TMP87, "\\", 1);
STRING_LITERAL(TMP88, "}", 1);
STRING_LITERAL(TMP89, "[", 1);
STRING_LITERAL(TMP90, "]", 1);
STRING_LITERAL(TMP91, " = ", 3);
STRING_LITERAL(TMP92, ",\012", 2);
STRING_LITERAL(TMP93, "nil", 3);
STRING_LITERAL(TMP94, "ref ", 4);
STRING_LITERAL(TMP95, " --> ", 5);
STRING_LITERAL(TMP96, "0", 1);
STRING_LITERAL(TMP97, "\"", 1);
STRING_LITERAL(TMP98, "\\10\"\012\"", 6);
STRING_LITERAL(TMP99, "(invalid data!)", 15);
NIM_BOOL nimvm_5554_1689653243;
NI nim_program_result;
TY10009 globalraisehook_10013_1689653243;
TY10014 localraisehook_10018_1689653243;
TY10019 outofmemhook_10021_1689653243;
TNimType NTI3408; /* RootObj */
TNimType NTI3424; /* Exception */
TNimType NTI10010; /* ref Exception */
TNimType NTI140; /* cstring */
TNimType NTI138; /* string */
TNimType NTI3426; /* SystemError */
TNimType NTI3428; /* IOError */
TNimType NTI15635; /* ref IOError */
TNimType NTI3450; /* OutOfMemError */
static TNimType* Nim_OfCheck_CACHE1[2];
TNimType NTI3460; /* ReraiseError */
TNimType NTI21625; /* ref ReraiseError */
TNimType NTI3456; /* RangeError */
TNimType NTI23812; /* ref RangeError */
TNimType NTI3452; /* IndexError */
TNimType NTI23834; /* ref IndexError */
TNimType NTI3454; /* FieldError */
TNimType NTI23859; /* ref FieldError */
TNimType NTI3446; /* ValueError */
TNimType NTI24025; /* ref ValueError */
TNimType NTI3464; /* ObjectConversionError */
TNimType NTI24084; /* ref ObjectConversionError */
TNimType NTI3462; /* ObjectAssignmentError */
TNimType NTI24120; /* ref ObjectAssignmentError */
TNimType NTI3436; /* ArithmeticError */
TNimType NTI3440; /* OverflowError */
TNimType NTI24272; /* ref OverflowError */
TNimType NTI3438; /* DivByZeroError */
TNimType NTI24294; /* ref DivByZeroError */
TNimType NTI3466; /* FloatingPointError */
TNimType NTI3468; /* FloatInvalidOpError */
TNimType NTI26430; /* ref FloatInvalidOpError */
TNimType NTI3472; /* FloatOverflowError */
TNimType NTI26456; /* ref FloatOverflowError */
TNimType NTI3474; /* FloatUnderflowError */
TNimType NTI26475; /* ref FloatUnderflowError */
TNimType strdesc_12403_1689653243;
TNimType NTI16005; /* seq[string] */
TY19401 errormessagewriter_19404_1689653243;
TFrame* frameptr_19636_1689653243;
TSafePoint* exchandler_19637_1689653243;
Exception* currexception_19639_1689653243;
TY20003 tempframes_20004_1689653243;
Avlnode30284 bottomdata_30320_1689653243;
Avlnode30284* bottom_30321_1689653243;
Gcheap50618 gch_50658_1689653243;
NI globalmarkerslen_56607_1689653243;
TY56610 globalmarkers_56611_1689653243;
TNimType NTI108; /* int16 */
TNimType NTI82807; /* array[0..1000000, Utf16Char] */
TNimType NTI82804; /* WideCString */
TNimType NTI3444; /* AssertionError */
TNimType NTI91028; /* ref AssertionError */

N_NIMCALL(NI, min_8666_1689653243)(NI x0, NI y0) {
	NI result0;
	result0 = (NI)0;
	{
		if (!(x0 <= y0)) goto LA3;
{		result0 = x0;
}	}
	goto LA1;
	LA3: ;
	{
		result0 = y0;
	}
	LA1: ;
	return result0;
}

N_NIMCALL(NI8, min_8671_1689653243)(NI8 x0, NI8 y0) {
	NI8 result0;
	result0 = (NI8)0;
	{
		if (!(x0 <= y0)) goto LA3;
{		result0 = x0;
}	}
	goto LA1;
	LA3: ;
	{
		result0 = y0;
	}
	LA1: ;
	return result0;
}

N_NIMCALL(NI16, min_8676_1689653243)(NI16 x0, NI16 y0) {
	NI16 result0;
	result0 = (NI16)0;
	{
		if (!(x0 <= y0)) goto LA3;
{		result0 = x0;
}	}
	goto LA1;
	LA3: ;
	{
		result0 = y0;
	}
	LA1: ;
	return result0;
}

N_NIMCALL(NI32, min_8681_1689653243)(NI32 x0, NI32 y0) {
	NI32 result0;
	result0 = (NI32)0;
	{
		if (!(x0 <= y0)) goto LA3;
{		result0 = x0;
}	}
	goto LA1;
	LA3: ;
	{
		result0 = y0;
	}
	LA1: ;
	return result0;
}

N_NIMCALL(NI64, min_8686_1689653243)(NI64 x0, NI64 y0) {
	NI64 result0;
	result0 = (NI64)0;
	{
		if (!(x0 <= y0)) goto LA3;
{		result0 = x0;
}	}
	goto LA1;
	LA3: ;
	{
		result0 = y0;
	}
	LA1: ;
	return result0;
}

N_NIMCALL(NI, max_8701_1689653243)(NI x0, NI y0) {
	NI result0;
	result0 = (NI)0;
	{
		if (!(y0 <= x0)) goto LA3;
{		result0 = x0;
}	}
	goto LA1;
	LA3: ;
	{
		result0 = y0;
	}
	LA1: ;
	return result0;
}

N_NIMCALL(NI8, max_8706_1689653243)(NI8 x0, NI8 y0) {
	NI8 result0;
	result0 = (NI8)0;
	{
		if (!(y0 <= x0)) goto LA3;
{		result0 = x0;
}	}
	goto LA1;
	LA3: ;
	{
		result0 = y0;
	}
	LA1: ;
	return result0;
}

N_NIMCALL(NI16, max_8711_1689653243)(NI16 x0, NI16 y0) {
	NI16 result0;
	result0 = (NI16)0;
	{
		if (!(y0 <= x0)) goto LA3;
{		result0 = x0;
}	}
	goto LA1;
	LA3: ;
	{
		result0 = y0;
	}
	LA1: ;
	return result0;
}

N_NIMCALL(NI32, max_8716_1689653243)(NI32 x0, NI32 y0) {
	NI32 result0;
	result0 = (NI32)0;
	{
		if (!(y0 <= x0)) goto LA3;
{		result0 = x0;
}	}
	goto LA1;
	LA3: ;
	{
		result0 = y0;
	}
	LA1: ;
	return result0;
}

N_NIMCALL(NI64, max_8721_1689653243)(NI64 x0, NI64 y0) {
	NI64 result0;
	result0 = (NI64)0;
	{
		if (!(y0 <= x0)) goto LA3;
{		result0 = x0;
}	}
	goto LA1;
	LA3: ;
	{
		result0 = y0;
	}
	LA1: ;
	return result0;
}

N_NIMCALL(NF, abs_8736_1689653243)(NF x0) {
	NF result0;
	result0 = (NF)0;
	{
		if (!(x0 < 0.0)) goto LA3;
{		result0 = -(x0);
}	}
	goto LA1;
	LA3: ;
	{
		result0 = x0;
	}
	LA1: ;
	return result0;
}

N_NIMCALL(NF, min_8740_1689653243)(NF x0, NF y0) {
	NF result0;
	result0 = (NF)0;
	{
		if (!(x0 <= y0)) goto LA3;
{		result0 = x0;
}	}
	goto LA1;
	LA3: ;
	{
		result0 = y0;
	}
	LA1: ;
	return result0;
}

N_NIMCALL(NF, max_8745_1689653243)(NF x0, NF y0) {
	NF result0;
	result0 = (NF)0;
	{
		if (!(y0 <= x0)) goto LA3;
{		result0 = x0;
}	}
	goto LA1;
	LA3: ;
	{
		result0 = y0;
	}
	LA1: ;
	return result0;
}

N_NIMCALL(void, add_10037_1689653243)(NimStringDesc*& x0, NCSTRING y0) {
	NI i0 = ((NI) 0);
	{
		while (1) {
			if (!!(((NU8)(y0[i0]) == (NU8)(0)))) goto LA2;
			x0 = addChar(x0, y0[i0]);
			i0 += ((NI) 1);
		} LA2: ;
	}
}

N_NIMCALL(NI, abs_11006_1689653243)(NI x0) {
	NI result0;
	result0 = (NI)0;
	{
		if (!(x0 < ((NI) 0))) goto LA3;
{		result0 = ((NI64)-(x0));
}	}
	goto LA1;
	LA3: ;
	{
		result0 = x0;
	}
	LA1: ;
	return result0;
}

N_NIMCALL(NI8, abs_11010_1689653243)(NI8 x0) {
	NI8 result0;
	result0 = (NI8)0;
	{
		if (!(x0 < ((NI8) 0))) goto LA3;
{		result0 = ((NI8)-(x0));
}	}
	goto LA1;
	LA3: ;
	{
		result0 = x0;
	}
	LA1: ;
	return result0;
}

N_NIMCALL(NI16, abs_11014_1689653243)(NI16 x0) {
	NI16 result0;
	result0 = (NI16)0;
	{
		if (!(x0 < ((NI16) 0))) goto LA3;
{		result0 = ((NI16)-(x0));
}	}
	goto LA1;
	LA3: ;
	{
		result0 = x0;
	}
	LA1: ;
	return result0;
}

N_NIMCALL(NI32, abs_11018_1689653243)(NI32 x0) {
	NI32 result0;
	result0 = (NI32)0;
	{
		if (!(x0 < ((NI32) 0))) goto LA3;
{		result0 = ((NI32)-(x0));
}	}
	goto LA1;
	LA3: ;
	{
		result0 = x0;
	}
	LA1: ;
	return result0;
}

N_NIMCALL(NI64, abs_11022_1689653243)(NI64 x0) {
	NI64 result0;
	result0 = (NI64)0;
	{
		if (!(x0 < IL64(0))) goto LA3;
{		result0 = -(x0);
}	}
	goto LA1;
	LA3: ;
	{
		result0 = x0;
	}
	LA1: ;
	return result0;
}

N_NOINLINE(NI, stacksize_71801_1689653243)(void) {
	NI result0;
	void* volatile stacktop0;
	result0 = (NI)0;
	stacktop0 = (void*)0;
	result0 = ((NI)(((NI) ((&stacktop0))) - ((NI) (gch_50658_1689653243.stackbottom))) > 0? ((NI)(((NI) ((&stacktop0))) - ((NI) (gch_50658_1689653243.stackbottom)))) : -((NI)(((NI) ((&stacktop0))) - ((NI) (gch_50658_1689653243.stackbottom)))));
	return result0;
}

static N_INLINE(void, popFrame)(void) {
	frameptr_19636_1689653243 = (*frameptr_19636_1689653243).prev;
}

static N_INLINE(NI, getoccupiedmem_48031_1689653243)(Memregion30286* a0) {
	NI result0;
	nimfr("getOccupiedMem", "alloc.nim")
	result0 = (NI)0;
	nimln(691, "alloc.nim");
	result0 = (NI)((*a0).currmem - (*a0).freemem);
	popFrame();
	return result0;
}

N_NIMCALL(NI, lowgauge_31212_1689653243)(Avlnode30284* n0) {
	NI result0;
	nimfr("lowGauge", "avltree.nim")
	result0 = (NI)0;
	nimln(15, "avltree.nim");
	Avlnode30284* it0 = n0;
	{
		nimln(16, "avltree.nim");
		while (1) {
			nimln(12, "avltree.nim");
			if (!!((it0 == bottom_30321_1689653243))) goto LA2;
			nimln(17, "avltree.nim");
			result0 = (*it0).key;
			nimln(18, "avltree.nim");
			it0 = (*it0).link[(((NI) 0))- 0];
		} LA2: ;
	}
	popFrame();
	return result0;
}

N_NIMCALL(NI, highgauge_31229_1689653243)(Avlnode30284* n0) {
	NI result0;
	nimfr("highGauge", "avltree.nim")
	result0 = (NI)0;
	nimln(21, "avltree.nim");
	result0 = ((NI) -1);
	nimln(22, "avltree.nim");
	Avlnode30284* it0 = n0;
	{
		nimln(23, "avltree.nim");
		while (1) {
			nimln(12, "avltree.nim");
			if (!!((it0 == bottom_30321_1689653243))) goto LA2;
			nimln(24, "avltree.nim");
			result0 = (*it0).upperbound;
			nimln(25, "avltree.nim");
			it0 = (*it0).link[(((NI) 1))- 0];
		} LA2: ;
	}
	popFrame();
	return result0;
}

static N_INLINE(void, prepareforinteriorpointerchecking_45488_1689653243)(Memregion30286& a0) {
	nimfr("prepareForInteriorPointerChecking", "alloc.nim")
	nimln(596, "alloc.nim");
	a0.minlargeobj = lowgauge_31212_1689653243(a0.root);
	nimln(597, "alloc.nim");
	a0.maxlargeobj = highgauge_31229_1689653243(a0.root);
	popFrame();
}

N_NIMCALL(Trunk30210*, intsetget_31490_1689653243)(Intset30214* t0, NI key0) {
	Trunk30210* result0;
	nimfr("intSetGet", "alloc.nim")
{	result0 = (Trunk30210*)0;
	nimln(177, "alloc.nim");
	Trunk30210* it0 = (*t0).data[((NI)(key0 & ((NI) 255)))- 0];
	{
		nimln(178, "alloc.nim");
		while (1) {
			nimln(343, "system.nim");
			if (!!((it0 == NIM_NIL))) goto LA2;
			nimln(179, "alloc.nim");
			{
				if (!((*it0).key == key0)) goto LA5;
{				result0 = it0;
				goto BeforeRet;
}			}
			LA5: ;
			nimln(180, "alloc.nim");
			it0 = (*it0).next;
		} LA2: ;
	}
	nimln(181, "alloc.nim");
	result0 = NIM_NIL;
	}BeforeRet: ;
	popFrame();
	return result0;
}

N_NIMCALL(NIM_BOOL, contains_31540_1689653243)(Intset30214* s0, NI key0) {
	NIM_BOOL result0;
	nimfr("contains", "alloc.nim")
	result0 = (NIM_BOOL)0;
	nimln(192, "alloc.nim");
	Trunk30210* t0 = intsetget_31490_1689653243(s0, (NI)((NU64)(key0) >> (NU64)(((NI) 9))));
	nimln(193, "alloc.nim");
	{
		nimln(343, "system.nim");
		if (!!((t0 == NIM_NIL))) goto LA3;
{		nimln(194, "alloc.nim");
		NI u0 = (NI)(key0 & ((NI) 511));
		nimln(195, "alloc.nim");
		nimln(343, "system.nim");
		nimln(195, "alloc.nim");
		result0 = !(((NI)((*t0).bits[((NI)((NU64)(((NI) (u0))) >> (NU64)(((NI) 6))))- 0] & (NI)((NU64)(((NI) 1)) << (NU64)(((NI) ((NI)(((NI) (u0)) & ((NI) 63))))))) == ((NI) 0)));
}	}
	goto LA1;
	LA3: ;
	{
		nimln(197, "alloc.nim");
		result0 = NIM_FALSE;
	}
	LA1: ;
	popFrame();
	return result0;
}

static N_INLINE(NI, pageindex_31976_1689653243)(void* p0) {
	NI result0;
	nimfr("pageIndex", "alloc.nim")
	result0 = (NI)0;
	nimln(267, "alloc.nim");
	result0 = (NI)((NU64)(((NI) (p0))) >> (NU64)(((NI) 12)));
	popFrame();
	return result0;
}

static N_INLINE(NIM_BOOL, isaccessible_32816_1689653243)(Memregion30286* a0, void* p0) {
	NIM_BOOL result0;
	nimfr("isAccessible", "alloc.nim")
	result0 = (NIM_BOOL)0;
	nimln(317, "alloc.nim");
	result0 = contains_31540_1689653243((&(*a0).chunkstarts), pageindex_31976_1689653243(p0));
	popFrame();
	return result0;
}

static N_INLINE(Basechunk30238*, pageaddr_31981_1689653243)(void* p0) {
	Basechunk30238* result0;
	nimfr("pageAddr", "alloc.nim")
	result0 = (Basechunk30238*)0;
	nimln(270, "alloc.nim");
	result0 = ((Basechunk30238*) ((NI)(((NI) (p0)) & ((NI) -4096))));
	popFrame();
	return result0;
}

static N_INLINE(NIM_BOOL, chunkunused_31889_1689653243)(Basechunk30238* c0) {
	NIM_BOOL result0;
	nimfr("chunkUnused", "alloc.nim")
	result0 = (NIM_BOOL)0;
	nimln(233, "alloc.nim");
	result0 = !((*c0).used);
	popFrame();
	return result0;
}

static N_INLINE(NIM_BOOL, issmallchunk_31869_1689653243)(Basechunk30238* c0) {
	NIM_BOOL result0;
	nimfr("isSmallChunk", "alloc.nim")
{	result0 = (NIM_BOOL)0;
	nimln(230, "alloc.nim");
	nimln(67, "alloc.nim");
	result0 = ((*c0).size <= (NI)(((NI) 4096) - (NI)(((NI)sizeof(Smallchunk30240)) - ((NI) 8))));
	goto BeforeRet;
	}BeforeRet: ;
	popFrame();
	return result0;
}

N_NIMCALL(Avlnode30284*, inrange_31281_1689653243)(Avlnode30284* root0, NI key0) {
	Avlnode30284* result0;
	nimfr("inRange", "avltree.nim")
{	result0 = (Avlnode30284*)0;
	nimln(34, "avltree.nim");
	Avlnode30284* it0 = root0;
	{
		nimln(35, "avltree.nim");
		while (1) {
			nimln(12, "avltree.nim");
			if (!!((it0 == bottom_30321_1689653243))) goto LA2;
			nimln(36, "avltree.nim");
			{
				NIM_BOOL LOC5;
				LOC5 = (NIM_BOOL)0;
				LOC5 = ((NU64)((*it0).key) <= (NU64)(key0));
				if (!(LOC5)) goto LA6;
				LOC5 = ((NU64)(key0) < (NU64)((*it0).upperbound));
				LA6: ;
				if (!LOC5) goto LA7;
{				result0 = it0;
				goto BeforeRet;
}			}
			LA7: ;
			nimln(37, "avltree.nim");
			it0 = (*it0).link[(((NU64)((*it0).key) < (NU64)(key0)))- 0];
		} LA2: ;
	}
	}BeforeRet: ;
	popFrame();
	return result0;
}

N_NIMCALL(void*, interiorallocatedptr_45492_1689653243)(Memregion30286* a0, void* p0) {
	void* result0;
	nimfr("interiorAllocatedPtr", "alloc.nim")
	result0 = (void*)0;
	nimln(600, "alloc.nim");
	{
		if (!isaccessible_32816_1689653243(a0, p0)) goto LA3;
{		nimln(601, "alloc.nim");
		Basechunk30238* c_45497_1689653243 = pageaddr_31981_1689653243(p0);
		nimln(602, "alloc.nim");
		{
			NIM_BOOL LOC7;
			LOC7 = (NIM_BOOL)0;
			LOC7 = chunkunused_31889_1689653243(c_45497_1689653243);
			if (!!(LOC7)) goto LA8;
{			nimln(603, "alloc.nim");
			{
				if (!issmallchunk_31869_1689653243(c_45497_1689653243)) goto LA12;
{				nimln(604, "alloc.nim");
				Smallchunk30240* c0 = ((Smallchunk30240*) (c_45497_1689653243));
				nimln(605, "alloc.nim");
				nimln(67, "alloc.nim");
				NI offset0 = (NI)((NU64)(((NI) ((NI)(((NI) (p0)) & ((NI) 4095))))) - (NU64)((NI)(((NI)sizeof(Smallchunk30240)) - ((NI) 8))));
				nimln(607, "alloc.nim");
				{
					nimln(1745, "system.nim");
					if (!((NU64)(offset0) < (NU64)((*c0).acc))) goto LA16;
{					nimln(610, "alloc.nim");
					nimln(611, "alloc.nim");
					nimln(610, "alloc.nim");
					nimln(611, "alloc.nim");
					Freecell30230* d0 = ((Freecell30230*) ((NI)((NU64)((NI)((NU64)(((NI) ((&(*c0).data)))) + (NU64)(offset0))) - (NU64)((NI)((NU64)(offset0) % (NU64)((*c0).size))))));
					nimln(612, "alloc.nim");
					{
						nimln(1745, "system.nim");
						if (!((NU64)(((NI) 1)) < (NU64)((*d0).zerofield))) goto LA20;
{						nimln(613, "alloc.nim");
						result0 = ((void*) (d0));
}					}
					LA20: ;
}				}
				LA16: ;
}			}
			goto LA10;
			LA12: ;
			{
				nimln(616, "alloc.nim");
				Bigchunk30242* c0 = ((Bigchunk30242*) (c_45497_1689653243));
				nimln(617, "alloc.nim");
				NF* d0 = (&(*c0).data);
				nimln(618, "alloc.nim");
				{
					NIM_BOOL LOC25;
					LOC25 = (NIM_BOOL)0;
					nimln(347, "system.nim");
					LOC25 = (((void*) (d0)) <= p0);
					if (!(LOC25)) goto LA26;
					nimln(1745, "system.nim");
					LOC25 = ((NU64)(((NI) 1)) < (NU64)((*((Freecell30230*) (d0))).zerofield));
					LA26: ;
					if (!LOC25) goto LA27;
{					nimln(619, "alloc.nim");
					result0 = ((void*) (d0));
}				}
				LA27: ;
			}
			LA10: ;
}		}
		LA8: ;
}	}
	goto LA1;
	LA3: ;
	{
		nimln(622, "alloc.nim");
		NI q0 = ((NI) (p0));
		nimln(623, "alloc.nim");
		{
			NIM_BOOL LOC32;
			LOC32 = (NIM_BOOL)0;
			nimln(1741, "system.nim");
			LOC32 = ((NU64)((*a0).minlargeobj) <= (NU64)(q0));
			if (!(LOC32)) goto LA33;
			nimln(623, "alloc.nim");
			LOC32 = ((NU64)(q0) <= (NU64)((*a0).maxlargeobj));
			LA33: ;
			if (!LOC32) goto LA34;
{			nimln(626, "alloc.nim");
			Avlnode30284* avlnode0 = inrange_31281_1689653243((*a0).root, q0);
			nimln(627, "alloc.nim");
			{
				Basechunk30238* LOC40;
				nimln(343, "system.nim");
				if (!!((avlnode0 == NIM_NIL))) goto LA38;
{				nimln(628, "alloc.nim");
				void* k0 = ((void*) ((*avlnode0).key));
				nimln(629, "alloc.nim");
				LOC40 = (Basechunk30238*)0;
				LOC40 = pageaddr_31981_1689653243(k0);
				Bigchunk30242* c0 = ((Bigchunk30242*) (LOC40));
				nimln(631, "alloc.nim");
				{
					nimln(1745, "system.nim");
					if (!((NU64)(((NI) 1)) < (NU64)((*((Freecell30230*) (k0))).zerofield))) goto LA43;
{					nimln(632, "alloc.nim");
					result0 = k0;
}				}
				LA43: ;
}			}
			LA38: ;
}		}
		LA34: ;
	}
	LA1: ;
	popFrame();
	return result0;
}

static N_INLINE(NI, roundup_28801_1689653243)(NI x0, NI v0) {
	NI result0;
	nimfr("roundup", "osalloc.nim")
	result0 = (NI)0;
	nimln(11, "osalloc.nim");
	result0 = (NI)((NI)(x0 + (NI)(v0 - ((NI) 1))) & (NI)((NU64) ~((NI)(v0 - ((NI) 1)))));
	popFrame();
	return result0;
}

static N_INLINE(void, listremove_33802_1689653243)(Bigchunk30242*& head0, Bigchunk30242* c0) {
	nimfr("listRemove", "alloc.nim")
	nimln(345, "alloc.nim");
	{
		if (!(c0 == head0)) goto LA3;
{		nimln(346, "alloc.nim");
		head0 = (*c0).next;
		nimln(348, "alloc.nim");
		{
			nimln(343, "system.nim");
			if (!!((head0 == NIM_NIL))) goto LA7;
{			nimln(348, "alloc.nim");
			(*head0).prev = NIM_NIL;
}		}
		LA7: ;
}	}
	goto LA1;
	LA3: ;
	{
		nimln(351, "alloc.nim");
		(*(*c0).prev).next = (*c0).next;
		nimln(352, "alloc.nim");
		{
			nimln(343, "system.nim");
			if (!!(((*c0).next == NIM_NIL))) goto LA12;
{			nimln(352, "alloc.nim");
			(*(*c0).next).prev = (*c0).prev;
}		}
		LA12: ;
	}
	LA1: ;
	nimln(353, "alloc.nim");
	(*c0).next = NIM_NIL;
	nimln(354, "alloc.nim");
	(*c0).prev = NIM_NIL;
	popFrame();
}

static N_INLINE(void, updateprevsize_32869_1689653243)(Memregion30286& a0, Bigchunk30242* c0, NI prevsize0) {
	nimfr("updatePrevSize", "alloc.nim")
	nimln(358, "alloc.nim");
	Basechunk30238* ri0 = ((Basechunk30238*) ((NI)((NU64)(((NI) (c0))) + (NU64)((*c0).size))));
	nimln(360, "alloc.nim");
	{
		if (!isaccessible_32816_1689653243((&a0), ((void*) (ri0)))) goto LA3;
{		nimln(361, "alloc.nim");
		(*ri0).prevsize = prevsize0;
}	}
	LA3: ;
	popFrame();
}

N_NOINLINE(void, raiseoutofmem_28434_1689653243)(void) {
	nimfr("raiseOutOfMem", "mmdisp.nim")
	nimln(64, "mmdisp.nim");
	{
		nimln(343, "system.nim");
		if (!!((outofmemhook_10021_1689653243 == NIM_NIL))) goto LA3;
{		nimln(64, "mmdisp.nim");
		outofmemhook_10021_1689653243();
}	}
	LA3: ;
	nimln(65, "mmdisp.nim");
	printf("%s\012", ((NimStringDesc*) &TMP5)? (((NimStringDesc*) &TMP5))->data:"nil");
	fflush(stdout);
	nimln(66, "mmdisp.nim");
	exit(((NI) 1));
	popFrame();
}

static N_INLINE(void*, osallocpages_30014_1689653243)(NI size0) {
	void* result0;
	nimfr("osAllocPages", "osalloc.nim")
	result0 = (void*)0;
	nimln(100, "osalloc.nim");
	nimln(101, "osalloc.nim");
	result0 = mmap(NIM_NIL, size0, ((int) 3), (NI32)(((NI32) 2) | MAP_ANONYMOUS), ((int) -1), ((NI) 0));
	nimln(102, "osalloc.nim");
	{
		NIM_BOOL LOC3;
		LOC3 = (NIM_BOOL)0;
		LOC3 = (result0 == NIM_NIL);
		if (LOC3) goto LA4;
		LOC3 = (result0 == ((void*) -1));
		LA4: ;
		if (!LOC3) goto LA5;
{		nimln(103, "osalloc.nim");
		raiseoutofmem_28434_1689653243();
}	}
	LA5: ;
	popFrame();
	return result0;
}

static N_INLINE(void, inccurrmem_30402_1689653243)(Memregion30286& a0, NI bytes0) {
	nimfr("incCurrMem", "alloc.nim")
	nimln(116, "alloc.nim");
	a0.currmem += bytes0;
	popFrame();
}

N_NIMCALL(void*, llalloc_30443_1689653243)(Memregion30286& a0, NI size0) {
	void* result0;
	nimfr("llAlloc", "alloc.nim")
	result0 = (void*)0;
	nimln(131, "alloc.nim");
	{
		NIM_BOOL LOC3;
		void* LOC7;
		LOC3 = (NIM_BOOL)0;
		LOC3 = (a0.llmem == NIM_NIL);
		if (LOC3) goto LA4;
		nimln(351, "system.nim");
		LOC3 = ((*a0.llmem).size < size0);
		LA4: ;
		if (!LOC3) goto LA5;
{		nimln(136, "alloc.nim");
		Llchunk30280* old0 = a0.llmem;
		nimln(137, "alloc.nim");
		LOC7 = (void*)0;
		LOC7 = osallocpages_30014_1689653243(((NI) 4096));
		a0.llmem = ((Llchunk30280*) (LOC7));
		nimln(138, "alloc.nim");
		inccurrmem_30402_1689653243(a0, ((NI) 4096));
		nimln(139, "alloc.nim");
		(*a0.llmem).size = (NI)(((NI) 4096) - ((NI)sizeof(Llchunk30280)));
		nimln(140, "alloc.nim");
		(*a0.llmem).acc = ((NI)sizeof(Llchunk30280));
		nimln(141, "alloc.nim");
		(*a0.llmem).next = old0;
}	}
	LA5: ;
	nimln(142, "alloc.nim");
	result0 = ((void*) ((NI)(((NI) (a0.llmem)) + (*a0.llmem).acc)));
	nimln(143, "alloc.nim");
	(*a0.llmem).size -= size0;
	nimln(144, "alloc.nim");
	(*a0.llmem).acc += size0;
	nimln(145, "alloc.nim");
	zeroMem(result0, ((NI) (size0)));
	popFrame();
	return result0;
}

N_NIMCALL(Trunk30210*, intsetput_31512_1689653243)(Memregion30286& a0, Intset30214& t0, NI key0) {
	Trunk30210* result0;
	nimfr("intSetPut", "alloc.nim")
	result0 = (Trunk30210*)0;
	nimln(184, "alloc.nim");
	result0 = intsetget_31490_1689653243((&t0), key0);
	nimln(185, "alloc.nim");
	{
		void* LOC5;
		if (!(result0 == NIM_NIL)) goto LA3;
{		nimln(186, "alloc.nim");
		LOC5 = (void*)0;
		LOC5 = llalloc_30443_1689653243(a0, ((NI)sizeof(Trunk30210)));
		result0 = ((Trunk30210*) (LOC5));
		nimln(187, "alloc.nim");
		(*result0).next = t0.data[((NI)(key0 & ((NI) 255)))- 0];
		nimln(188, "alloc.nim");
		t0.data[((NI)(key0 & ((NI) 255)))- 0] = result0;
		nimln(189, "alloc.nim");
		(*result0).key = key0;
}	}
	LA3: ;
	popFrame();
	return result0;
}

N_NIMCALL(void, incl_31561_1689653243)(Memregion30286& a0, Intset30214& s0, NI key0) {
	nimfr("incl", "alloc.nim")
	nimln(200, "alloc.nim");
	Trunk30210* t0 = intsetput_31512_1689653243(a0, s0, (NI)((NU64)(key0) >> (NU64)(((NI) 9))));
	nimln(201, "alloc.nim");
	NI u0 = (NI)(key0 & ((NI) 511));
	nimln(202, "alloc.nim");
	(*t0).bits[((NI)((NU64)(((NI) (u0))) >> (NU64)(((NI) 6))))- 0] = (NI)((*t0).bits[((NI)((NU64)(((NI) (u0))) >> (NU64)(((NI) 6))))- 0] | (NI)((NU64)(((NI) 1)) << (NU64)(((NI) ((NI)(((NI) (u0)) & ((NI) 63)))))));
	popFrame();
}

static N_INLINE(NI, pageindex_31971_1689653243)(Basechunk30238* c0) {
	NI result0;
	nimfr("pageIndex", "alloc.nim")
	result0 = (NI)0;
	nimln(264, "alloc.nim");
	result0 = (NI)((NU64)(((NI) (c0))) >> (NU64)(((NI) 12)));
	popFrame();
	return result0;
}

static N_INLINE(void, listadd_35025_1689653243)(Bigchunk30242*& head0, Bigchunk30242* c0) {
	nimfr("listAdd", "alloc.nim")
	nimln(337, "alloc.nim");
	(*c0).next = head0;
	nimln(338, "alloc.nim");
	{
		nimln(343, "system.nim");
		if (!!((head0 == NIM_NIL))) goto LA3;
{		nimln(340, "alloc.nim");
		(*head0).prev = c0;
}	}
	LA3: ;
	nimln(341, "alloc.nim");
	head0 = c0;
	popFrame();
}

N_NIMCALL(void, splitchunk_35810_1689653243)(Memregion30286& a0, Bigchunk30242* c0, NI size0) {
	nimfr("splitChunk", "alloc.nim")
	nimln(397, "alloc.nim");
	Bigchunk30242* rest0 = ((Bigchunk30242*) ((NI)((NU64)(((NI) (c0))) + (NU64)(size0))));
	nimln(399, "alloc.nim");
	(*rest0).size = (NI)((*c0).size - size0);
	nimln(400, "alloc.nim");
	(*rest0).used = NIM_FALSE;
	nimln(401, "alloc.nim");
	(*rest0).next = NIM_NIL;
	nimln(402, "alloc.nim");
	(*rest0).prev = NIM_NIL;
	nimln(403, "alloc.nim");
	(*rest0).prevsize = size0;
	nimln(404, "alloc.nim");
	updateprevsize_32869_1689653243(a0, c0, (*rest0).size);
	nimln(405, "alloc.nim");
	(*c0).size = size0;
	nimln(406, "alloc.nim");
	incl_31561_1689653243(a0, a0.chunkstarts, pageindex_31971_1689653243(rest0));
	nimln(407, "alloc.nim");
	listadd_35025_1689653243(a0.freechunkslist, rest0);
	popFrame();
}

N_NIMCALL(Bigchunk30242*, requestoschunks_31988_1689653243)(Memregion30286& a0, NI size0) {
	Bigchunk30242* result0;
	void* LOC1;
	NI LOC6;
	nimfr("requestOsChunks", "alloc.nim")
	result0 = (Bigchunk30242*)0;
	nimln(274, "alloc.nim");
	inccurrmem_30402_1689653243(a0, size0);
	nimln(275, "alloc.nim");
	a0.freemem += size0;
	nimln(276, "alloc.nim");
	LOC1 = (void*)0;
	LOC1 = osallocpages_30014_1689653243(size0);
	result0 = ((Bigchunk30242*) (LOC1));
	nimln(279, "alloc.nim");
	(*result0).next = NIM_NIL;
	nimln(280, "alloc.nim");
	(*result0).prev = NIM_NIL;
	nimln(281, "alloc.nim");
	(*result0).used = NIM_FALSE;
	nimln(282, "alloc.nim");
	(*result0).size = size0;
	nimln(284, "alloc.nim");
	NI nxt0 = (NI)((NU64)(((NI) (result0))) + (NU64)(size0));
	nimln(286, "alloc.nim");
	Basechunk30238* next0 = ((Basechunk30238*) (nxt0));
	nimln(287, "alloc.nim");
	{
		nimln(1095, "system.nim");
		nimln(287, "alloc.nim");
		if (!contains_31540_1689653243((&a0.chunkstarts), pageindex_31971_1689653243(next0))) goto LA4;
{		nimln(289, "alloc.nim");
		(*next0).prevsize = size0;
}	}
	LA4: ;
	nimln(291, "alloc.nim");
	LOC6 = (NI)0;
	{
		nimln(343, "system.nim");
		if (!!((a0.lastsize == ((NI) 0)))) goto LA9;
{		LOC6 = a0.lastsize;
}	}
	goto LA7;
	LA9: ;
	{
		LOC6 = ((NI) 4096);
	}
	LA7: ;
	NI lastsize0 = LOC6;
	nimln(292, "alloc.nim");
	NI prv0 = (NI)((NU64)(((NI) (result0))) - (NU64)(lastsize0));
	nimln(294, "alloc.nim");
	Basechunk30238* prev0 = ((Basechunk30238*) (prv0));
	nimln(295, "alloc.nim");
	{
		NIM_BOOL LOC14;
		LOC14 = (NIM_BOOL)0;
		nimln(1095, "system.nim");
		nimln(295, "alloc.nim");
		LOC14 = contains_31540_1689653243((&a0.chunkstarts), pageindex_31971_1689653243(prev0));
		if (!(LOC14)) goto LA15;
		LOC14 = ((*prev0).size == lastsize0);
		LA15: ;
		if (!LOC14) goto LA16;
{		nimln(297, "alloc.nim");
		(*result0).prevsize = lastsize0;
}	}
	goto LA12;
	LA16: ;
	{
		nimln(299, "alloc.nim");
		(*result0).prevsize = ((NI) 0);
	}
	LA12: ;
	nimln(300, "alloc.nim");
	a0.lastsize = size0;
	popFrame();
	return result0;
}

N_NIMCALL(Bigchunk30242*, getbigchunk_36016_1689653243)(Memregion30286& a0, NI size0) {
	Bigchunk30242* result0;
	nimfr("getBigChunk", "alloc.nim")
	result0 = (Bigchunk30242*)0;
	nimln(413, "alloc.nim");
	result0 = a0.freechunkslist;
	{
		{
			nimln(415, "alloc.nim");
			while (1) {
				nimln(343, "system.nim");
				if (!!((result0 == NIM_NIL))) goto LA3;
				nimln(417, "alloc.nim");
				{
					if (!((*result0).size == size0)) goto LA6;
{					nimln(418, "alloc.nim");
					listremove_33802_1689653243(a0.freechunkslist, result0);
					nimln(419, "alloc.nim");
					goto LA1;
}				}
				goto LA4;
				LA6: ;
				{
					nimln(351, "system.nim");
					if (!(size0 < (*result0).size)) goto LA9;
{					nimln(421, "alloc.nim");
					listremove_33802_1689653243(a0.freechunkslist, result0);
					nimln(422, "alloc.nim");
					splitchunk_35810_1689653243(a0, result0, size0);
					nimln(423, "alloc.nim");
					goto LA1;
}				}
				goto LA4;
				LA9: ;
				LA4: ;
				nimln(424, "alloc.nim");
				result0 = (*result0).next;
			} LA3: ;
		}
		nimln(426, "alloc.nim");
		{
			if (!(size0 < ((NI) 524288))) goto LA13;
{			nimln(427, "alloc.nim");
			result0 = requestoschunks_31988_1689653243(a0, ((NI) 524288));
			nimln(428, "alloc.nim");
			splitchunk_35810_1689653243(a0, result0, size0);
}		}
		goto LA11;
		LA13: ;
		{
			nimln(430, "alloc.nim");
			result0 = requestoschunks_31988_1689653243(a0, size0);
		}
		LA11: ;
	} LA1: ;
	nimln(431, "alloc.nim");
	(*result0).prevsize = ((NI) 0);
	nimln(432, "alloc.nim");
	(*result0).used = NIM_TRUE;
	nimln(433, "alloc.nim");
	incl_31561_1689653243(a0, a0.chunkstarts, pageindex_31971_1689653243(result0));
	nimln(434, "alloc.nim");
	a0.freemem -= size0;
	popFrame();
	return result0;
}

N_NIMCALL(Smallchunk30240*, getsmallchunk_36816_1689653243)(Memregion30286& a0) {
	Smallchunk30240* result0;
	nimfr("getSmallChunk", "alloc.nim")
	result0 = (Smallchunk30240*)0;
	nimln(437, "alloc.nim");
	Bigchunk30242* res0 = getbigchunk_36016_1689653243(a0, ((NI) 4096));
	nimln(440, "alloc.nim");
	result0 = ((Smallchunk30240*) (res0));
	popFrame();
	return result0;
}

static N_INLINE(void, listadd_38416_1689653243)(Smallchunk30240*& head0, Smallchunk30240* c0) {
	nimfr("listAdd", "alloc.nim")
	nimln(337, "alloc.nim");
	(*c0).next = head0;
	nimln(338, "alloc.nim");
	{
		nimln(343, "system.nim");
		if (!!((head0 == NIM_NIL))) goto LA3;
{		nimln(340, "alloc.nim");
		(*head0).prev = c0;
}	}
	LA3: ;
	nimln(341, "alloc.nim");
	head0 = c0;
	popFrame();
}

static N_INLINE(void, listremove_41202_1689653243)(Smallchunk30240*& head0, Smallchunk30240* c0) {
	nimfr("listRemove", "alloc.nim")
	nimln(345, "alloc.nim");
	{
		if (!(c0 == head0)) goto LA3;
{		nimln(346, "alloc.nim");
		head0 = (*c0).next;
		nimln(348, "alloc.nim");
		{
			nimln(343, "system.nim");
			if (!!((head0 == NIM_NIL))) goto LA7;
{			nimln(348, "alloc.nim");
			(*head0).prev = NIM_NIL;
}		}
		LA7: ;
}	}
	goto LA1;
	LA3: ;
	{
		nimln(351, "alloc.nim");
		(*(*c0).prev).next = (*c0).next;
		nimln(352, "alloc.nim");
		{
			nimln(343, "system.nim");
			if (!!(((*c0).next == NIM_NIL))) goto LA12;
{			nimln(352, "alloc.nim");
			(*(*c0).next).prev = (*c0).prev;
}		}
		LA12: ;
	}
	LA1: ;
	nimln(353, "alloc.nim");
	(*c0).next = NIM_NIL;
	nimln(354, "alloc.nim");
	(*c0).prev = NIM_NIL;
	popFrame();
}

N_NIMCALL(Avlnode30284*, allocavlnode_30628_1689653243)(Memregion30286& a0, NI key0, NI upperbound0) {
	Avlnode30284* result0;
	nimfr("allocAvlNode", "alloc.nim")
	result0 = (Avlnode30284*)0;
	nimln(148, "alloc.nim");
	{
		nimln(343, "system.nim");
		if (!!((a0.freeavlnodes == NIM_NIL))) goto LA3;
{		nimln(149, "alloc.nim");
		result0 = a0.freeavlnodes;
		nimln(150, "alloc.nim");
		a0.freeavlnodes = (*a0.freeavlnodes).link[(((NI) 0))- 0];
}	}
	goto LA1;
	LA3: ;
	{
		void* LOC6;
		nimln(152, "alloc.nim");
		LOC6 = (void*)0;
		LOC6 = llalloc_30443_1689653243(a0, ((NI)sizeof(Avlnode30284)));
		result0 = ((Avlnode30284*) (LOC6));
	}
	LA1: ;
	nimln(153, "alloc.nim");
	(*result0).key = key0;
	nimln(154, "alloc.nim");
	(*result0).upperbound = upperbound0;
	nimln(155, "alloc.nim");
	(*result0).link[(((NI) 0))- 0] = bottom_30321_1689653243;
	nimln(156, "alloc.nim");
	(*result0).link[(((NI) 1))- 0] = bottom_30321_1689653243;
	nimln(157, "alloc.nim");
	(*result0).level = ((NI) 1);
	popFrame();
	return result0;
}

N_NIMCALL(void, skew_31334_1689653243)(Avlnode30284*& t0) {
	nimfr("skew", "avltree.nim")
	nimln(40, "avltree.nim");
	{
		if (!((*(*t0).link[(((NI) 0))- 0]).level == (*t0).level)) goto LA3;
{		nimln(41, "avltree.nim");
		Avlnode30284* temp0 = t0;
		nimln(42, "avltree.nim");
		t0 = (*t0).link[(((NI) 0))- 0];
		nimln(43, "avltree.nim");
		(*temp0).link[(((NI) 0))- 0] = (*t0).link[(((NI) 1))- 0];
		nimln(44, "avltree.nim");
		(*t0).link[(((NI) 1))- 0] = temp0;
}	}
	LA3: ;
	popFrame();
}

N_NIMCALL(void, split_31339_1689653243)(Avlnode30284*& t0) {
	nimfr("split", "avltree.nim")
	nimln(47, "avltree.nim");
	{
		if (!((*(*(*t0).link[(((NI) 1))- 0]).link[(((NI) 1))- 0]).level == (*t0).level)) goto LA3;
{		nimln(48, "avltree.nim");
		Avlnode30284* temp0 = t0;
		nimln(49, "avltree.nim");
		t0 = (*t0).link[(((NI) 1))- 0];
		nimln(50, "avltree.nim");
		(*temp0).link[(((NI) 1))- 0] = (*t0).link[(((NI) 0))- 0];
		nimln(51, "avltree.nim");
		(*t0).link[(((NI) 0))- 0] = temp0;
		nimln(52, "avltree.nim");
		(*t0).level += ((NI) 1);
}	}
	LA3: ;
	popFrame();
}

N_NIMCALL(void, add_31353_1689653243)(Memregion30286& a0, Avlnode30284*& t0, NI key0, NI upperbound0) {
	nimfr("add", "avltree.nim")
	nimln(55, "avltree.nim");
	{
		if (!(t0 == bottom_30321_1689653243)) goto LA3;
{		nimln(56, "avltree.nim");
		t0 = allocavlnode_30628_1689653243(a0, key0, upperbound0);
}	}
	goto LA1;
	LA3: ;
	{
		nimln(58, "avltree.nim");
		{
			if (!((NU64)(key0) < (NU64)((*t0).key))) goto LA8;
{			nimln(59, "avltree.nim");
			add_31353_1689653243(a0, (*t0).link[(((NI) 0))- 0], key0, upperbound0);
}		}
		goto LA6;
		LA8: ;
		{
			nimln(1745, "system.nim");
			if (!((NU64)((*t0).key) < (NU64)(key0))) goto LA11;
{			nimln(61, "avltree.nim");
			add_31353_1689653243(a0, (*t0).link[(((NI) 1))- 0], key0, upperbound0);
}		}
		goto LA6;
		LA11: ;
		{
		}
		LA6: ;
		nimln(64, "avltree.nim");
		skew_31334_1689653243(t0);
		nimln(65, "avltree.nim");
		split_31339_1689653243(t0);
	}
	LA1: ;
	popFrame();
}

N_NIMCALL(void*, rawalloc_37404_1689653243)(Memregion30286& a0, NI requestedsize0) {
	void* result0;
	nimfr("rawAlloc", "alloc.nim")
	result0 = (void*)0;
	nimln(473, "alloc.nim");
	NI size0 = roundup_28801_1689653243(requestedsize0, ((NI) 8));
	nimln(476, "alloc.nim");
	{
		nimln(67, "alloc.nim");
		if (!(size0 <= (NI)(((NI) 4096) - (NI)(((NI)sizeof(Smallchunk30240)) - ((NI) 8))))) goto LA3;
{		nimln(478, "alloc.nim");
		NI s0 = (NI)(size0 / ((NI) 8));
		nimln(479, "alloc.nim");
		Smallchunk30240* c0 = a0.freesmallchunks[(s0)- 0];
		nimln(480, "alloc.nim");
		{
			if (!(c0 == NIM_NIL)) goto LA7;
{			nimln(481, "alloc.nim");
			c0 = getsmallchunk_36816_1689653243(a0);
			nimln(482, "alloc.nim");
			(*c0).freelist = NIM_NIL;
			nimln(484, "alloc.nim");
			(*c0).size = size0;
			nimln(485, "alloc.nim");
			(*c0).acc = size0;
			nimln(486, "alloc.nim");
			nimln(67, "alloc.nim");
			(*c0).free = (NI)((NI)(((NI) 4096) - (NI)(((NI)sizeof(Smallchunk30240)) - ((NI) 8))) - size0);
			nimln(487, "alloc.nim");
			(*c0).next = NIM_NIL;
			nimln(488, "alloc.nim");
			(*c0).prev = NIM_NIL;
			nimln(489, "alloc.nim");
			listadd_38416_1689653243(a0.freesmallchunks[(s0)- 0], c0);
			nimln(490, "alloc.nim");
			result0 = ((void*) ((&(*c0).data)));
}		}
		goto LA5;
		LA7: ;
		{
			nimln(498, "alloc.nim");
			{
				if (!((*c0).freelist == NIM_NIL)) goto LA12;
{				nimln(501, "alloc.nim");
				result0 = ((void*) ((NI)((NU64)(((NI) ((&(*c0).data)))) + (NU64)((*c0).acc))));
				nimln(502, "alloc.nim");
				(*c0).acc += size0;
}			}
			goto LA10;
			LA12: ;
			{
				nimln(504, "alloc.nim");
				result0 = ((void*) ((*c0).freelist));
				nimln(506, "alloc.nim");
				(*c0).freelist = (*(*c0).freelist).next;
			}
			LA10: ;
			nimln(507, "alloc.nim");
			(*c0).free -= size0;
		}
		LA5: ;
		nimln(511, "alloc.nim");
		{
			if (!((*c0).free < size0)) goto LA17;
{			nimln(513, "alloc.nim");
			listremove_41202_1689653243(a0.freesmallchunks[(s0)- 0], c0);
}		}
		LA17: ;
}	}
	goto LA1;
	LA3: ;
	{
		nimln(519, "alloc.nim");
		nimln(68, "alloc.nim");
		size0 = roundup_28801_1689653243((NI)(requestedsize0 + (NI)(((NI)sizeof(Bigchunk30242)) - ((NI) 8))), ((NI) 4096));
		nimln(521, "alloc.nim");
		Bigchunk30242* c0 = getbigchunk_36016_1689653243(a0, size0);
		nimln(525, "alloc.nim");
		result0 = ((void*) ((&(*c0).data)));
		nimln(527, "alloc.nim");
		{
			if (!(a0.root == NIM_NIL)) goto LA22;
{			a0.root = bottom_30321_1689653243;
}		}
		LA22: ;
		nimln(528, "alloc.nim");
		add_31353_1689653243(a0, a0.root, ((NI) (result0)), (NI)((NU64)(((NI) (result0))) + (NU64)(size0)));
	}
	LA1: ;
	popFrame();
	return result0;
}

N_NIMCALL(void*, alloc_46640_1689653243)(Memregion30286& allocator0, NI size0) {
	void* result0;
	nimfr("alloc", "alloc.nim")
	result0 = (void*)0;
	nimln(644, "alloc.nim");
	result0 = rawalloc_37404_1689653243(allocator0, (NI)(((NI) (size0)) + ((NI)sizeof(Freecell30230))));
	nimln(645, "alloc.nim");
	(*((Freecell30230*) (result0))).zerofield = ((NI) 1);
	nimln(647, "alloc.nim");
	result0 = ((void*) ((NI)((NU64)(((NI) (result0))) + (NU64)(((NI)sizeof(Freecell30230))))));
	popFrame();
	return result0;
}

N_NOCONV(void*, alloc_7401_1689653243)(NI size0) {
	void* result0;
	nimfr("alloc", "alloc.nim")
	result0 = (void*)0;
	nimln(707, "alloc.nim");
	result0 = alloc_46640_1689653243(gch_50658_1689653243.region, size0);
	popFrame();
	return result0;
}

N_NIMCALL(void, excl_31574_1689653243)(Intset30214& s0, NI key0) {
	nimfr("excl", "alloc.nim")
	nimln(205, "alloc.nim");
	Trunk30210* t0 = intsetget_31490_1689653243((&s0), (NI)((NU64)(key0) >> (NU64)(((NI) 9))));
	nimln(206, "alloc.nim");
	{
		nimln(343, "system.nim");
		if (!!((t0 == NIM_NIL))) goto LA3;
{		nimln(207, "alloc.nim");
		NI u0 = (NI)(key0 & ((NI) 511));
		nimln(208, "alloc.nim");
		nimln(209, "alloc.nim");
		(*t0).bits[((NI)((NU64)(((NI) (u0))) >> (NU64)(((NI) 6))))- 0] = (NI)((*t0).bits[((NI)((NU64)(((NI) (u0))) >> (NU64)(((NI) 6))))- 0] & (NI)((NU64) ~((NI)((NU64)(((NI) 1)) << (NU64)(((NI) ((NI)(((NI) (u0)) & ((NI) 63)))))))));
}	}
	LA3: ;
	popFrame();
}

static N_INLINE(void, osdeallocpages_30025_1689653243)(void* p0, NI size0) {
	int LOC1;
	nimfr("osDeallocPages", "osalloc.nim")
	nimln(111, "osalloc.nim");
	LOC1 = (int)0;
	LOC1 = munmap(p0, size0);
	popFrame();
}

static N_INLINE(void, deccurrmem_30416_1689653243)(Memregion30286& a0, NI bytes0) {
	nimfr("decCurrMem", "alloc.nim")
	nimln(119, "alloc.nim");
	a0.maxmem = ((a0.maxmem >= a0.currmem) ? a0.maxmem : a0.currmem);
	nimln(120, "alloc.nim");
	a0.currmem -= bytes0;
	popFrame();
}

N_NIMCALL(void, freeoschunks_32607_1689653243)(Memregion30286& a0, void* p0, NI size0) {
	nimfr("freeOsChunks", "alloc.nim")
	nimln(304, "alloc.nim");
	Basechunk30238* c0 = ((Basechunk30238*) (p0));
	nimln(305, "alloc.nim");
	NI nxt0 = (NI)((NU64)(((NI) (p0))) + (NU64)((*c0).size));
	nimln(307, "alloc.nim");
	Basechunk30238* next0 = ((Basechunk30238*) (nxt0));
	nimln(308, "alloc.nim");
	{
		nimln(1095, "system.nim");
		nimln(308, "alloc.nim");
		if (!contains_31540_1689653243((&a0.chunkstarts), pageindex_31971_1689653243(next0))) goto LA3;
{		nimln(309, "alloc.nim");
		(*next0).prevsize = ((NI) 0);
}	}
	LA3: ;
	nimln(310, "alloc.nim");
	excl_31574_1689653243(a0.chunkstarts, pageindex_31976_1689653243(p0));
	nimln(311, "alloc.nim");
	osdeallocpages_30025_1689653243(p0, size0);
	nimln(312, "alloc.nim");
	deccurrmem_30416_1689653243(a0, size0);
	nimln(313, "alloc.nim");
	a0.freemem -= size0;
	popFrame();
}

N_NIMCALL(void, freebigchunk_33003_1689653243)(Memregion30286& a0, Bigchunk30242* c_33007_1689653243) {
	nimfr("freeBigChunk", "alloc.nim")
	nimln(364, "alloc.nim");
	Bigchunk30242* c0 = c_33007_1689653243;
	nimln(366, "alloc.nim");
	a0.freemem += (*c0).size;
	nimln(368, "alloc.nim");
	Basechunk30238* ri0 = ((Basechunk30238*) ((NI)((NU64)(((NI) (c0))) + (NU64)((*c0).size))));
	nimln(370, "alloc.nim");
	{
		NIM_BOOL LOC3;
		LOC3 = (NIM_BOOL)0;
		LOC3 = isaccessible_32816_1689653243((&a0), ((void*) (ri0)));
		if (!(LOC3)) goto LA4;
		LOC3 = chunkunused_31889_1689653243(ri0);
		LA4: ;
		if (!LOC3) goto LA5;
{		nimln(372, "alloc.nim");
		{
			NIM_BOOL LOC9;
			LOC9 = (NIM_BOOL)0;
			LOC9 = issmallchunk_31869_1689653243(ri0);
			if (!!(LOC9)) goto LA10;
{			nimln(373, "alloc.nim");
			listremove_33802_1689653243(a0.freechunkslist, ((Bigchunk30242*) (ri0)));
			nimln(374, "alloc.nim");
			(*c0).size += (*ri0).size;
			nimln(375, "alloc.nim");
			excl_31574_1689653243(a0.chunkstarts, pageindex_31971_1689653243(ri0));
}		}
		LA10: ;
}	}
	LA5: ;
	nimln(377, "alloc.nim");
	{
		nimln(343, "system.nim");
		if (!!(((*c0).prevsize == ((NI) 0)))) goto LA14;
{		nimln(378, "alloc.nim");
		Basechunk30238* le0 = ((Basechunk30238*) ((NI)((NU64)(((NI) (c0))) - (NU64)((*c0).prevsize))));
		nimln(380, "alloc.nim");
		{
			NIM_BOOL LOC18;
			LOC18 = (NIM_BOOL)0;
			LOC18 = isaccessible_32816_1689653243((&a0), ((void*) (le0)));
			if (!(LOC18)) goto LA19;
			LOC18 = chunkunused_31889_1689653243(le0);
			LA19: ;
			if (!LOC18) goto LA20;
{			nimln(382, "alloc.nim");
			{
				NIM_BOOL LOC24;
				LOC24 = (NIM_BOOL)0;
				LOC24 = issmallchunk_31869_1689653243(le0);
				if (!!(LOC24)) goto LA25;
{				nimln(383, "alloc.nim");
				listremove_33802_1689653243(a0.freechunkslist, ((Bigchunk30242*) (le0)));
				nimln(384, "alloc.nim");
				(*le0).size += (*c0).size;
				nimln(385, "alloc.nim");
				excl_31574_1689653243(a0.chunkstarts, pageindex_31971_1689653243(c0));
				nimln(386, "alloc.nim");
				c0 = ((Bigchunk30242*) (le0));
}			}
			LA25: ;
}		}
		LA20: ;
}	}
	LA14: ;
	nimln(388, "alloc.nim");
	{
		NIM_BOOL LOC29;
		NIM_BOOL LOC30;
		LOC29 = (NIM_BOOL)0;
		LOC30 = (NIM_BOOL)0;
		LOC30 = ((*c0).size < ((NI) 1048576));
		if (LOC30) goto LA31;
		LOC30 = NIM_FALSE;
		LA31: ;
		LOC29 = LOC30;
		if (LOC29) goto LA32;
		LOC29 = a0.locked;
		LA32: ;
		if (!LOC29) goto LA33;
{		nimln(389, "alloc.nim");
		incl_31561_1689653243(a0, a0.chunkstarts, pageindex_31971_1689653243(c0));
		nimln(390, "alloc.nim");
		updateprevsize_32869_1689653243(a0, c0, (*c0).size);
		nimln(391, "alloc.nim");
		listadd_35025_1689653243(a0.freechunkslist, c0);
		nimln(392, "alloc.nim");
		(*c0).used = NIM_FALSE;
}	}
	goto LA27;
	LA33: ;
	{
		nimln(394, "alloc.nim");
		freeoschunks_32607_1689653243(a0, ((void*) (c0)), (*c0).size);
	}
	LA27: ;
	popFrame();
}

static N_INLINE(void, deallocavlnode_31203_1689653243)(Memregion30286& a0, Avlnode30284* n0) {
	nimfr("deallocAvlNode", "alloc.nim")
	nimln(163, "alloc.nim");
	(*n0).link[(((NI) 0))- 0] = a0.freeavlnodes;
	nimln(164, "alloc.nim");
	a0.freeavlnodes = n0;
	popFrame();
}

N_NIMCALL(void, del_31403_1689653243)(Memregion30286& a0, Avlnode30284*& t0, NI x0) {
	nimfr("del", "avltree.nim")
{	nimln(68, "avltree.nim");
	{
		if (!(t0 == bottom_30321_1689653243)) goto LA3;
{		goto BeforeRet;
}	}
	LA3: ;
	nimln(69, "avltree.nim");
	a0.last = t0;
	nimln(70, "avltree.nim");
	{
		if (!((NU64)(x0) < (NU64)((*t0).key))) goto LA7;
{		nimln(71, "avltree.nim");
		del_31403_1689653243(a0, (*t0).link[(((NI) 0))- 0], x0);
}	}
	goto LA5;
	LA7: ;
	{
		nimln(73, "avltree.nim");
		a0.deleted = t0;
		nimln(74, "avltree.nim");
		del_31403_1689653243(a0, (*t0).link[(((NI) 1))- 0], x0);
	}
	LA5: ;
	nimln(75, "avltree.nim");
	{
		NIM_BOOL LOC12;
		NIM_BOOL LOC13;
		LOC12 = (NIM_BOOL)0;
		LOC13 = (NIM_BOOL)0;
		LOC13 = (t0 == a0.last);
		if (!(LOC13)) goto LA14;
		nimln(343, "system.nim");
		LOC13 = !((a0.deleted == bottom_30321_1689653243));
		LA14: ;
		LOC12 = LOC13;
		if (!(LOC12)) goto LA15;
		nimln(75, "avltree.nim");
		LOC12 = (x0 == (*a0.deleted).key);
		LA15: ;
		if (!LOC12) goto LA16;
{		nimln(76, "avltree.nim");
		(*a0.deleted).key = (*t0).key;
		nimln(77, "avltree.nim");
		(*a0.deleted).upperbound = (*t0).upperbound;
		nimln(78, "avltree.nim");
		a0.deleted = bottom_30321_1689653243;
		nimln(79, "avltree.nim");
		t0 = (*t0).link[(((NI) 1))- 0];
		nimln(80, "avltree.nim");
		deallocavlnode_31203_1689653243(a0, a0.last);
}	}
	goto LA10;
	LA16: ;
	{
		NIM_BOOL LOC19;
		nimln(81, "avltree.nim");
		LOC19 = (NIM_BOOL)0;
		LOC19 = ((*(*t0).link[(((NI) 0))- 0]).level < (NI)((*t0).level - ((NI) 1)));
		if (LOC19) goto LA20;
		nimln(82, "avltree.nim");
		LOC19 = ((*(*t0).link[(((NI) 1))- 0]).level < (NI)((*t0).level - ((NI) 1)));
		LA20: ;
		if (!LOC19) goto LA21;
{		nimln(83, "avltree.nim");
		(*t0).level -= ((NI) 1);
		nimln(84, "avltree.nim");
		{
			nimln(351, "system.nim");
			if (!((*t0).level < (*(*t0).link[(((NI) 1))- 0]).level)) goto LA25;
{			nimln(85, "avltree.nim");
			(*(*t0).link[(((NI) 1))- 0]).level = (*t0).level;
}		}
		LA25: ;
		nimln(86, "avltree.nim");
		skew_31334_1689653243(t0);
		nimln(87, "avltree.nim");
		skew_31334_1689653243((*t0).link[(((NI) 1))- 0]);
		nimln(88, "avltree.nim");
		skew_31334_1689653243((*(*t0).link[(((NI) 1))- 0]).link[(((NI) 1))- 0]);
		nimln(89, "avltree.nim");
		split_31339_1689653243(t0);
		nimln(90, "avltree.nim");
		split_31339_1689653243((*t0).link[(((NI) 1))- 0]);
}	}
	goto LA10;
	LA21: ;
	LA10: ;
	}BeforeRet: ;
	popFrame();
}

N_NIMCALL(void, rawdealloc_43818_1689653243)(Memregion30286& a0, void* p0) {
	nimfr("rawDealloc", "alloc.nim")
	nimln(540, "alloc.nim");
	Basechunk30238* c_44001_1689653243 = pageaddr_31981_1689653243(p0);
	nimln(541, "alloc.nim");
	{
		if (!issmallchunk_31869_1689653243(c_44001_1689653243)) goto LA3;
{		nimln(543, "alloc.nim");
		Smallchunk30240* c0 = ((Smallchunk30240*) (c_44001_1689653243));
		nimln(544, "alloc.nim");
		NI s0 = (*c0).size;
		nimln(547, "alloc.nim");
		Freecell30230* f0 = ((Freecell30230*) (p0));
		nimln(550, "alloc.nim");
		(*f0).zerofield = ((NI) 0);
		nimln(551, "alloc.nim");
		(*f0).next = (*c0).freelist;
		nimln(552, "alloc.nim");
		(*c0).freelist = f0;
		nimln(558, "alloc.nim");
		{
			if (!((*c0).free < s0)) goto LA7;
{			nimln(560, "alloc.nim");
			listadd_38416_1689653243(a0.freesmallchunks[((NI)(s0 / ((NI) 8)))- 0], c0);
			nimln(561, "alloc.nim");
			(*c0).free += s0;
}		}
		goto LA5;
		LA7: ;
		{
			nimln(563, "alloc.nim");
			(*c0).free += s0;
			nimln(564, "alloc.nim");
			{
				nimln(67, "alloc.nim");
				if (!((*c0).free == (NI)(((NI) 4096) - (NI)(((NI)sizeof(Smallchunk30240)) - ((NI) 8))))) goto LA12;
{				nimln(565, "alloc.nim");
				listremove_41202_1689653243(a0.freesmallchunks[((NI)(s0 / ((NI) 8)))- 0], c0);
				nimln(566, "alloc.nim");
				(*c0).size = ((NI) 4096);
				nimln(567, "alloc.nim");
				freebigchunk_33003_1689653243(a0, ((Bigchunk30242*) (c0)));
}			}
			LA12: ;
		}
		LA5: ;
}	}
	goto LA1;
	LA3: ;
	{
		nimln(574, "alloc.nim");
		Bigchunk30242* c0 = ((Bigchunk30242*) (c_44001_1689653243));
		nimln(575, "alloc.nim");
		a0.deleted = bottom_30321_1689653243;
		nimln(576, "alloc.nim");
		del_31403_1689653243(a0, a0.root, ((NI) ((&(*c0).data))));
		nimln(577, "alloc.nim");
		freebigchunk_33003_1689653243(a0, c0);
	}
	LA1: ;
	popFrame();
}

N_NIMCALL(void, dealloc_46823_1689653243)(Memregion30286& allocator0, void* p0) {
	nimfr("dealloc", "alloc.nim")
	nimln(655, "alloc.nim");
	void* x0 = ((void*) ((NI)((NU64)(((NI) (p0))) - (NU64)(((NI)sizeof(Freecell30230))))));
	nimln(659, "alloc.nim");
	rawdealloc_43818_1689653243(allocator0, x0);
	popFrame();
}

N_NOCONV(void, dealloc_7448_1689653243)(void* p0) {
	nimfr("dealloc", "alloc.nim")
	nimln(713, "alloc.nim");
	dealloc_46823_1689653243(gch_50658_1689653243.region, p0);
	popFrame();
}

static N_INLINE(void, add_48193_1689653243)(Cellseq48122& s0, Cell48106* c0) {
	nimfr("add", "cellsets.nim")
	nimln(53, "cellsets.nim");
	{
		void* LOC5;
		nimln(347, "system.nim");
		if (!(s0.cap <= s0.len)) goto LA3;
{		nimln(54, "cellsets.nim");
		s0.cap = (NI)((NI)(s0.cap * ((NI) 3)) / ((NI) 2));
		nimln(55, "cellsets.nim");
		LOC5 = (void*)0;
		LOC5 = alloc_7401_1689653243(((NI) ((NI)(s0.cap * ((NI) 8)))));
		Cell48106** d0 = ((Cell48106**) (LOC5));
		nimln(56, "cellsets.nim");
		memcpy(((void*) (d0)), ((void*) (s0.d)), ((NI) ((NI)(s0.len * ((NI) 8)))));
		nimln(57, "cellsets.nim");
		dealloc_7448_1689653243(((void*) (s0.d)));
		nimln(58, "cellsets.nim");
		s0.d = d0;
}	}
	LA3: ;
	nimln(60, "cellsets.nim");
	s0.d[(s0.len)- 0] = c0;
	nimln(61, "cellsets.nim");
	s0.len += ((NI) 1);
	popFrame();
}

static N_INLINE(void, gcmark_70813_1689653243)(Gcheap50618& gch0, void* p0) {
	Cell48106* cell0 = usrtocell_52241_1689653243(p0);
	NI c0 = ((NI) (cell0));
	{
		void* LOC5;
		if (!((NU64)(((NI) 4096)) < (NU64)(c0))) goto LA3;
{		LOC5 = (void*)0;
		LOC5 = interiorallocatedptr_45492_1689653243((&gch0.region), ((void*) (cell0)));
		Cell48106* objstart0 = ((Cell48106*) (LOC5));
		{
			if (!!((objstart0 == NIM_NIL))) goto LA8;
{			(*objstart0).refcount = (NI)((NU64)((*objstart0).refcount) + (NU64)(((NI) 8)));
			add_48193_1689653243(gch0.decstack, objstart0);
}		}
		LA8: ;
}	}
	LA3: ;
}

N_CDECL(void, markstackandregisters_73237_1689653243)(Gcheap50618& gch0) {
	jmp_buf registers0;
	{
		int LOC3;
		LOC3 = (int)0;
		LOC3 = setjmp(registers0);
		if (!(LOC3 == ((NI32) 0))) goto LA4;
{		NI max0 = ((NI) (gch0.stackbottom));
		NI sp0 = ((NI) ((&registers0)));
		NI regend0 = (NI)((NU64)(sp0) + (NU64)(((NI)sizeof(jmp_buf))));
		{
			while (1) {
				if (!((NU64)(sp0) < (NU64)(regend0))) goto LA7;
				gcmark_70813_1689653243(gch0, (*((void**) (sp0))));
				gcmark_70813_1689653243(gch0, (*((void**) ((NI)((NU64)(sp0) + (NU64)(((NI) 4)))))));
				sp0 = (NI)((NU64)(sp0) + (NU64)(((NI) 8)));
			} LA7: ;
		}
		sp0 = (NI)(sp0 & ((NI) -8));
		{
			while (1) {
				if (!((NU64)(sp0) < (NU64)((NI)(max0 - ((NI) 64))))) goto LA9;
				gcmark_70813_1689653243(gch0, ((void**) (sp0))[(((NI) 0))- 0]);
				gcmark_70813_1689653243(gch0, ((void**) (sp0))[(((NI) 1))- 0]);
				gcmark_70813_1689653243(gch0, ((void**) (sp0))[(((NI) 2))- 0]);
				gcmark_70813_1689653243(gch0, ((void**) (sp0))[(((NI) 3))- 0]);
				gcmark_70813_1689653243(gch0, ((void**) (sp0))[(((NI) 4))- 0]);
				gcmark_70813_1689653243(gch0, ((void**) (sp0))[(((NI) 5))- 0]);
				gcmark_70813_1689653243(gch0, ((void**) (sp0))[(((NI) 6))- 0]);
				gcmark_70813_1689653243(gch0, ((void**) (sp0))[(((NI) 7))- 0]);
				sp0 = (NI)((NU64)(sp0) + (NU64)(((NI) 64)));
			} LA9: ;
		}
		{
			while (1) {
				if (!((NU64)(sp0) <= (NU64)(max0))) goto LA11;
				gcmark_70813_1689653243(gch0, (*((void**) (sp0))));
				sp0 = (NI)((NU64)(sp0) + (NU64)(((NI) 8)));
			} LA11: ;
		}
}	}
	LA4: ;
}

static N_INLINE(void*, celltousr_52223_1689653243)(Cell48106* cell0) {
	void* result0;
	nimfr("cellToUsr", "gc.nim")
	result0 = (void*)0;
	nimln(127, "gc.nim");
	result0 = ((void*) ((NI)((NU64)(((NI) (cell0))) + (NU64)(((NI)sizeof(Cell48106))))));
	popFrame();
	return result0;
}

N_NIMCALL(void, preparedealloc_52808_1689653243)(Cell48106* cell0) {
	nimfr("prepareDealloc", "gc.nim")
	nimln(184, "gc.nim");
	{
		nimln(343, "system.nim");
		if (!!(((*(*cell0).typ).finalizer == NIM_NIL))) goto LA3;
{		nimln(190, "gc.nim");
		gch_50658_1689653243.recgclock += ((NI) 1);
		nimln(191, "gc.nim");
		((Finalizer) ((*(*cell0).typ).finalizer))(celltousr_52223_1689653243(cell0));
		nimln(192, "gc.nim");
		gch_50658_1689653243.recgclock -= ((NI) 1);
}	}
	LA3: ;
	popFrame();
}

N_NIMCALL(NI, getdiscriminant_27604_1689653243)(void* aa0, TNimNode* n0) {
	NI result0;
	NI d0;
	nimfr("getDiscriminant", "system.nim")
{	result0 = (NI)0;
	d0 = (NI)0;
	nimln(2943, "system.nim");
	NI a0 = ((NI) (aa0));
	nimln(2944, "system.nim");
	switch ((*(*n0).typ).size) {
	case ((NI) 1):
	{
		nimln(2945, "system.nim");
		d0 = ((NI)(NU)(NU8)((*((NI8*) ((NI)((NU64)(a0) + (NU64)((*n0).offset)))))));
	}
	break;
	case ((NI) 2):
	{
		nimln(2946, "system.nim");
		d0 = ((NI)(NU)(NU16)((*((NI16*) ((NI)((NU64)(a0) + (NU64)((*n0).offset)))))));
	}
	break;
	case ((NI) 4):
	{
		nimln(2947, "system.nim");
		d0 = ((NI) ((*((NI32*) ((NI)((NU64)(a0) + (NU64)((*n0).offset)))))));
	}
	break;
	default:
	{
	}
	break;
	}
	nimln(2949, "system.nim");
	result0 = d0;
	goto BeforeRet;
	}BeforeRet: ;
	popFrame();
	return result0;
}

N_NIMCALL(TNimNode*, selectbranch_28007_1689653243)(void* aa0, TNimNode* n0) {
	TNimNode* result0;
	nimfr("selectBranch", "system.nim")
	result0 = (TNimNode*)0;
	nimln(2952, "system.nim");
	NI discr0 = getdiscriminant_27604_1689653243(aa0, n0);
	nimln(2953, "system.nim");
	{
		if (!((NU64)(discr0) < (NU64)((*n0).len))) goto LA3;
{		nimln(2954, "system.nim");
		result0 = (*n0).sons[(discr0)- 0];
		nimln(2955, "system.nim");
		{
			if (!(result0 == NIM_NIL)) goto LA7;
{			result0 = (*n0).sons[((*n0).len)- 0];
}		}
		LA7: ;
}	}
	goto LA1;
	LA3: ;
	{
		nimln(2958, "system.nim");
		result0 = (*n0).sons[((*n0).len)- 0];
	}
	LA1: ;
	popFrame();
	return result0;
}

N_NIMCALL(void, forallslotsaux_56634_1689653243)(void* dest0, TNimNode* n0, Walkop50610 op0) {
	NI d0 = ((NI) (dest0));
	switch ((*n0).kind) {
	case ((Tnimnodekind3205) 1):
	{
		forallchildrenaux_52622_1689653243(((void*) ((NI)((NU64)(d0) + (NU64)((*n0).offset)))), (*n0).typ, op0);
	}
	break;
	case ((Tnimnodekind3205) 2):
	{
		{
			NI i_56659_1689653243;
			NI HEX3Atmp_56806_1689653243;
			i_56659_1689653243 = (NI)0;
			HEX3Atmp_56806_1689653243 = (NI)0;
			HEX3Atmp_56806_1689653243 = (NI)((*n0).len - ((NI) 1));
			NI res_56809_1689653243 = ((NI) 0);
			{
				while (1) {
					if (!(res_56809_1689653243 <= HEX3Atmp_56806_1689653243)) goto LA5;
					i_56659_1689653243 = res_56809_1689653243;
					{
						if (!((*(*n0).sons[(i_56659_1689653243)- 0]).kind == ((Tnimnodekind3205) 1))) goto LA8;
{						{
							if (!((289406976 &((NU64)1<<((NU)((*(*(*n0).sons[(i_56659_1689653243)- 0]).typ).kind)&63U)))!=0)) goto LA12;
{							dooperation_52618_1689653243((*((void**) ((NI)((NU64)(d0) + (NU64)((*(*n0).sons[(i_56659_1689653243)- 0]).offset))))), op0);
}						}
						goto LA10;
						LA12: ;
						{
							forallchildrenaux_52622_1689653243(((void*) ((NI)((NU64)(d0) + (NU64)((*(*n0).sons[(i_56659_1689653243)- 0]).offset)))), (*(*n0).sons[(i_56659_1689653243)- 0]).typ, op0);
						}
						LA10: ;
}					}
					goto LA6;
					LA8: ;
					{
						forallslotsaux_56634_1689653243(dest0, (*n0).sons[(i_56659_1689653243)- 0], op0);
					}
					LA6: ;
					res_56809_1689653243 += ((NI) 1);
				} LA5: ;
			}
		}
	}
	break;
	case ((Tnimnodekind3205) 3):
	{
		TNimNode* m0 = selectbranch_28007_1689653243(dest0, n0);
		{
			if (!!((m0 == NIM_NIL))) goto LA19;
{			forallslotsaux_56634_1689653243(dest0, m0, op0);
}		}
		LA19: ;
	}
	break;
	case ((Tnimnodekind3205) 0):
	{
	}
	break;
	}
}

N_NIMCALL(void, forallchildrenaux_52622_1689653243)(void* dest0, TNimType* mt0, Walkop50610 op0) {
{	NI d0 = ((NI) (dest0));
	{
		if (!(dest0 == NIM_NIL)) goto LA3;
{		goto BeforeRet;
}	}
	LA3: ;
	{
		if (!!((((*mt0).flags &(1U<<((NU)(((Tnimtypeflag3209) 0))&7U)))!=0))) goto LA7;
{		switch ((*mt0).kind) {
		case ((Tnimkind3203) 22):
		case ((Tnimkind3203) 28):
		case ((Tnimkind3203) 24):
		{
			dooperation_52618_1689653243((*((void**) (d0))), op0);
		}
		break;
		case ((Tnimkind3203) 17):
		case ((Tnimkind3203) 18):
		{
			forallslotsaux_56634_1689653243(dest0, (*mt0).node, op0);
		}
		break;
		case ((Tnimkind3203) 16):
		case ((Tnimkind3203) 4):
		case ((Tnimkind3203) 27):
		{
			{
				NI i_56838_1689653243;
				NI HEX3Atmp_56861_1689653243;
				i_56838_1689653243 = (NI)0;
				HEX3Atmp_56861_1689653243 = (NI)0;
				HEX3Atmp_56861_1689653243 = (NI)((NI)((*mt0).size / (*(*mt0).base).size) - ((NI) 1));
				NI res_56864_1689653243 = ((NI) 0);
				{
					while (1) {
						if (!(res_56864_1689653243 <= HEX3Atmp_56861_1689653243)) goto LA14;
						i_56838_1689653243 = res_56864_1689653243;
						forallchildrenaux_52622_1689653243(((void*) ((NI)((NU64)(d0) + (NU64)((NI)((NU64)(i_56838_1689653243) * (NU64)((*(*mt0).base).size)))))), (*mt0).base, op0);
						res_56864_1689653243 += ((NI) 1);
					} LA14: ;
				}
			}
		}
		break;
		default:
		{
		}
		break;
		}
}	}
	LA7: ;
	}BeforeRet: ;
}

N_NIMCALL(void, forallchildren_52614_1689653243)(Cell48106* cell0, Walkop50610 op0) {
	TY3289 marker0 = (*(*cell0).typ).marker;
	{
		if (!!((marker0 == NIM_NIL))) goto LA3;
{		marker0(celltousr_52223_1689653243(cell0), ((NI) (op0)));
}	}
	goto LA1;
	LA3: ;
	{
		switch ((*(*cell0).typ).kind) {
		case ((Tnimkind3203) 22):
		{
			forallchildrenaux_52622_1689653243(celltousr_52223_1689653243(cell0), (*(*cell0).typ).base, op0);
		}
		break;
		case ((Tnimkind3203) 24):
		{
			void* LOC8;
			LOC8 = (void*)0;
			LOC8 = celltousr_52223_1689653243(cell0);
			NI d0 = ((NI) (LOC8));
			TGenericSeq* s0 = ((TGenericSeq*) (d0));
			{
				if (!!((s0 == NIM_NIL))) goto LA11;
{				{
					NI i_57634_1689653243;
					NI HEX3Atmp_57667_1689653243;
					i_57634_1689653243 = (NI)0;
					HEX3Atmp_57667_1689653243 = (NI)0;
					HEX3Atmp_57667_1689653243 = (NI)((*s0).len - ((NI) 1));
					NI res_57670_1689653243 = ((NI) 0);
					{
						while (1) {
							if (!(res_57670_1689653243 <= HEX3Atmp_57667_1689653243)) goto LA15;
							i_57634_1689653243 = res_57670_1689653243;
							forallchildrenaux_52622_1689653243(((void*) ((NI)((NU64)((NI)((NU64)(d0) + (NU64)((NI)((NU64)(i_57634_1689653243) * (NU64)((*(*(*cell0).typ).base).size))))) + (NU64)(((NI) 16))))), (*(*cell0).typ).base, op0);
							res_57670_1689653243 += ((NI) 1);
						} LA15: ;
					}
				}
}			}
			LA11: ;
		}
		break;
		default:
		{
		}
		break;
		}
	}
	LA1: ;
}

N_NIMCALL(NIM_BOOL, collectzct_70207_1689653243)(Gcheap50618& gch0) {
	NIM_BOOL result0;
	result0 = (NIM_BOOL)0;
	NI* L0 = (&gch0.zct.len);
	{
		while (1) {
			if (!(((NI) 0) < (*L0))) goto LA2;
			Cell48106* c0 = gch0.zct.d[(((NI) 0))- 0];
			(*c0).refcount = (NI)((*c0).refcount & ((NI) -5));
			gch0.zct.d[(((NI) 0))- 0] = gch0.zct.d[((NI)((*L0) - ((NI) 1)))- 0];
			(*L0) -= ((NI) 1);
			{
				if (!((NU64)((*c0).refcount) < (NU64)(((NI) 8)))) goto LA5;
{				preparedealloc_52808_1689653243(c0);
				forallchildren_52614_1689653243(c0, ((Walkop50610) 2));
				rawdealloc_43818_1689653243(gch0.region, ((void*) (c0)));
}			}
			LA5: ;
		} LA2: ;
	}
	result0 = NIM_TRUE;
	return result0;
}

N_NIMCALL(void, deinit_48236_1689653243)(Cellset48118& s0) {
	nimfr("deinit", "cellsets.nim")
	nimln(86, "cellsets.nim");
	Pagedesc48114* it0 = s0.head;
	{
		nimln(87, "cellsets.nim");
		while (1) {
			nimln(343, "system.nim");
			if (!!((it0 == NIM_NIL))) goto LA2;
			nimln(88, "cellsets.nim");
			Pagedesc48114* n0 = (*it0).next;
			nimln(89, "cellsets.nim");
			dealloc_7448_1689653243(((void*) (it0)));
			nimln(90, "cellsets.nim");
			it0 = n0;
		} LA2: ;
	}
	nimln(91, "cellsets.nim");
	s0.head = NIM_NIL;
	nimln(92, "cellsets.nim");
	dealloc_7448_1689653243(((void*) (s0.data)));
	nimln(93, "cellsets.nim");
	s0.data = NIM_NIL;
	nimln(94, "cellsets.nim");
	s0.counter = ((NI) 0);
	popFrame();
}

N_NIMCALL(void*, alloc0_46816_1689653243)(Memregion30286& allocator0, NI size0) {
	void* result0;
	nimfr("alloc0", "alloc.nim")
	result0 = (void*)0;
	nimln(650, "alloc.nim");
	result0 = alloc_46640_1689653243(allocator0, size0);
	nimln(651, "alloc.nim");
	zeroMem(result0, size0);
	popFrame();
	return result0;
}

N_NOCONV(void*, alloc0_7417_1689653243)(NI size0) {
	void* result0;
	nimfr("alloc0", "alloc.nim")
	result0 = (void*)0;
	nimln(710, "alloc.nim");
	result0 = alloc0_46816_1689653243(gch_50658_1689653243.region, size0);
	popFrame();
	return result0;
}

N_NIMCALL(void, init_48228_1689653243)(Cellset48118& s0) {
	void* LOC1;
	nimfr("init", "cellsets.nim")
	nimln(80, "cellsets.nim");
	LOC1 = (void*)0;
	LOC1 = alloc0_7417_1689653243(((NI) 8192));
	s0.data = ((Pagedesc48114**) (LOC1));
	nimln(81, "cellsets.nim");
	s0.max = ((NI) 1023);
	nimln(82, "cellsets.nim");
	s0.counter = ((NI) 0);
	nimln(83, "cellsets.nim");
	s0.head = NIM_NIL;
	popFrame();
}

N_NIMCALL(void, cellsetreset_56628_1689653243)(Cellset48118& s0) {
	nimfr("cellsetReset", "gc.nim")
	nimln(334, "gc.nim");
	deinit_48236_1689653243(s0);
	nimln(335, "gc.nim");
	init_48228_1689653243(s0);
	popFrame();
}

static N_INLINE(NI, nexttry_48255_1689653243)(NI h0, NI maxhash0) {
	NI result0;
	nimfr("nextTry", "cellsets.nim")
	result0 = (NI)0;
	nimln(97, "cellsets.nim");
	result0 = (NI)((NI)((NI)(((NI) 5) * h0) + ((NI) 1)) & maxhash0);
	popFrame();
	return result0;
}

N_NIMCALL(void, cellsetrawinsert_48280_1689653243)(Cellset48118* t0, Pagedesc48114** data0, Pagedesc48114* desc0) {
	nimfr("cellSetRawInsert", "cellsets.nim")
	nimln(110, "cellsets.nim");
	NI h0 = (NI)(((NI) ((*desc0).key)) & (*t0).max);
	{
		nimln(111, "cellsets.nim");
		while (1) {
			nimln(343, "system.nim");
			if (!!((data0[(h0)- 0] == NIM_NIL))) goto LA2;
			nimln(113, "cellsets.nim");
			h0 = nexttry_48255_1689653243(h0, (*t0).max);
		} LA2: ;
	}
	nimln(115, "cellsets.nim");
	data0[(h0)- 0] = desc0;
	popFrame();
}

N_NIMCALL(void, cellsetenlarge_48603_1689653243)(Cellset48118& t0) {
	void* LOC1;
	nimfr("cellSetEnlarge", "cellsets.nim")
	nimln(118, "cellsets.nim");
	NI oldmax0 = t0.max;
	nimln(119, "cellsets.nim");
	t0.max = (NI)((NI)((NI)(t0.max + ((NI) 1)) * ((NI) 2)) - ((NI) 1));
	nimln(120, "cellsets.nim");
	LOC1 = (void*)0;
	LOC1 = alloc0_7417_1689653243(((NI) ((NI)((NI)(t0.max + ((NI) 1)) * ((NI) 8)))));
	Pagedesc48114** n0 = ((Pagedesc48114**) (LOC1));
	{
		NI i_48619_1689653243;
		i_48619_1689653243 = (NI)0;
		nimln(1875, "system.nim");
		NI res_48637_1689653243 = ((NI) 0);
		{
			nimln(1876, "system.nim");
			while (1) {
				if (!(res_48637_1689653243 <= oldmax0)) goto LA4;
				nimln(1877, "system.nim");
				i_48619_1689653243 = res_48637_1689653243;
				nimln(122, "cellsets.nim");
				{
					nimln(343, "system.nim");
					if (!!((t0.data[(i_48619_1689653243)- 0] == NIM_NIL))) goto LA7;
{					nimln(123, "cellsets.nim");
					cellsetrawinsert_48280_1689653243((&t0), n0, t0.data[(i_48619_1689653243)- 0]);
}				}
				LA7: ;
				nimln(1896, "system.nim");
				res_48637_1689653243 += ((NI) 1);
			} LA4: ;
		}
	}
	nimln(124, "cellsets.nim");
	dealloc_7448_1689653243(((void*) (t0.data)));
	nimln(125, "cellsets.nim");
	t0.data = n0;
	popFrame();
}

N_NIMCALL(Pagedesc48114*, cellsetput_48641_1689653243)(Cellset48118& t0, NI key0) {
	Pagedesc48114* result0;
	void* LOC19;
	nimfr("cellSetPut", "cellsets.nim")
{	result0 = (Pagedesc48114*)0;
	nimln(128, "cellsets.nim");
	NI h0 = (NI)(((NI) (key0)) & t0.max);
	{
		nimln(129, "cellsets.nim");
		while (1) {
			nimln(130, "cellsets.nim");
			Pagedesc48114* x0 = t0.data[(h0)- 0];
			nimln(131, "cellsets.nim");
			{
				if (!(x0 == NIM_NIL)) goto LA5;
{				goto LA1;
}			}
			LA5: ;
			nimln(132, "cellsets.nim");
			{
				if (!((*x0).key == key0)) goto LA9;
{				result0 = x0;
				goto BeforeRet;
}			}
			LA9: ;
			nimln(133, "cellsets.nim");
			h0 = nexttry_48255_1689653243(h0, t0.max);
		}
	} LA1: ;
	nimln(135, "cellsets.nim");
	{
		NIM_BOOL LOC13;
		LOC13 = (NIM_BOOL)0;
		LOC13 = ((NI)((NI)(t0.max + ((NI) 1)) * ((NI) 2)) < (NI)(t0.counter * ((NI) 3)));
		if (LOC13) goto LA14;
		LOC13 = ((NI)((NI)(t0.max + ((NI) 1)) - t0.counter) < ((NI) 4));
		LA14: ;
		if (!LOC13) goto LA15;
{		nimln(136, "cellsets.nim");
		cellsetenlarge_48603_1689653243(t0);
}	}
	LA15: ;
	nimln(137, "cellsets.nim");
	t0.counter += ((NI) 1);
	nimln(138, "cellsets.nim");
	h0 = (NI)(((NI) (key0)) & t0.max);
	{
		nimln(139, "cellsets.nim");
		while (1) {
			nimln(343, "system.nim");
			if (!!((t0.data[(h0)- 0] == NIM_NIL))) goto LA18;
			nimln(139, "cellsets.nim");
			h0 = nexttry_48255_1689653243(h0, t0.max);
		} LA18: ;
	}
	nimln(142, "cellsets.nim");
	LOC19 = (void*)0;
	LOC19 = alloc0_7417_1689653243(((NI) (((NI)sizeof(Pagedesc48114)))));
	result0 = ((Pagedesc48114*) (LOC19));
	nimln(143, "cellsets.nim");
	(*result0).next = t0.head;
	nimln(144, "cellsets.nim");
	(*result0).key = key0;
	nimln(145, "cellsets.nim");
	t0.head = result0;
	nimln(146, "cellsets.nim");
	t0.data[(h0)- 0] = result0;
	}BeforeRet: ;
	popFrame();
	return result0;
}

N_NOINLINE(void, incl_48847_1689653243)(Cellset48118& s0, Cell48106* cell0) {
	nimfr("incl", "cellsets.nim")
	nimln(160, "cellsets.nim");
	NI u0 = ((NI) (cell0));
	nimln(161, "cellsets.nim");
	Pagedesc48114* t0 = cellsetput_48641_1689653243(s0, (NI)((NU64)(u0) >> (NU64)(((NI) 12))));
	nimln(162, "cellsets.nim");
	u0 = (NI)((NU64)((NI)((NU64)(u0) % (NU64)(((NI) 4096)))) / (NU64)(((NI) 8)));
	nimln(163, "cellsets.nim");
	(*t0).bits[((NI)((NU64)(u0) >> (NU64)(((NI) 6))))- 0] = (NI)((*t0).bits[((NI)((NU64)(u0) >> (NU64)(((NI) 6))))- 0] | (NI)((NU64)(((NI) 1)) << (NU64)(((NI) ((NI)(u0 & ((NI) 63)))))));
	popFrame();
}

N_NIMCALL(Pagedesc48114*, cellsetget_48260_1689653243)(Cellset48118* t0, NI key0) {
	Pagedesc48114* result0;
	nimfr("cellSetGet", "cellsets.nim")
{	result0 = (Pagedesc48114*)0;
	nimln(103, "cellsets.nim");
	NI h0 = (NI)(((NI) (key0)) & (*t0).max);
	{
		nimln(104, "cellsets.nim");
		while (1) {
			nimln(343, "system.nim");
			if (!!(((*t0).data[(h0)- 0] == NIM_NIL))) goto LA2;
			nimln(105, "cellsets.nim");
			{
				if (!((*(*t0).data[(h0)- 0]).key == key0)) goto LA5;
{				result0 = (*t0).data[(h0)- 0];
				goto BeforeRet;
}			}
			LA5: ;
			nimln(106, "cellsets.nim");
			h0 = nexttry_48255_1689653243(h0, (*t0).max);
		} LA2: ;
	}
	nimln(107, "cellsets.nim");
	result0 = NIM_NIL;
	goto BeforeRet;
	}BeforeRet: ;
	popFrame();
	return result0;
}

N_NIMCALL(NIM_BOOL, containsorincl_48914_1689653243)(Cellset48118& s0, Cell48106* cell0) {
	NIM_BOOL result0;
	nimfr("containsOrIncl", "cellsets.nim")
	result0 = (NIM_BOOL)0;
	nimln(174, "cellsets.nim");
	NI u0 = ((NI) (cell0));
	nimln(175, "cellsets.nim");
	Pagedesc48114* t0 = cellsetget_48260_1689653243((&s0), (NI)((NU64)(u0) >> (NU64)(((NI) 12))));
	nimln(176, "cellsets.nim");
	{
		nimln(343, "system.nim");
		if (!!((t0 == NIM_NIL))) goto LA3;
{		nimln(177, "cellsets.nim");
		u0 = (NI)((NU64)((NI)((NU64)(u0) % (NU64)(((NI) 4096)))) / (NU64)(((NI) 8)));
		nimln(178, "cellsets.nim");
		nimln(343, "system.nim");
		nimln(178, "cellsets.nim");
		result0 = !(((NI)((*t0).bits[((NI)((NU64)(u0) >> (NU64)(((NI) 6))))- 0] & (NI)((NU64)(((NI) 1)) << (NU64)(((NI) ((NI)(u0 & ((NI) 63))))))) == ((NI) 0)));
		nimln(179, "cellsets.nim");
		{
			if (!!(result0)) goto LA7;
{			nimln(180, "cellsets.nim");
			nimln(181, "cellsets.nim");
			(*t0).bits[((NI)((NU64)(u0) >> (NU64)(((NI) 6))))- 0] = (NI)((*t0).bits[((NI)((NU64)(u0) >> (NU64)(((NI) 6))))- 0] | (NI)((NU64)(((NI) 1)) << (NU64)(((NI) ((NI)(u0 & ((NI) 63)))))));
}		}
		LA7: ;
}	}
	goto LA1;
	LA3: ;
	{
		nimln(183, "cellsets.nim");
		incl_48847_1689653243(s0, cell0);
		nimln(184, "cellsets.nim");
		result0 = NIM_FALSE;
	}
	LA1: ;
	popFrame();
	return result0;
}

N_NIMCALL(void, marks_68401_1689653243)(Gcheap50618& gch0, Cell48106* c0) {
	incl_48847_1689653243(gch0.marked, c0);
	forallchildren_52614_1689653243(c0, ((Walkop50610) 1));
	{
		while (1) {
			if (!(((NI) 0) < gch0.tempstack.len)) goto LA2;
			gch0.tempstack.len -= ((NI) 1);
			Cell48106* d0 = gch0.tempstack.d[(gch0.tempstack.len)- 0];
			{
				NIM_BOOL LOC5;
				LOC5 = (NIM_BOOL)0;
				LOC5 = containsorincl_48914_1689653243(gch0.marked, d0);
				if (!!(LOC5)) goto LA6;
{				forallchildren_52614_1689653243(d0, ((Walkop50610) 1));
}			}
			LA6: ;
		} LA2: ;
	}
}

N_NIMCALL(void, markglobals_68613_1689653243)(Gcheap50618& gch0) {
	{
		NI i_68634_1689653243;
		NI HEX3Atmp_68656_1689653243;
		i_68634_1689653243 = (NI)0;
		HEX3Atmp_68656_1689653243 = (NI)0;
		HEX3Atmp_68656_1689653243 = (globalmarkerslen_56607_1689653243 - 1);
		NI res_68659_1689653243 = ((NI) 0);
		{
			while (1) {
				if (!(res_68659_1689653243 <= HEX3Atmp_68656_1689653243)) goto LA3;
				i_68634_1689653243 = res_68659_1689653243;
				globalmarkers_56611_1689653243[(i_68634_1689653243)- 0]();
				res_68659_1689653243 += ((NI) 1);
			} LA3: ;
		}
	}
	Cell48106** d0 = gch0.additionalroots.d;
	{
		NI i_68653_1689653243;
		NI HEX3Atmp_68664_1689653243;
		i_68653_1689653243 = (NI)0;
		HEX3Atmp_68664_1689653243 = (NI)0;
		HEX3Atmp_68664_1689653243 = (gch0.additionalroots.len - 1);
		NI res_68667_1689653243 = ((NI) 0);
		{
			while (1) {
				if (!(res_68667_1689653243 <= HEX3Atmp_68664_1689653243)) goto LA6;
				i_68653_1689653243 = res_68667_1689653243;
				marks_68401_1689653243(gch0, d0[(i_68653_1689653243)- 0]);
				res_68667_1689653243 += ((NI) 1);
			} LA6: ;
		}
	}
}

static N_INLINE(NIM_BOOL, iscell_31956_1689653243)(void* p0) {
	NIM_BOOL result0;
	nimfr("isCell", "alloc.nim")
	result0 = (NIM_BOOL)0;
	nimln(260, "alloc.nim");
	nimln(1745, "system.nim");
	result0 = ((NU64)(((NI) 1)) < (NU64)((*((Freecell30230*) (p0))).zerofield));
	popFrame();
	return result0;
}

N_NIMCALL(NIM_BOOL, contains_48808_1689653243)(Cellset48118* s0, Cell48106* cell0) {
	NIM_BOOL result0;
	nimfr("contains", "cellsets.nim")
	result0 = (NIM_BOOL)0;
	nimln(151, "cellsets.nim");
	NI u0 = ((NI) (cell0));
	nimln(152, "cellsets.nim");
	Pagedesc48114* t0 = cellsetget_48260_1689653243(s0, (NI)((NU64)(u0) >> (NU64)(((NI) 12))));
	nimln(153, "cellsets.nim");
	{
		nimln(343, "system.nim");
		if (!!((t0 == NIM_NIL))) goto LA3;
{		nimln(154, "cellsets.nim");
		u0 = (NI)((NU64)((NI)((NU64)(u0) % (NU64)(((NI) 4096)))) / (NU64)(((NI) 8)));
		nimln(155, "cellsets.nim");
		nimln(343, "system.nim");
		nimln(155, "cellsets.nim");
		result0 = !(((NI)((*t0).bits[((NI)((NU64)(u0) >> (NU64)(((NI) 6))))- 0] & (NI)((NU64)(((NI) 1)) << (NU64)(((NI) ((NI)(u0 & ((NI) 63))))))) == ((NI) 0)));
}	}
	goto LA1;
	LA3: ;
	{
		nimln(157, "cellsets.nim");
		result0 = NIM_FALSE;
	}
	LA1: ;
	popFrame();
	return result0;
}

N_NIMCALL(void, freecycliccell_67015_1689653243)(Gcheap50618& gch0, Cell48106* c0) {
	preparedealloc_52808_1689653243(c0);
	rawdealloc_43818_1689653243(gch0.region, ((void*) (c0)));
}

N_NIMCALL(void, sweep_68201_1689653243)(Gcheap50618& gch0) {
	{
		void* x_68206_1689653243;
		x_68206_1689653243 = (void*)0;
		gch0.region.locked = NIM_TRUE;
		{
			NI s_68219_1689653243;
			Intset30214 HEX3Atmp_68221_1689653243;
			s_68219_1689653243 = (NI)0;
			memset((void*)(&HEX3Atmp_68221_1689653243), 0, sizeof(HEX3Atmp_68221_1689653243));
			HEX3Atmp_68221_1689653243 = gch0.region.chunkstarts;
			{
				NI h_68223_1689653243;
				h_68223_1689653243 = (NI)0;
				NI res_68225_1689653243 = ((NI) 0);
				{
					while (1) {
						if (!(res_68225_1689653243 <= ((NI) 255))) goto LA5;
						h_68223_1689653243 = ((NI) (res_68225_1689653243));
						Trunk30210* r_68227_1689653243 = HEX3Atmp_68221_1689653243.data[(h_68223_1689653243)- 0];
						{
							while (1) {
								if (!!((r_68227_1689653243 == NIM_NIL))) goto LA7;
								NI i_68229_1689653243 = ((NI) 0);
								{
									while (1) {
										if (!(i_68229_1689653243 <= ((NI) 7))) goto LA9;
										NI w_68231_1689653243 = (*r_68227_1689653243).bits[(i_68229_1689653243)- 0];
										NI j_68233_1689653243 = ((NI) 0);
										{
											while (1) {
												if (!!((w_68231_1689653243 == ((NI) 0)))) goto LA11;
												{
													if (!!((((NI) ((NI)(w_68231_1689653243 & ((NI) 1)))) == ((NI) 0)))) goto LA14;
{													s_68219_1689653243 = (NI)((NI)((NU64)((*r_68227_1689653243).key) << (NU64)(((NI) 9))) | (NI)((NU64)((NI)((NU64)(i_68229_1689653243) << (NU64)(((NI) 6)))) + (NU64)(j_68233_1689653243)));
													{
														if (!contains_31540_1689653243((&gch0.region.chunkstarts), s_68219_1689653243)) goto LA18;
{														Basechunk30238* c_68235_1689653243 = ((Basechunk30238*) ((NI)((NU64)(s_68219_1689653243) << (NU64)(((NI) 12)))));
														{
															NIM_BOOL LOC22;
															LOC22 = (NIM_BOOL)0;
															LOC22 = chunkunused_31889_1689653243(c_68235_1689653243);
															if (!!(LOC22)) goto LA23;
{															{
																if (!issmallchunk_31869_1689653243(c_68235_1689653243)) goto LA27;
{																Smallchunk30240* c_68238_1689653243 = ((Smallchunk30240*) (c_68235_1689653243));
																NI size_68241_1689653243 = (*c_68238_1689653243).size;
																NI a_68243_1689653243 = ((NI) ((&(*c_68238_1689653243).data)));
																NI limit_68246_1689653243 = (NI)(a_68243_1689653243 + (*c_68238_1689653243).acc);
																{
																	while (1) {
																		if (!((NU64)(a_68243_1689653243) < (NU64)(limit_68246_1689653243))) goto LA30;
																		x_68206_1689653243 = ((void*) (a_68243_1689653243));
																		{
																			if (!iscell_31956_1689653243(x_68206_1689653243)) goto LA33;
{																			Cell48106* c0 = ((Cell48106*) (x_68206_1689653243));
																			{
																				NIM_BOOL LOC37;
																				LOC37 = (NIM_BOOL)0;
																				LOC37 = contains_48808_1689653243((&gch0.marked), c0);
																				if (!!(LOC37)) goto LA38;
{																				freecycliccell_67015_1689653243(gch0, c0);
}																			}
																			LA38: ;
}																		}
																		LA33: ;
																		a_68243_1689653243 = (NI)((NU64)(a_68243_1689653243) + (NU64)(size_68241_1689653243));
																	} LA30: ;
																}
}															}
															goto LA25;
															LA27: ;
															{
																Bigchunk30242* c_68249_1689653243 = ((Bigchunk30242*) (c_68235_1689653243));
																x_68206_1689653243 = ((void*) ((&(*c_68249_1689653243).data)));
																{
																	if (!iscell_31956_1689653243(x_68206_1689653243)) goto LA43;
{																	Cell48106* c_68252_1689653243 = ((Cell48106*) (x_68206_1689653243));
																	{
																		NIM_BOOL LOC47;
																		LOC47 = (NIM_BOOL)0;
																		LOC47 = contains_48808_1689653243((&gch0.marked), c_68252_1689653243);
																		if (!!(LOC47)) goto LA48;
{																		freecycliccell_67015_1689653243(gch0, c_68252_1689653243);
}																	}
																	LA48: ;
}																}
																LA43: ;
															}
															LA25: ;
}														}
														LA23: ;
}													}
													LA18: ;
}												}
												LA14: ;
												j_68233_1689653243 += ((NI) 1);
												w_68231_1689653243 = (NI)((NU64)(w_68231_1689653243) >> (NU64)(((NI) 1)));
											} LA11: ;
										}
										i_68229_1689653243 += ((NI) 1);
									} LA9: ;
								}
								r_68227_1689653243 = (*r_68227_1689653243).next;
							} LA7: ;
						}
						res_68225_1689653243 += ((NI) 1);
					} LA5: ;
				}
			}
		}
		gch0.region.locked = NIM_FALSE;
	}
}

N_NIMCALL(void, collectcycles_70211_1689653243)(Gcheap50618& gch0) {
	{
		while (1) {
			NIM_BOOL LOC3;
			if (!(((NI) 0) < gch0.zct.len)) goto LA2;
			LOC3 = (NIM_BOOL)0;
			LOC3 = collectzct_70207_1689653243(gch0);
		} LA2: ;
	}
	cellsetreset_56628_1689653243(gch0.marked);
	Cell48106** d0 = gch0.decstack.d;
	{
		NI i_70612_1689653243;
		NI HEX3Atmp_70806_1689653243;
		i_70612_1689653243 = (NI)0;
		HEX3Atmp_70806_1689653243 = (NI)0;
		HEX3Atmp_70806_1689653243 = (NI)(gch0.decstack.len - ((NI) 1));
		NI res_70809_1689653243 = ((NI) 0);
		{
			while (1) {
				if (!(res_70809_1689653243 <= HEX3Atmp_70806_1689653243)) goto LA6;
				i_70612_1689653243 = res_70809_1689653243;
				marks_68401_1689653243(gch0, d0[(i_70612_1689653243)- 0]);
				res_70809_1689653243 += ((NI) 1);
			} LA6: ;
		}
	}
	markglobals_68613_1689653243(gch0);
	sweep_68201_1689653243(gch0);
}

N_NIMCALL(NI, gettotalmem_8059_1689653243)(void) {
	NI result0;
	nimfr("getTotalMem", "alloc.nim")
{	result0 = (NI)0;
	nimln(730, "alloc.nim");
	result0 = gch_50658_1689653243.region.currmem;
	goto BeforeRet;
	}BeforeRet: ;
	popFrame();
	return result0;
}

N_NIMCALL(NI, getfreemem_8057_1689653243)(void) {
	NI result0;
	nimfr("getFreeMem", "alloc.nim")
	result0 = (NI)0;
	nimln(727, "alloc.nim");
	result0 = gch_50658_1689653243.region.freemem;
	popFrame();
	return result0;
}

N_NIMCALL(NI, getoccupiedmem_8055_1689653243)(void) {
	NI result0;
	NI LOC1;
	NI LOC2;
	nimfr("getOccupiedMem", "alloc.nim")
{	result0 = (NI)0;
	nimln(731, "alloc.nim");
	LOC1 = (NI)0;
	LOC1 = gettotalmem_8059_1689653243();
	LOC2 = (NI)0;
	LOC2 = getfreemem_8057_1689653243();
	result0 = (NI)(LOC1 - LOC2);
	goto BeforeRet;
	}BeforeRet: ;
	popFrame();
	return result0;
}

N_NOINLINE(void, addzct_52217_1689653243)(Cellseq48122& s0, Cell48106* c0) {
	nimfr("addZCT", "gc.nim")
	nimln(121, "gc.nim");
	{
		if (!((NI)((*c0).refcount & ((NI) 4)) == ((NI) 0))) goto LA3;
{		nimln(122, "gc.nim");
		(*c0).refcount = (NI)((*c0).refcount | ((NI) 4));
		nimln(123, "gc.nim");
		add_48193_1689653243(s0, c0);
}	}
	LA3: ;
	popFrame();
}

static N_INLINE(void, rtladdzct_53401_1689653243)(Cell48106* c0) {
	nimfr("rtlAddZCT", "gc.nim")
	nimln(211, "gc.nim");
	addzct_52217_1689653243(gch_50658_1689653243.zct, c0);
	popFrame();
}

static N_INLINE(void, decref_53801_1689653243)(Cell48106* c0) {
	nimfr("decRef", "gc.nim")
	nimln(218, "gc.nim");
	{
		nimln(177, "gc.nim");
		(*c0).refcount -= ((NI) 8);
		nimln(178, "gc.nim");
		if (!((NU64)((*c0).refcount) < (NU64)(((NI) 8)))) goto LA3;
{		nimln(219, "gc.nim");
		rtladdzct_53401_1689653243(c0);
}	}
	LA3: ;
	popFrame();
}

N_NIMCALL(void, unmarkstackandregisters_75402_1689653243)(Gcheap50618& gch0) {
	Cell48106** d0 = gch0.decstack.d;
	{
		NI i_75416_1689653243;
		NI HEX3Atmp_75602_1689653243;
		i_75416_1689653243 = (NI)0;
		HEX3Atmp_75602_1689653243 = (NI)0;
		HEX3Atmp_75602_1689653243 = (NI)(gch0.decstack.len - ((NI) 1));
		NI res_75605_1689653243 = ((NI) 0);
		{
			while (1) {
				if (!(res_75605_1689653243 <= HEX3Atmp_75602_1689653243)) goto LA3;
				i_75416_1689653243 = res_75605_1689653243;
				decref_53801_1689653243(d0[(i_75416_1689653243)- 0]);
				res_75605_1689653243 += ((NI) 1);
			} LA3: ;
		}
	}
	gch0.decstack.len = ((NI) 0);
}

N_NIMCALL(void, collectctbody_75609_1689653243)(Gcheap50618& gch0) {
	NI LOC1;
	LOC1 = (NI)0;
	LOC1 = stacksize_71801_1689653243();
	gch0.stat.maxstacksize = ((gch0.stat.maxstacksize >= LOC1) ? gch0.stat.maxstacksize : LOC1);
	prepareforinteriorpointerchecking_45488_1689653243(gch0.region);
	markstackandregisters_73237_1689653243(gch0);
	gch0.stat.maxstackcells = ((gch0.stat.maxstackcells >= gch0.decstack.len) ? gch0.stat.maxstackcells : gch0.decstack.len);
	gch0.stat.stackscans += ((NI) 1);
	{
		if (!collectzct_70207_1689653243(gch0)) goto LA4;
{		{
			NIM_BOOL LOC8;
			NI LOC9;
			NI LOC13;
			LOC8 = (NIM_BOOL)0;
			LOC9 = (NI)0;
			LOC9 = getoccupiedmem_48031_1689653243((&gch0.region));
			LOC8 = (gch0.cyclethreshold <= LOC9);
			if (LOC8) goto LA10;
			LOC8 = NIM_FALSE;
			LA10: ;
			if (!LOC8) goto LA11;
{			collectcycles_70211_1689653243(gch0);
			gch0.stat.cyclecollections += ((NI) 1);
			LOC13 = (NI)0;
			LOC13 = getoccupiedmem_8055_1689653243();
			gch0.cyclethreshold = ((((NI) 4194304) >= (NI)(LOC13 * ((NI) 2))) ? ((NI) 4194304) : (NI)(LOC13 * ((NI) 2)));
			gch0.stat.maxthreshold = ((gch0.stat.maxthreshold >= gch0.cyclethreshold) ? gch0.stat.maxthreshold : gch0.cyclethreshold);
}		}
		LA11: ;
}	}
	LA4: ;
	unmarkstackandregisters_75402_1689653243(gch0);
}

N_NIMCALL(void, collectct_52607_1689653243)(Gcheap50618& gch0) {
	NI LOC1;
	LOC1 = (NI)0;
	LOC1 = stacksize_71801_1689653243();
	NI stackmarkcosts0 = (((NI)(LOC1 / ((NI) 128)) >= ((NI) 500)) ? (NI)(LOC1 / ((NI) 128)) : ((NI) 500));
	{
		NIM_BOOL LOC4;
		NIM_BOOL LOC5;
		NIM_BOOL LOC6;
		NIM_BOOL LOC8;
		NI LOC10;
		LOC4 = (NIM_BOOL)0;
		LOC5 = (NIM_BOOL)0;
		LOC6 = (NIM_BOOL)0;
		LOC6 = (stackmarkcosts0 <= gch0.zct.len);
		if (LOC6) goto LA7;
		LOC8 = (NIM_BOOL)0;
		LOC8 = NIM_TRUE;
		if (!(LOC8)) goto LA9;
		LOC10 = (NI)0;
		LOC10 = getoccupiedmem_48031_1689653243((&gch0.region));
		LOC8 = (gch0.cyclethreshold <= LOC10);
		LA9: ;
		LOC6 = LOC8;
		LA7: ;
		LOC5 = LOC6;
		if (LOC5) goto LA11;
		LOC5 = NIM_FALSE;
		LA11: ;
		LOC4 = LOC5;
		if (!(LOC4)) goto LA12;
		LOC4 = (gch0.recgclock == ((NI) 0));
		LA12: ;
		if (!LOC4) goto LA13;
{		collectctbody_75609_1689653243(gch0);
}	}
	LA13: ;
}

static N_INLINE(void, addnewobjtozct_57674_1689653243)(Cell48106* res0, Gcheap50618& gch0) {
{	NI L0 = gch0.zct.len;
	Cell48106** d0 = gch0.zct.d;
	{
		Cell48106* c0;
		if (!(((NI) 8) < L0)) goto LA3;
{		c0 = (Cell48106*)0;
		c0 = d0[((NI)(L0 - ((NI) 1)))- 0];
		{
			if (!((NU64)(((NI) 8)) <= (NU64)((*c0).refcount))) goto LA7;
{			(*c0).refcount = (NI)((*c0).refcount & ((NI) -5));
			d0[((NI)(L0 - ((NI) 1)))- 0] = res0;
			goto BeforeRet;
}		}
		LA7: ;
		c0 = d0[((NI)(L0 - ((NI) 2)))- 0];
		{
			if (!((NU64)(((NI) 8)) <= (NU64)((*c0).refcount))) goto LA11;
{			(*c0).refcount = (NI)((*c0).refcount & ((NI) -5));
			d0[((NI)(L0 - ((NI) 2)))- 0] = res0;
			goto BeforeRet;
}		}
		LA11: ;
		c0 = d0[((NI)(L0 - ((NI) 3)))- 0];
		{
			if (!((NU64)(((NI) 8)) <= (NU64)((*c0).refcount))) goto LA15;
{			(*c0).refcount = (NI)((*c0).refcount & ((NI) -5));
			d0[((NI)(L0 - ((NI) 3)))- 0] = res0;
			goto BeforeRet;
}		}
		LA15: ;
		c0 = d0[((NI)(L0 - ((NI) 4)))- 0];
		{
			if (!((NU64)(((NI) 8)) <= (NU64)((*c0).refcount))) goto LA19;
{			(*c0).refcount = (NI)((*c0).refcount & ((NI) -5));
			d0[((NI)(L0 - ((NI) 4)))- 0] = res0;
			goto BeforeRet;
}		}
		LA19: ;
		c0 = d0[((NI)(L0 - ((NI) 5)))- 0];
		{
			if (!((NU64)(((NI) 8)) <= (NU64)((*c0).refcount))) goto LA23;
{			(*c0).refcount = (NI)((*c0).refcount & ((NI) -5));
			d0[((NI)(L0 - ((NI) 5)))- 0] = res0;
			goto BeforeRet;
}		}
		LA23: ;
		c0 = d0[((NI)(L0 - ((NI) 6)))- 0];
		{
			if (!((NU64)(((NI) 8)) <= (NU64)((*c0).refcount))) goto LA27;
{			(*c0).refcount = (NI)((*c0).refcount & ((NI) -5));
			d0[((NI)(L0 - ((NI) 6)))- 0] = res0;
			goto BeforeRet;
}		}
		LA27: ;
		c0 = d0[((NI)(L0 - ((NI) 7)))- 0];
		{
			if (!((NU64)(((NI) 8)) <= (NU64)((*c0).refcount))) goto LA31;
{			(*c0).refcount = (NI)((*c0).refcount & ((NI) -5));
			d0[((NI)(L0 - ((NI) 7)))- 0] = res0;
			goto BeforeRet;
}		}
		LA31: ;
		c0 = d0[((NI)(L0 - ((NI) 8)))- 0];
		{
			if (!((NU64)(((NI) 8)) <= (NU64)((*c0).refcount))) goto LA35;
{			(*c0).refcount = (NI)((*c0).refcount & ((NI) -5));
			d0[((NI)(L0 - ((NI) 8)))- 0] = res0;
			goto BeforeRet;
}		}
		LA35: ;
		add_48193_1689653243(gch0.zct, res0);
}	}
	goto LA1;
	LA3: ;
	{
		d0[(L0)- 0] = res0;
		gch0.zct.len += ((NI) 1);
	}
	LA1: ;
	}BeforeRet: ;
}

N_NIMCALL(void*, rawnewobj_58201_1689653243)(TNimType* typ0, NI size0, Gcheap50618& gch0) {
	void* result0;
	void* LOC1;
	result0 = (void*)0;
	collectct_52607_1689653243(gch0);
	LOC1 = (void*)0;
	LOC1 = rawalloc_37404_1689653243(gch0.region, (NI)(size0 + ((NI)sizeof(Cell48106))));
	Cell48106* res0 = ((Cell48106*) (LOC1));
	(*res0).typ = typ0;
	(*res0).refcount = ((NI) 4);
	addnewobjtozct_57674_1689653243(res0, gch0);
	result0 = celltousr_52223_1689653243(res0);
	return result0;
}

N_NIMCALL(void*, newObjNoInit)(TNimType* typ0, NI size0) {
	void* result0;
	nimfr("newObjNoInit", "gc.nim")
	result0 = (void*)0;
	nimln(477, "gc.nim");
	result0 = rawnewobj_58201_1689653243(typ0, size0, gch_50658_1689653243);
	popFrame();
	return result0;
}

N_NIMCALL(NimStringDesc*, rawNewStringNoInit)(NI space0) {
	NimStringDesc* result0;
	void* LOC5;
	result0 = (NimStringDesc*)0;
	NI s0 = space0;
	{
		if (!(s0 < ((NI) 7))) goto LA3;
{		s0 = ((NI) 7);
}	}
	LA3: ;
	LOC5 = (void*)0;
	LOC5 = newObjNoInit((&strdesc_12403_1689653243), (NI)((NI)(((NI)sizeof(TGenericSeq)) + s0) + ((NI) 1)));
	result0 = ((NimStringDesc*) (LOC5));
	(*result0).reserved = s0;
	return result0;
}

N_NIMCALL(NimStringDesc*, copyString)(NimStringDesc* src0) {
	NimStringDesc* result0;
	result0 = (NimStringDesc*)0;
	{
		if (!!((src0 == NIM_NIL))) goto LA3;
{		{
			if (!!(((NI)((*src0).reserved & ((NI) (IL64(-9223372036854775807) - IL64(1)))) == ((NI) 0)))) goto LA7;
{			result0 = src0;
}		}
		goto LA5;
		LA7: ;
		{
			result0 = rawNewStringNoInit((*src0).len);
			(*result0).len = (*src0).len;
			memcpy(((NCSTRING) ((*result0).data)), ((NCSTRING) ((*src0).data)), (NI)((*src0).len + ((NI) 1)));
		}
		LA5: ;
}	}
	LA3: ;
	return result0;
}

static N_INLINE(void, appendString)(NimStringDesc* dest0, NimStringDesc* src0) {
	memcpy(((NCSTRING) ((&(*dest0).data[((*dest0).len)- 0]))), ((NCSTRING) ((*src0).data)), (NI)((*src0).len + ((NI) 1)));
	(*dest0).len += (*src0).len;
}

static N_INLINE(NI, resize_79201_1689653243)(NI old0) {
	NI result0;
	result0 = (NI)0;
	{
		if (!(old0 <= ((NI) 0))) goto LA3;
{		result0 = ((NI) 4);
}	}
	goto LA1;
	LA3: ;
	{
		if (!(old0 < ((NI) 65536))) goto LA6;
{		result0 = (NI)(old0 * ((NI) 2));
}	}
	goto LA1;
	LA6: ;
	{
		result0 = (NI)((NI)(old0 * ((NI) 3)) / ((NI) 2));
	}
	LA1: ;
	return result0;
}

N_NIMCALL(void*, growobj_64003_1689653243)(void* old0, NI newsize0, Gcheap50618& gch0) {
	void* result0;
	void* LOC1;
	nimfr("growObj", "gc.nim")
	result0 = (void*)0;
	nimln(532, "gc.nim");
	collectct_52607_1689653243(gch0);
	nimln(533, "gc.nim");
	Cell48106* ol0 = usrtocell_52241_1689653243(old0);
	nimln(538, "gc.nim");
	LOC1 = (void*)0;
	LOC1 = rawalloc_37404_1689653243(gch0.region, (NI)(newsize0 + ((NI)sizeof(Cell48106))));
	Cell48106* res0 = ((Cell48106*) (LOC1));
	nimln(539, "gc.nim");
	NI elemsize0 = ((NI) 1);
	nimln(540, "gc.nim");
	{
		nimln(343, "system.nim");
		if (!!(((*(*ol0).typ).kind == ((Tnimkind3203) 28)))) goto LA4;
{		nimln(540, "gc.nim");
		elemsize0 = (*(*(*ol0).typ).base).size;
}	}
	LA4: ;
	nimln(542, "gc.nim");
	NI oldsize0 = (NI)((NI)((*((TGenericSeq*) (old0))).len * elemsize0) + ((NI) 16));
	nimln(543, "gc.nim");
	memcpy(((void*) (res0)), ((void*) (ol0)), ((NI) ((NI)(oldsize0 + ((NI)sizeof(Cell48106))))));
	nimln(544, "gc.nim");
	nimln(545, "gc.nim");
	zeroMem(((void*) ((NI)((NU64)((NI)((NU64)(((NI) (res0))) + (NU64)(oldsize0))) + (NU64)(((NI)sizeof(Cell48106)))))), ((NI) ((NI)(newsize0 - oldsize0))));
	nimln(557, "gc.nim");
	{
		if (!((NU64)((NI)((NU64)((*ol0).refcount) >> (NU64)(((NI) 3)))) <= (NU64)(((NI) 1)))) goto LA8;
{		nimln(559, "gc.nim");
		{
			nimln(343, "system.nim");
			nimln(559, "gc.nim");
			if (!!(((NI)((*ol0).refcount & ((NI) 4)) == ((NI) 0)))) goto LA12;
{			nimln(560, "gc.nim");
			NI j0 = (NI)(gch0.zct.len - ((NI) 1));
			nimln(561, "gc.nim");
			Cell48106** d0 = gch0.zct.d;
			{
				nimln(562, "gc.nim");
				while (1) {
					nimln(347, "system.nim");
					if (!(((NI) 0) <= j0)) goto LA15;
					nimln(563, "gc.nim");
					{
						if (!(d0[(j0)- 0] == ol0)) goto LA18;
{						nimln(564, "gc.nim");
						d0[(j0)- 0] = res0;
						nimln(565, "gc.nim");
						goto LA14;
}					}
					LA18: ;
					nimln(566, "gc.nim");
					j0 -= ((NI) 1);
				} LA15: ;
			} LA14: ;
}		}
		LA12: ;
		nimln(568, "gc.nim");
		rawdealloc_43818_1689653243(gch0.region, ((void*) (ol0)));
}	}
	goto LA6;
	LA8: ;
	{
		nimln(575, "gc.nim");
		(*res0).refcount = ((NI) 8);
		nimln(576, "gc.nim");
		decref_53801_1689653243(ol0);
	}
	LA6: ;
	nimln(584, "gc.nim");
	result0 = celltousr_52223_1689653243(res0);
	popFrame();
	return result0;
}

N_NIMCALL(void*, growobj_67009_1689653243)(void* old0, NI newsize0) {
	void* result0;
	nimfr("growObj", "gc.nim")
	result0 = (void*)0;
	nimln(589, "gc.nim");
	result0 = growobj_64003_1689653243(old0, newsize0, gch_50658_1689653243);
	popFrame();
	return result0;
}

N_NIMCALL(NimStringDesc*, resizeString)(NimStringDesc* dest0, NI addlen0) {
	NimStringDesc* result0;
	result0 = (NimStringDesc*)0;
	{
		if (!((NI)((*dest0).len + addlen0) <= (NI)((*dest0).reserved & ((NI) IL64(9223372036854775807))))) goto LA3;
{		result0 = dest0;
}	}
	goto LA1;
	LA3: ;
	{
		NI LOC6;
		void* LOC7;
		LOC6 = (NI)0;
		LOC6 = resize_79201_1689653243((NI)((*dest0).reserved & ((NI) IL64(9223372036854775807))));
		NI sp0 = ((LOC6 >= (NI)((*dest0).len + addlen0)) ? LOC6 : (NI)((*dest0).len + addlen0));
		LOC7 = (void*)0;
		LOC7 = growobj_67009_1689653243(((void*) (dest0)), (NI)((NI)(((NI)sizeof(TGenericSeq)) + sp0) + ((NI) 1)));
		result0 = ((NimStringDesc*) (LOC7));
		(*result0).reserved = sp0;
	}
	LA1: ;
	return result0;
}

N_NIMCALL(void*, newObj)(TNimType* typ0, NI size0) {
	void* result0;
	nimfr("newObj", "gc.nim")
	result0 = (void*)0;
	nimln(481, "gc.nim");
	result0 = rawnewobj_58201_1689653243(typ0, size0, gch_50658_1689653243);
	nimln(482, "gc.nim");
	zeroMem(result0, ((NI) (size0)));
	popFrame();
	return result0;
}

N_NIMCALL(NimStringDesc*, rawNewString)(NI space0) {
	NimStringDesc* result0;
	void* LOC5;
	result0 = (NimStringDesc*)0;
	NI s0 = space0;
	{
		if (!(s0 < ((NI) 7))) goto LA3;
{		s0 = ((NI) 7);
}	}
	LA3: ;
	LOC5 = (void*)0;
	LOC5 = newObj((&strdesc_12403_1689653243), (NI)((NI)(((NI)sizeof(TGenericSeq)) + s0) + ((NI) 1)));
	result0 = ((NimStringDesc*) (LOC5));
	(*result0).reserved = s0;
	return result0;
}

N_NIMCALL(NimStringDesc*, mnewString)(NI len0) {
	NimStringDesc* result0;
	result0 = (NimStringDesc*)0;
	result0 = rawNewString(len0);
	(*result0).len = len0;
	return result0;
}

N_NIMCALL(NimStringDesc*, setLengthStr)(NimStringDesc* s0, NI newlen0) {
	NimStringDesc* result0;
	result0 = (NimStringDesc*)0;
	NI n0 = ((newlen0 >= ((NI) 0)) ? newlen0 : ((NI) 0));
	{
		if (!(n0 <= (NI)((*s0).reserved & ((NI) IL64(9223372036854775807))))) goto LA3;
{		result0 = s0;
}	}
	goto LA1;
	LA3: ;
	{
		result0 = resizeString(s0, n0);
	}
	LA1: ;
	(*result0).len = n0;
	(*result0).data[(n0)- 0] = 0;
	return result0;
}

N_NIMCALL(NimStringDesc*, nimIntToStr)(NI x0) {
	NimStringDesc* result0;
	result0 = (NimStringDesc*)0;
	result0 = mnewString(((NI) 32));
	NI i0 = ((NI) 0);
	NI y0 = x0;
	{
		while (1) {
			NI d0 = (NI)(y0 / ((NI) 10));
			result0->data[i0] = ((NIM_CHAR) (((NI) ((NI)(((NI)(y0 - (NI)(d0 * ((NI) 10))) > 0? ((NI)(y0 - (NI)(d0 * ((NI) 10)))) : -((NI)(y0 - (NI)(d0 * ((NI) 10))))) + ((NI) 48))))));
			i0 += ((NI) 1);
			y0 = d0;
			{
				if (!(y0 == ((NI) 0))) goto LA5;
{				goto LA1;
}			}
			LA5: ;
		}
	} LA1: ;
	{
		if (!(x0 < ((NI) 0))) goto LA9;
{		result0->data[i0] = 45;
		i0 += ((NI) 1);
}	}
	LA9: ;
	result0 = setLengthStr(result0, ((NI) (i0)));
	{
		NI j_80539_1689653243;
		NI HEX3Atmp_80553_1689653243;
		j_80539_1689653243 = (NI)0;
		HEX3Atmp_80553_1689653243 = (NI)0;
		HEX3Atmp_80553_1689653243 = (NI)((NI)(i0 / ((NI) 2)) - ((NI) 1));
		NI res_80556_1689653243 = ((NI) 0);
		{
			while (1) {
				NIM_CHAR LOC14;
				if (!(res_80556_1689653243 <= HEX3Atmp_80553_1689653243)) goto LA13;
				j_80539_1689653243 = res_80556_1689653243;
				LOC14 = (NIM_CHAR)0;
				LOC14 = result0->data[j_80539_1689653243];
				result0->data[j_80539_1689653243] = result0->data[(NI)((NI)(i0 - j_80539_1689653243) - ((NI) 1))];
				result0->data[(NI)((NI)(i0 - j_80539_1689653243) - ((NI) 1))] = LOC14;
				res_80556_1689653243 += ((NI) 1);
			} LA13: ;
		}
	}
	return result0;
}

N_NIMCALL(NimStringDesc*, addChar)(NimStringDesc* s0, NIM_CHAR c0) {
	NimStringDesc* result0;
	result0 = (NimStringDesc*)0;
	result0 = s0;
	{
		void* LOC5;
		if (!((NI)((*result0).reserved & ((NI) IL64(9223372036854775807))) <= (*result0).len)) goto LA3;
{		(*result0).reserved = resize_79201_1689653243((NI)((*result0).reserved & ((NI) IL64(9223372036854775807))));
		LOC5 = (void*)0;
		LOC5 = growobj_67009_1689653243(((void*) (result0)), (NI)((NI)(((NI)sizeof(TGenericSeq)) + (*result0).reserved) + ((NI) 1)));
		result0 = ((NimStringDesc*) (LOC5));
}	}
	LA3: ;
	(*result0).data[((*result0).len)- 0] = c0;
	(*result0).data[((NI)((*result0).len + ((NI) 1)))- 0] = 0;
	(*result0).len += ((NI) 1);
	return result0;
}

N_NIMCALL(void, auxwritestacktrace_20005_1689653243)(TFrame* f0, NimStringDesc*& s0) {
	TFrame* it0 = f0;
	NI i0 = ((NI) 0);
	NI total0 = ((NI) 0);
	{
		while (1) {
			NIM_BOOL LOC3;
			LOC3 = (NIM_BOOL)0;
			LOC3 = !((it0 == NIM_NIL));
			if (!(LOC3)) goto LA4;
			LOC3 = (i0 <= ((NI) 95));
			LA4: ;
			if (!LOC3) goto LA2;
			tempframes_20004_1689653243[(i0)- 0] = it0;
			i0 += ((NI) 1);
			total0 += ((NI) 1);
			it0 = (*it0).prev;
		} LA2: ;
	}
	TFrame* b0 = it0;
	{
		while (1) {
			if (!!((it0 == NIM_NIL))) goto LA6;
			total0 += ((NI) 1);
			it0 = (*it0).prev;
		} LA6: ;
	}
	NI skipped0 = ((NI) 0);
	{
		if (!(((NI) 128) < total0)) goto LA9;
{		skipped0 = (NI)((NI)((NI)(total0 - i0) - ((NI) 32)) + ((NI) 1));
		{
			NI j_20280_1689653243;
			j_20280_1689653243 = (NI)0;
			NI res_20452_1689653243 = ((NI) 1);
			{
				while (1) {
					if (!(res_20452_1689653243 <= skipped0)) goto LA13;
					j_20280_1689653243 = res_20452_1689653243;
					{
						if (!!((b0 == NIM_NIL))) goto LA16;
{						b0 = (*b0).prev;
}					}
					LA16: ;
					res_20452_1689653243 += ((NI) 1);
				} LA13: ;
			}
		}
		tempframes_20004_1689653243[(i0)- 0] = NIM_NIL;
		i0 += ((NI) 1);
}	}
	LA9: ;
	{
		while (1) {
			NIM_BOOL LOC20;
			LOC20 = (NIM_BOOL)0;
			LOC20 = !((b0 == NIM_NIL));
			if (!(LOC20)) goto LA21;
			LOC20 = (i0 <= ((NI) 127));
			LA21: ;
			if (!LOC20) goto LA19;
			tempframes_20004_1689653243[(i0)- 0] = b0;
			i0 += ((NI) 1);
			b0 = (*b0).prev;
		} LA19: ;
	}
	{
		NI j_20415_1689653243;
		NI HEX3Atmp_20467_1689653243;
		j_20415_1689653243 = (NI)0;
		HEX3Atmp_20467_1689653243 = (NI)0;
		HEX3Atmp_20467_1689653243 = (NI)(i0 - ((NI) 1));
		NI res_20470_1689653243 = HEX3Atmp_20467_1689653243;
		{
			while (1) {
				if (!(((NI) 0) <= res_20470_1689653243)) goto LA24;
				j_20415_1689653243 = res_20470_1689653243;
				{
					NimStringDesc* LOC29;
					if (!(tempframes_20004_1689653243[(j_20415_1689653243)- 0] == NIM_NIL)) goto LA27;
{					s0 = resizeString(s0, 1);
appendString(s0, ((NimStringDesc*) &TMP8));
					LOC29 = (NimStringDesc*)0;
					LOC29 = nimIntToStr(skipped0);
					s0 = resizeString(s0, LOC29->len + 0);
appendString(s0, LOC29);
					s0 = resizeString(s0, 19);
appendString(s0, ((NimStringDesc*) &TMP9));
}				}
				goto LA25;
				LA27: ;
				{
					NI oldlen0 = (s0 ? s0->len : 0);
					add_10037_1689653243(s0, (*tempframes_20004_1689653243[(j_20415_1689653243)- 0]).filename);
					{
						NimStringDesc* LOC35;
						if (!(((NI) 0) < (*tempframes_20004_1689653243[(j_20415_1689653243)- 0]).line)) goto LA33;
{						s0 = addChar(s0, 40);
						LOC35 = (NimStringDesc*)0;
						LOC35 = nimIntToStr((*tempframes_20004_1689653243[(j_20415_1689653243)- 0]).line);
						s0 = resizeString(s0, LOC35->len + 0);
appendString(s0, LOC35);
						s0 = addChar(s0, 41);
}					}
					LA33: ;
					{
						NI k_20444_1689653243;
						NI HEX3Atmp_20460_1689653243;
						k_20444_1689653243 = (NI)0;
						HEX3Atmp_20460_1689653243 = (NI)0;
						HEX3Atmp_20460_1689653243 = ((((NI) 1) >= (NI)(((NI) 25) - (NI)((s0 ? s0->len : 0) - oldlen0))) ? ((NI) 1) : (NI)(((NI) 25) - (NI)((s0 ? s0->len : 0) - oldlen0)));
						NI res_20463_1689653243 = ((NI) 1);
						{
							while (1) {
								if (!(res_20463_1689653243 <= HEX3Atmp_20460_1689653243)) goto LA38;
								k_20444_1689653243 = res_20463_1689653243;
								s0 = addChar(s0, 32);
								res_20463_1689653243 += ((NI) 1);
							} LA38: ;
						}
					}
					add_10037_1689653243(s0, (*tempframes_20004_1689653243[(j_20415_1689653243)- 0]).procname);
				}
				LA25: ;
				s0 = resizeString(s0, 1);
appendString(s0, ((NimStringDesc*) &TMP10));
				res_20470_1689653243 -= ((NI) 1);
			} LA24: ;
		}
	}
}

N_NIMCALL(void, rawwritestacktrace_20601_1689653243)(NimStringDesc*& s0) {
	{
		if (!(frameptr_19636_1689653243 == NIM_NIL)) goto LA3;
{		s0 = resizeString(s0, 29);
appendString(s0, ((NimStringDesc*) &TMP6));
}	}
	goto LA1;
	LA3: ;
	{
		s0 = resizeString(s0, 34);
appendString(s0, ((NimStringDesc*) &TMP7));
		auxwritestacktrace_20005_1689653243(frameptr_19636_1689653243, s0);
	}
	LA1: ;
}

N_NIMCALL(NimStringDesc*, toNimStr)(NCSTRING str0, NI len0) {
	NimStringDesc* result0;
	result0 = (NimStringDesc*)0;
	result0 = rawNewStringNoInit(len0);
	(*result0).len = len0;
	memcpy(((NCSTRING) ((*result0).data)), str0, (NI)(len0 + ((NI) 1)));
	return result0;
}

N_NIMCALL(NimStringDesc*, cstrToNimstr)(NCSTRING str0) {
	NimStringDesc* result0;
	result0 = (NimStringDesc*)0;
	result0 = toNimStr(str0, strlen(str0));
	return result0;
}

N_NIMCALL(void, write_15701_1689653243)(FILE* f0, NCSTRING c0) {
	fputs(c0, f0);
}

N_NIMCALL(void, writetostderr_19601_1689653243)(NCSTRING msg0) {
	write_15701_1689653243(stderr, msg0);
}

N_NIMCALL(void, showerrormessage_19606_1689653243)(NCSTRING data0) {
	{
		NimStringDesc* LOC5;
		if (!!((errormessagewriter_19404_1689653243 == NIM_NIL))) goto LA3;
{		LOC5 = (NimStringDesc*)0;
		LOC5 = cstrToNimstr(data0);
		errormessagewriter_19404_1689653243(LOC5);
}	}
	goto LA1;
	LA3: ;
	{
		writetostderr_19601_1689653243(data0);
	}
	LA1: ;
}

N_NIMCALL(void, writestacktrace_19007_1689653243)(void) {
	NimStringDesc* s0;
	s0 = copyString(((NimStringDesc*) &TMP4));
	rawwritestacktrace_20601_1689653243(s0);
	showerrormessage_19606_1689653243(s0->data);
}

static N_INLINE(void, quitordebug_21013_1689653243)(void) {
	exit(((NI) 1));
}

N_NOINLINE(void, stackoverflow_22201_1689653243)(void) {
	writestacktrace_19007_1689653243();
	showerrormessage_19606_1689653243("Stack overflow\012");
	quitordebug_21013_1689653243();
}

static N_INLINE(void, nimFrame)(TFrame* s0) {
	NI LOC1;
	LOC1 = (NI)0;
	{
		if (!(frameptr_19636_1689653243 == NIM_NIL)) goto LA4;
{		LOC1 = ((NI) 0);
}	}
	goto LA2;
	LA4: ;
	{
		LOC1 = ((NI) ((NI16)((*frameptr_19636_1689653243).calldepth + ((NI16) 1))));
	}
	LA2: ;
	(*s0).calldepth = ((NI16) (LOC1));
	(*s0).prev = frameptr_19636_1689653243;
	frameptr_19636_1689653243 = s0;
	{
		if (!((*s0).calldepth == ((NI16) 2000))) goto LA9;
{		stackoverflow_22201_1689653243();
}	}
	LA9: ;
}

static N_INLINE(Cell48106*, usrtocell_52241_1689653243)(void* usr0) {
	Cell48106* result0;
	nimfr("usrToCell", "gc.nim")
	result0 = (Cell48106*)0;
	nimln(131, "gc.nim");
	result0 = ((Cell48106*) ((NI)((NU64)(((NI) (usr0))) - (NU64)(((NI)sizeof(Cell48106))))));
	popFrame();
	return result0;
}

N_NIMCALL(void, dooperation_52618_1689653243)(void* p0, Walkop50610 op0) {
{	{
		if (!(p0 == NIM_NIL)) goto LA3;
{		goto BeforeRet;
}	}
	LA3: ;
	Cell48106* c0 = usrtocell_52241_1689653243(p0);
	switch (op0) {
	case ((Walkop50610) 2):
	{
		decref_53801_1689653243(c0);
	}
	break;
	case ((Walkop50610) 3):
	{
		add_48193_1689653243(gch_50658_1689653243.tempstack, c0);
	}
	break;
	case ((Walkop50610) 0):
	{
		marks_68401_1689653243(gch_50658_1689653243, c0);
	}
	break;
	case ((Walkop50610) 1):
	{
		add_48193_1689653243(gch_50658_1689653243.tempstack, c0);
	}
	break;
	}
	}BeforeRet: ;
}

N_NIMCALL(void, nimGCvisit)(void* d0, NI op0) {
	dooperation_52618_1689653243(d0, ((Walkop50610) (op0)));
}
N_NIMCALL(void, TMP3)(void* p, NI op) {
	Exception* a;
	a = (Exception*)p;
	nimGCvisit((void*)(*a).parent, op);
	nimGCvisit((void*)(*a).message, op);
	nimGCvisit((void*)(*a).trace, op);
}
N_NIMCALL(void, TMP11)(void* p, NI op) {
	Ioerror3428* a;
	a = (Ioerror3428*)p;
	nimGCvisit((void*)(*a).parent, op);
	nimGCvisit((void*)(*a).message, op);
	nimGCvisit((void*)(*a).trace, op);
}

static N_INLINE(void, asgnRefNoCycle)(void** dest0, void* src0) {
	nimfr("asgnRefNoCycle", "gc.nim")
	nimln(271, "gc.nim");
	{
		nimln(343, "system.nim");
		if (!!((src0 == NIM_NIL))) goto LA3;
{		nimln(272, "gc.nim");
		Cell48106* c0 = usrtocell_52241_1689653243(src0);
		nimln(179, "gc.nim");
		(*c0).refcount += ((NI) 8);
}	}
	LA3: ;
	nimln(274, "gc.nim");
	{
		nimln(343, "system.nim");
		if (!!(((*dest0) == NIM_NIL))) goto LA7;
{		nimln(275, "gc.nim");
		Cell48106* c0 = usrtocell_52241_1689653243((*dest0));
		nimln(276, "gc.nim");
		{
			nimln(177, "gc.nim");
			(*c0).refcount -= ((NI) 8);
			nimln(178, "gc.nim");
			if (!((NU64)((*c0).refcount) < (NU64)(((NI) 8)))) goto LA11;
{			nimln(277, "gc.nim");
			rtladdzct_53401_1689653243(c0);
}		}
		LA11: ;
}	}
	LA7: ;
	nimln(278, "gc.nim");
	(*dest0) = src0;
	popFrame();
}

N_NIMCALL(void*, newObjRC1)(TNimType* typ0, NI size0) {
	void* result0;
	void* LOC1;
	nimfr("newObjRC1", "gc.nim")
	result0 = (void*)0;
	nimln(498, "gc.nim");
	collectct_52607_1689653243(gch_50658_1689653243);
	nimln(501, "gc.nim");
	LOC1 = (void*)0;
	LOC1 = rawalloc_37404_1689653243(gch_50658_1689653243.region, (NI)(size0 + ((NI)sizeof(Cell48106))));
	Cell48106* res0 = ((Cell48106*) (LOC1));
	nimln(505, "gc.nim");
	(*res0).typ = typ0;
	nimln(510, "gc.nim");
	(*res0).refcount = ((NI) 8);
	nimln(518, "gc.nim");
	result0 = celltousr_52223_1689653243(res0);
	nimln(519, "gc.nim");
	zeroMem(result0, ((NI) (size0)));
	popFrame();
	return result0;
}

N_NIMCALL(NimStringDesc*, copyStringRC1)(NimStringDesc* src0) {
	NimStringDesc* result0;
	result0 = (NimStringDesc*)0;
	{
		void* LOC9;
		if (!!((src0 == NIM_NIL))) goto LA3;
{		NI s0 = (*src0).len;
		{
			if (!(s0 < ((NI) 7))) goto LA7;
{			s0 = ((NI) 7);
}		}
		LA7: ;
		LOC9 = (void*)0;
		LOC9 = newObjRC1((&strdesc_12403_1689653243), (NI)((NI)(((NI)sizeof(TGenericSeq)) + s0) + ((NI) 1)));
		result0 = ((NimStringDesc*) (LOC9));
		(*result0).reserved = s0;
		(*result0).len = (*src0).len;
		memcpy(((NCSTRING) ((*result0).data)), ((NCSTRING) ((*src0).data)), (NI)((*src0).len + ((NI) 1)));
}	}
	LA3: ;
	return result0;
}

static N_INLINE(void, nimGCunrefNoCycle)(void* p0) {
	nimfr("nimGCunrefNoCycle", "gc.nim")
	nimln(253, "gc.nim");
	Cell48106* c0 = usrtocell_52241_1689653243(p0);
	nimln(255, "gc.nim");
	{
		nimln(177, "gc.nim");
		(*c0).refcount -= ((NI) 8);
		nimln(178, "gc.nim");
		if (!((NU64)((*c0).refcount) < (NU64)(((NI) 8)))) goto LA3;
{		nimln(256, "gc.nim");
		rtladdzct_53401_1689653243(c0);
}	}
	LA3: ;
	popFrame();
}

N_NOINLINE(NIM_BOOL, isobjslowpath_24136_1689653243)(TNimType* obj0, TNimType* subclass0, TNimType** cache0) {
	NIM_BOOL result0;
{	result0 = (NIM_BOOL)0;
	TNimType* x0 = (*obj0).base;
	{
		while (1) {
			if (!!((x0 == subclass0))) goto LA2;
			{
				if (!(x0 == NIM_NIL)) goto LA5;
{				cache0[(((NI) 0))- 0] = obj0;
				result0 = NIM_FALSE;
				goto BeforeRet;
}			}
			LA5: ;
			x0 = (*x0).base;
		} LA2: ;
	}
	cache0[(((NI) 1))- 0] = obj0;
	result0 = NIM_TRUE;
	goto BeforeRet;
	}BeforeRet: ;
	return result0;
}

static N_INLINE(NIM_BOOL, isObjWithCache)(TNimType* obj0, TNimType* subclass0, TNimType** cache0) {
	NIM_BOOL result0;
{	result0 = (NIM_BOOL)0;
	{
		if (!(obj0 == subclass0)) goto LA3;
{		result0 = NIM_TRUE;
		goto BeforeRet;
}	}
	LA3: ;
	{
		if (!((*obj0).base == subclass0)) goto LA7;
{		result0 = NIM_TRUE;
		goto BeforeRet;
}	}
	LA7: ;
	{
		if (!(cache0[(((NI) 0))- 0] == obj0)) goto LA11;
{		result0 = NIM_FALSE;
		goto BeforeRet;
}	}
	LA11: ;
	{
		if (!(cache0[(((NI) 1))- 0] == obj0)) goto LA15;
{		result0 = NIM_TRUE;
		goto BeforeRet;
}	}
	LA15: ;
	result0 = isobjslowpath_24136_1689653243(obj0, subclass0, cache0);
	goto BeforeRet;
	}BeforeRet: ;
	return result0;
}

static N_INLINE(void, incref_54219_1689653243)(Cell48106* c0) {
	nimfr("incRef", "gc.nim")
	nimln(223, "gc.nim");
	(*c0).refcount = (NI)((NU64)((*c0).refcount) + (NU64)(((NI) 8)));
	popFrame();
}

static N_INLINE(void, asgnRef)(void** dest0, void* src0) {
	nimfr("asgnRef", "gc.nim")
	nimln(264, "gc.nim");
	{
		nimln(343, "system.nim");
		if (!!((src0 == NIM_NIL))) goto LA3;
{		nimln(264, "gc.nim");
		incref_54219_1689653243(usrtocell_52241_1689653243(src0));
}	}
	LA3: ;
	nimln(265, "gc.nim");
	{
		nimln(343, "system.nim");
		if (!!(((*dest0) == NIM_NIL))) goto LA7;
{		nimln(265, "gc.nim");
		decref_53801_1689653243(usrtocell_52241_1689653243((*dest0)));
}	}
	LA7: ;
	nimln(266, "gc.nim");
	(*dest0) = src0;
	popFrame();
}

static N_INLINE(void, pushCurrentException)(Exception* e0) {
	asgnRef((void**) (&(*e0).parent), currexception_19639_1689653243);
	asgnRef((void**) (&currexception_19639_1689653243), e0);
}

N_NIMCALL(void, raiseexceptionaux_21201_1689653243)(Exception* e0) {
{	{
		if (!!((localraisehook_10018_1689653243 == NIM_NIL))) goto LA3;
{		{
			NIM_BOOL LOC7;
			LOC7 = (NIM_BOOL)0;
			LOC7 = localraisehook_10018_1689653243(e0);
			if (!!(LOC7)) goto LA8;
{			goto BeforeRet;
}		}
		LA8: ;
}	}
	LA3: ;
	{
		if (!!((globalraisehook_10013_1689653243 == NIM_NIL))) goto LA12;
{		{
			NIM_BOOL LOC16;
			LOC16 = (NIM_BOOL)0;
			LOC16 = globalraisehook_10013_1689653243(e0);
			if (!!(LOC16)) goto LA17;
{			goto BeforeRet;
}		}
		LA17: ;
}	}
	LA12: ;
	{
		if (!(isObjWithCache((*e0).m_type, (&NTI3450), Nim_OfCheck_CACHE1))) goto LA21;
{		showerrormessage_19606_1689653243((*e0).name);
		quitordebug_21013_1689653243();
}	}
	goto LA19;
	LA21: ;
	{
		pushCurrentException(e0);
		throw NimException(e0, e0->name);
	}
	LA19: ;
	}BeforeRet: ;
}

N_NIMCALL(void, raiseException)(Exception* e0, NCSTRING ename0) {
	NimStringDesc* LOC1;
	(*e0).name = ename0;
	LOC1 = (NimStringDesc*)0;
	LOC1 = (*e0).trace; (*e0).trace = copyStringRC1(((NimStringDesc*) &TMP4));
	if (LOC1) nimGCunrefNoCycle(LOC1);
	rawwritestacktrace_20601_1689653243((*e0).trace);
	raiseexceptionaux_21201_1689653243(e0);
}

static N_INLINE(void, sysfatal_15626_1689653243)(NimStringDesc* message0, NimStringDesc* arg0) {
	Ioerror3428* e0;
	NimStringDesc* LOC1;
	nimfr("sysFatal", "system.nim")
	e0 = (Ioerror3428*)0;
	nimln(2538, "system.nim");
	e0 = (Ioerror3428*) newObj((&NTI15635), sizeof(Ioerror3428));
	(*e0).m_type = (&NTI3428);
	nimln(2539, "system.nim");
	LOC1 = (NimStringDesc*)0;
	LOC1 = rawNewString(message0->len + arg0->len + 0);
appendString(LOC1, message0);
appendString(LOC1, arg0);
	asgnRefNoCycle((void**) (&(*e0).message), LOC1);
	nimln(2540, "system.nim");
	raiseException((Exception*)e0, "IOError");
	popFrame();
}
N_NIMCALL(void, TMP12)(void* p, NI op) {
	Reraiseerror3460* a;
	a = (Reraiseerror3460*)p;
	nimGCvisit((void*)(*a).parent, op);
	nimGCvisit((void*)(*a).message, op);
	nimGCvisit((void*)(*a).trace, op);
}

static N_INLINE(void, sysfatal_21618_1689653243)(NimStringDesc* message0) {
	Reraiseerror3460* e0;
	NimStringDesc* LOC1;
	nimfr("sysFatal", "system.nim")
	e0 = (Reraiseerror3460*)0;
	nimln(2532, "system.nim");
	e0 = (Reraiseerror3460*) newObj((&NTI21625), sizeof(Reraiseerror3460));
	(*e0).m_type = (&NTI3460);
	nimln(2533, "system.nim");
	LOC1 = (NimStringDesc*)0;
	LOC1 = (*e0).message; (*e0).message = copyStringRC1(message0);
	if (LOC1) nimGCunrefNoCycle(LOC1);
	nimln(2534, "system.nim");
	raiseException((Exception*)e0, "ReraiseError");
	popFrame();
}
N_NIMCALL(void, TMP13)(void* p, NI op) {
	Rangeerror3456* a;
	a = (Rangeerror3456*)p;
	nimGCvisit((void*)(*a).parent, op);
	nimGCvisit((void*)(*a).message, op);
	nimGCvisit((void*)(*a).trace, op);
}

static N_INLINE(void, sysfatal_23803_1689653243)(NimStringDesc* message0, NimStringDesc* arg0) {
	Rangeerror3456* e0;
	NimStringDesc* LOC1;
	nimfr("sysFatal", "system.nim")
	e0 = (Rangeerror3456*)0;
	nimln(2538, "system.nim");
	e0 = (Rangeerror3456*) newObj((&NTI23812), sizeof(Rangeerror3456));
	(*e0).m_type = (&NTI3456);
	nimln(2539, "system.nim");
	LOC1 = (NimStringDesc*)0;
	LOC1 = rawNewString(message0->len + arg0->len + 0);
appendString(LOC1, message0);
appendString(LOC1, arg0);
	asgnRefNoCycle((void**) (&(*e0).message), LOC1);
	nimln(2540, "system.nim");
	raiseException((Exception*)e0, "RangeError");
	popFrame();
}
N_NIMCALL(void, TMP14)(void* p, NI op) {
	Indexerror3452* a;
	a = (Indexerror3452*)p;
	nimGCvisit((void*)(*a).parent, op);
	nimGCvisit((void*)(*a).message, op);
	nimGCvisit((void*)(*a).trace, op);
}

static N_INLINE(void, sysfatal_23827_1689653243)(NimStringDesc* message0) {
	Indexerror3452* e0;
	NimStringDesc* LOC1;
	nimfr("sysFatal", "system.nim")
	e0 = (Indexerror3452*)0;
	nimln(2532, "system.nim");
	e0 = (Indexerror3452*) newObj((&NTI23834), sizeof(Indexerror3452));
	(*e0).m_type = (&NTI3452);
	nimln(2533, "system.nim");
	LOC1 = (NimStringDesc*)0;
	LOC1 = (*e0).message; (*e0).message = copyStringRC1(message0);
	if (LOC1) nimGCunrefNoCycle(LOC1);
	nimln(2534, "system.nim");
	raiseException((Exception*)e0, "IndexError");
	popFrame();
}
N_NIMCALL(void, TMP15)(void* p, NI op) {
	Fielderror3454* a;
	a = (Fielderror3454*)p;
	nimGCvisit((void*)(*a).parent, op);
	nimGCvisit((void*)(*a).message, op);
	nimGCvisit((void*)(*a).trace, op);
}

static N_INLINE(void, sysfatal_23850_1689653243)(NimStringDesc* message0, NimStringDesc* arg0) {
	Fielderror3454* e0;
	NimStringDesc* LOC1;
	nimfr("sysFatal", "system.nim")
	e0 = (Fielderror3454*)0;
	nimln(2538, "system.nim");
	e0 = (Fielderror3454*) newObj((&NTI23859), sizeof(Fielderror3454));
	(*e0).m_type = (&NTI3454);
	nimln(2539, "system.nim");
	LOC1 = (NimStringDesc*)0;
	LOC1 = rawNewString(message0->len + arg0->len + 0);
appendString(LOC1, message0);
appendString(LOC1, arg0);
	asgnRefNoCycle((void**) (&(*e0).message), LOC1);
	nimln(2540, "system.nim");
	raiseException((Exception*)e0, "FieldError");
	popFrame();
}
N_NIMCALL(void, TMP16)(void* p, NI op) {
	Valueerror3446* a;
	a = (Valueerror3446*)p;
	nimGCvisit((void*)(*a).parent, op);
	nimGCvisit((void*)(*a).message, op);
	nimGCvisit((void*)(*a).trace, op);
}

static N_INLINE(void, sysfatal_24018_1689653243)(NimStringDesc* message0) {
	Valueerror3446* e0;
	NimStringDesc* LOC1;
	nimfr("sysFatal", "system.nim")
	e0 = (Valueerror3446*)0;
	nimln(2532, "system.nim");
	e0 = (Valueerror3446*) newObj((&NTI24025), sizeof(Valueerror3446));
	(*e0).m_type = (&NTI3446);
	nimln(2533, "system.nim");
	LOC1 = (NimStringDesc*)0;
	LOC1 = (*e0).message; (*e0).message = copyStringRC1(message0);
	if (LOC1) nimGCunrefNoCycle(LOC1);
	nimln(2534, "system.nim");
	raiseException((Exception*)e0, "ValueError");
	popFrame();
}
N_NIMCALL(void, TMP17)(void* p, NI op) {
	Objectconversionerror3464* a;
	a = (Objectconversionerror3464*)p;
	nimGCvisit((void*)(*a).parent, op);
	nimGCvisit((void*)(*a).message, op);
	nimGCvisit((void*)(*a).trace, op);
}

static N_INLINE(void, sysfatal_24077_1689653243)(NimStringDesc* message0) {
	Objectconversionerror3464* e0;
	NimStringDesc* LOC1;
	nimfr("sysFatal", "system.nim")
	e0 = (Objectconversionerror3464*)0;
	nimln(2532, "system.nim");
	e0 = (Objectconversionerror3464*) newObj((&NTI24084), sizeof(Objectconversionerror3464));
	(*e0).m_type = (&NTI3464);
	nimln(2533, "system.nim");
	LOC1 = (NimStringDesc*)0;
	LOC1 = (*e0).message; (*e0).message = copyStringRC1(message0);
	if (LOC1) nimGCunrefNoCycle(LOC1);
	nimln(2534, "system.nim");
	raiseException((Exception*)e0, "ObjectConversionError");
	popFrame();
}
N_NIMCALL(void, TMP18)(void* p, NI op) {
	Objectassignmenterror3462* a;
	a = (Objectassignmenterror3462*)p;
	nimGCvisit((void*)(*a).parent, op);
	nimGCvisit((void*)(*a).message, op);
	nimGCvisit((void*)(*a).trace, op);
}

static N_INLINE(void, sysfatal_24113_1689653243)(NimStringDesc* message0) {
	Objectassignmenterror3462* e0;
	NimStringDesc* LOC1;
	nimfr("sysFatal", "system.nim")
	e0 = (Objectassignmenterror3462*)0;
	nimln(2532, "system.nim");
	e0 = (Objectassignmenterror3462*) newObj((&NTI24120), sizeof(Objectassignmenterror3462));
	(*e0).m_type = (&NTI3462);
	nimln(2533, "system.nim");
	LOC1 = (NimStringDesc*)0;
	LOC1 = (*e0).message; (*e0).message = copyStringRC1(message0);
	if (LOC1) nimGCunrefNoCycle(LOC1);
	nimln(2534, "system.nim");
	raiseException((Exception*)e0, "ObjectAssignmentError");
	popFrame();
}
N_NIMCALL(void, TMP19)(void* p, NI op) {
	Overflowerror3440* a;
	a = (Overflowerror3440*)p;
	nimGCvisit((void*)(*a).parent, op);
	nimGCvisit((void*)(*a).message, op);
	nimGCvisit((void*)(*a).trace, op);
}

static N_INLINE(void, sysfatal_24265_1689653243)(NimStringDesc* message0) {
	Overflowerror3440* e0;
	NimStringDesc* LOC1;
	nimfr("sysFatal", "system.nim")
	e0 = (Overflowerror3440*)0;
	nimln(2532, "system.nim");
	e0 = (Overflowerror3440*) newObj((&NTI24272), sizeof(Overflowerror3440));
	(*e0).m_type = (&NTI3440);
	nimln(2533, "system.nim");
	LOC1 = (NimStringDesc*)0;
	LOC1 = (*e0).message; (*e0).message = copyStringRC1(message0);
	if (LOC1) nimGCunrefNoCycle(LOC1);
	nimln(2534, "system.nim");
	raiseException((Exception*)e0, "OverflowError");
	popFrame();
}
N_NIMCALL(void, TMP20)(void* p, NI op) {
	Divbyzeroerror3438* a;
	a = (Divbyzeroerror3438*)p;
	nimGCvisit((void*)(*a).parent, op);
	nimGCvisit((void*)(*a).message, op);
	nimGCvisit((void*)(*a).trace, op);
}

static N_INLINE(void, sysfatal_24287_1689653243)(NimStringDesc* message0) {
	Divbyzeroerror3438* e0;
	NimStringDesc* LOC1;
	nimfr("sysFatal", "system.nim")
	e0 = (Divbyzeroerror3438*)0;
	nimln(2532, "system.nim");
	e0 = (Divbyzeroerror3438*) newObj((&NTI24294), sizeof(Divbyzeroerror3438));
	(*e0).m_type = (&NTI3438);
	nimln(2533, "system.nim");
	LOC1 = (NimStringDesc*)0;
	LOC1 = (*e0).message; (*e0).message = copyStringRC1(message0);
	if (LOC1) nimGCunrefNoCycle(LOC1);
	nimln(2534, "system.nim");
	raiseException((Exception*)e0, "DivByZeroError");
	popFrame();
}
N_NIMCALL(void, TMP21)(void* p, NI op) {
	Floatinvalidoperror3468* a;
	a = (Floatinvalidoperror3468*)p;
	nimGCvisit((void*)(*a).parent, op);
	nimGCvisit((void*)(*a).message, op);
	nimGCvisit((void*)(*a).trace, op);
}

static N_INLINE(void, sysfatal_26423_1689653243)(NimStringDesc* message0) {
	Floatinvalidoperror3468* e0;
	NimStringDesc* LOC1;
	nimfr("sysFatal", "system.nim")
	e0 = (Floatinvalidoperror3468*)0;
	nimln(2532, "system.nim");
	e0 = (Floatinvalidoperror3468*) newObj((&NTI26430), sizeof(Floatinvalidoperror3468));
	(*e0).m_type = (&NTI3468);
	nimln(2533, "system.nim");
	LOC1 = (NimStringDesc*)0;
	LOC1 = (*e0).message; (*e0).message = copyStringRC1(message0);
	if (LOC1) nimGCunrefNoCycle(LOC1);
	nimln(2534, "system.nim");
	raiseException((Exception*)e0, "FloatInvalidOpError");
	popFrame();
}
N_NIMCALL(void, TMP22)(void* p, NI op) {
	Floatoverflowerror3472* a;
	a = (Floatoverflowerror3472*)p;
	nimGCvisit((void*)(*a).parent, op);
	nimGCvisit((void*)(*a).message, op);
	nimGCvisit((void*)(*a).trace, op);
}

static N_INLINE(void, sysfatal_26449_1689653243)(NimStringDesc* message0) {
	Floatoverflowerror3472* e0;
	NimStringDesc* LOC1;
	nimfr("sysFatal", "system.nim")
	e0 = (Floatoverflowerror3472*)0;
	nimln(2532, "system.nim");
	e0 = (Floatoverflowerror3472*) newObj((&NTI26456), sizeof(Floatoverflowerror3472));
	(*e0).m_type = (&NTI3472);
	nimln(2533, "system.nim");
	LOC1 = (NimStringDesc*)0;
	LOC1 = (*e0).message; (*e0).message = copyStringRC1(message0);
	if (LOC1) nimGCunrefNoCycle(LOC1);
	nimln(2534, "system.nim");
	raiseException((Exception*)e0, "FloatOverflowError");
	popFrame();
}
N_NIMCALL(void, TMP23)(void* p, NI op) {
	Floatunderflowerror3474* a;
	a = (Floatunderflowerror3474*)p;
	nimGCvisit((void*)(*a).parent, op);
	nimGCvisit((void*)(*a).message, op);
	nimGCvisit((void*)(*a).trace, op);
}

static N_INLINE(void, sysfatal_26468_1689653243)(NimStringDesc* message0) {
	Floatunderflowerror3474* e0;
	NimStringDesc* LOC1;
	nimfr("sysFatal", "system.nim")
	e0 = (Floatunderflowerror3474*)0;
	nimln(2532, "system.nim");
	e0 = (Floatunderflowerror3474*) newObj((&NTI26475), sizeof(Floatunderflowerror3474));
	(*e0).m_type = (&NTI3474);
	nimln(2533, "system.nim");
	LOC1 = (NimStringDesc*)0;
	LOC1 = (*e0).message; (*e0).message = copyStringRC1(message0);
	if (LOC1) nimGCunrefNoCycle(LOC1);
	nimln(2534, "system.nim");
	raiseException((Exception*)e0, "FloatUnderflowError");
	popFrame();
}

N_NIMCALL(NIM_BOOL, contains_33811_1689653243)(Bigchunk30242* list0, Bigchunk30242* x0) {
	NIM_BOOL result0;
	nimfr("contains", "alloc.nim")
{	result0 = (NIM_BOOL)0;
	nimln(320, "alloc.nim");
	Bigchunk30242* it0 = list0;
	{
		nimln(321, "alloc.nim");
		while (1) {
			nimln(343, "system.nim");
			if (!!((it0 == NIM_NIL))) goto LA2;
			nimln(322, "alloc.nim");
			{
				if (!(it0 == x0)) goto LA5;
{				result0 = NIM_TRUE;
				goto BeforeRet;
}			}
			LA5: ;
			nimln(323, "alloc.nim");
			it0 = (*it0).next;
		} LA2: ;
	}
	}BeforeRet: ;
	popFrame();
	return result0;
}

N_NIMCALL(NIM_BOOL, contains_38425_1689653243)(Smallchunk30240* list0, Smallchunk30240* x0) {
	NIM_BOOL result0;
	nimfr("contains", "alloc.nim")
{	result0 = (NIM_BOOL)0;
	nimln(320, "alloc.nim");
	Smallchunk30240* it0 = list0;
	{
		nimln(321, "alloc.nim");
		while (1) {
			nimln(343, "system.nim");
			if (!!((it0 == NIM_NIL))) goto LA2;
			nimln(322, "alloc.nim");
			{
				if (!(it0 == x0)) goto LA5;
{				result0 = NIM_TRUE;
				goto BeforeRet;
}			}
			LA5: ;
			nimln(323, "alloc.nim");
			it0 = (*it0).next;
		} LA2: ;
	}
	}BeforeRet: ;
	popFrame();
	return result0;
}

static N_INLINE(void, sysfatal_81472_1689653243)(NimStringDesc* message0) {
	Ioerror3428* e0;
	NimStringDesc* LOC1;
	nimfr("sysFatal", "system.nim")
	e0 = (Ioerror3428*)0;
	nimln(2532, "system.nim");
	e0 = (Ioerror3428*) newObj((&NTI15635), sizeof(Ioerror3428));
	(*e0).m_type = (&NTI3428);
	nimln(2533, "system.nim");
	LOC1 = (NimStringDesc*)0;
	LOC1 = (*e0).message; (*e0).message = copyStringRC1(message0);
	if (LOC1) nimGCunrefNoCycle(LOC1);
	nimln(2534, "system.nim");
	raiseException((Exception*)e0, "IOError");
	popFrame();
}

static N_INLINE(void, sysfatal_86903_1689653243)(NimStringDesc* message0) {
	Fielderror3454* e0;
	NimStringDesc* LOC1;
	nimfr("sysFatal", "system.nim")
	e0 = (Fielderror3454*)0;
	nimln(2532, "system.nim");
	e0 = (Fielderror3454*) newObj((&NTI23859), sizeof(Fielderror3454));
	(*e0).m_type = (&NTI3454);
	nimln(2533, "system.nim");
	LOC1 = (NimStringDesc*)0;
	LOC1 = (*e0).message; (*e0).message = copyStringRC1(message0);
	if (LOC1) nimGCunrefNoCycle(LOC1);
	nimln(2534, "system.nim");
	raiseException((Exception*)e0, "FieldError");
	popFrame();
}

N_NIMCALL(void, init_48213_1689653243)(Cellseq48122& s0, NI cap0) {
	void* LOC1;
	nimfr("init", "cellsets.nim")
	nimln(64, "cellsets.nim");
	s0.len = ((NI) 0);
	nimln(65, "cellsets.nim");
	s0.cap = cap0;
	nimln(66, "cellsets.nim");
	LOC1 = (void*)0;
	LOC1 = alloc0_7417_1689653243(((NI) ((NI)(cap0 * ((NI) 8)))));
	s0.d = ((Cell48106**) (LOC1));
	popFrame();
}

N_NIMCALL(void, initgc_11601_1689653243)(void) {
	nimfr("initGC", "gc.nim")
	nimln(300, "gc.nim");
	gch_50658_1689653243.cyclethreshold = ((NI) 4194304);
	nimln(301, "gc.nim");
	gch_50658_1689653243.stat.stackscans = ((NI) 0);
	nimln(302, "gc.nim");
	gch_50658_1689653243.stat.cyclecollections = ((NI) 0);
	nimln(303, "gc.nim");
	gch_50658_1689653243.stat.maxthreshold = ((NI) 0);
	nimln(304, "gc.nim");
	gch_50658_1689653243.stat.maxstacksize = ((NI) 0);
	nimln(305, "gc.nim");
	gch_50658_1689653243.stat.maxstackcells = ((NI) 0);
	nimln(306, "gc.nim");
	gch_50658_1689653243.stat.cycletablesize = ((NI) 0);
	nimln(308, "gc.nim");
	init_48213_1689653243(gch_50658_1689653243.zct, ((NI) 1024));
	nimln(309, "gc.nim");
	init_48213_1689653243(gch_50658_1689653243.tempstack, ((NI) 1024));
	nimln(310, "gc.nim");
	init_48213_1689653243(gch_50658_1689653243.decstack, ((NI) 1024));
	nimln(312, "gc.nim");
	init_48228_1689653243(gch_50658_1689653243.marked);
	nimln(313, "gc.nim");
	init_48213_1689653243(gch_50658_1689653243.additionalroots, ((NI) 1024));
	popFrame();
}

static N_INLINE(void, initallocator_11801_1689653243)(void) {
	bottom_30321_1689653243 = (&bottomdata_30320_1689653243);
	(*bottom_30321_1689653243).link[(((NI) 0))- 0] = bottom_30321_1689653243;
	(*bottom_30321_1689653243).link[(((NI) 1))- 0] = bottom_30321_1689653243;
}

N_NOINLINE(void, setStackBottom)(void* thestackbottom0) {
	{
		if (!(gch_50658_1689653243.stackbottom == NIM_NIL)) goto LA3;
{		gch_50658_1689653243.stackbottom = thestackbottom0;
}	}
	goto LA1;
	LA3: ;
	{
		NI a0 = ((NI) (thestackbottom0));
		NI b0 = ((NI) (gch_50658_1689653243.stackbottom));
		gch_50658_1689653243.stackbottom = ((void*) (((a0 >= b0) ? a0 : b0)));
	}
	LA1: ;
}

static N_INLINE(void, initStackBottom)(void) {
	void* volatile locals0;
	locals0 = (void*)0;
	locals0 = ((void*) ((&locals0)));
	setStackBottom(locals0);
}

static N_INLINE(void, initStackBottomWith)(void* locals0) {
	setStackBottom(locals0);
}

N_NIMCALL(NI, cmp_5483_1689653243)(NimStringDesc* x0, NimStringDesc* y0) {
	NI result0;
	int LOC1;
	result0 = (NI)0;
	LOC1 = (int)0;
	LOC1 = strcmp(x0->data, y0->data);
	result0 = ((NI) (LOC1));
	return result0;
}

N_NIMCALL(NIM_BOOL, open_15603_1689653243)(FILE*& f0, NimStringDesc* filename0, Filemode12409 mode0, NI bufsize0) {
	NIM_BOOL result0;
	nimfr("open", "sysio.nim")
{	result0 = (NIM_BOOL)0;
	nimln(290, "sysio.nim");
	void* p0 = fopen(filename0->data, Formatopen_84210_1689653243[(mode0)- 0]->data);
	nimln(291, "sysio.nim");
	{
		struct stat res0;
		nimln(343, "system.nim");
		if (!!((p0 == NIM_NIL))) goto LA3;
{		nimln(296, "sysio.nim");
		FILE* f20 = ((FILE*) (p0));
		memset((void*)(&res0), 0, sizeof(res0));
		nimln(298, "sysio.nim");
		{
			NIM_BOOL LOC7;
			int LOC8;
			LOC7 = (NIM_BOOL)0;
			nimln(347, "system.nim");
			nimln(298, "sysio.nim");
			LOC8 = (int)0;
			LOC8 = fstat(fileno(f20), (&res0));
			LOC7 = (((NI32) 0) <= LOC8);
			if (!(LOC7)) goto LA9;
			LOC7 = S_ISDIR(res0.st_mode);
			LA9: ;
			if (!LOC7) goto LA10;
{			nimln(299, "sysio.nim");
			fclose(f20);
			nimln(300, "sysio.nim");
			result0 = NIM_FALSE;
			goto BeforeRet;
}		}
		LA10: ;
		nimln(301, "sysio.nim");
		result0 = NIM_TRUE;
		nimln(302, "sysio.nim");
		f0 = ((FILE*) (p0));
		nimln(303, "sysio.nim");
		{
			NIM_BOOL LOC14;
			int LOC18;
			LOC14 = (NIM_BOOL)0;
			nimln(351, "system.nim");
			LOC14 = (((NI) 0) < bufsize0);
			if (!(LOC14)) goto LA15;
			nimln(303, "sysio.nim");
			LOC14 = (bufsize0 <= ((NI) 2147483647));
			LA15: ;
			if (!LOC14) goto LA16;
{			nimln(304, "sysio.nim");
			LOC18 = (int)0;
			LOC18 = setvbuf(f0, NIM_NIL, _IOFBF, ((int) (bufsize0)));
}		}
		goto LA12;
		LA16: ;
		{
			int LOC22;
			nimln(305, "sysio.nim");
			if (!(bufsize0 == ((NI) 0))) goto LA20;
{			nimln(306, "sysio.nim");
			LOC22 = (int)0;
			LOC22 = setvbuf(f0, NIM_NIL, _IONBF, ((int) 0));
}		}
		goto LA12;
		LA20: ;
		LA12: ;
}	}
	LA3: ;
	}BeforeRet: ;
	popFrame();
	return result0;
}

N_NIMCALL(NIM_BOOL, open_15611_1689653243)(FILE*& f0, int filehandle0, Filemode12409 mode0) {
	NIM_BOOL result0;
	nimfr("open", "sysio.nim")
	result0 = (NIM_BOOL)0;
	nimln(316, "sysio.nim");
	f0 = fdopen(filehandle0, Formatopen_84210_1689653243[(mode0)- 0]->data);
	nimln(317, "sysio.nim");
	nimln(343, "system.nim");
	result0 = !((f0 == NIM_NIL));
	popFrame();
	return result0;
}

N_NIMCALL(FILE*, open_15617_1689653243)(NimStringDesc* filename0, Filemode12409 mode0, NI bufsize0) {
	FILE* result0;
	result0 = (FILE*)0;
	{
		NIM_BOOL LOC3;
		LOC3 = (NIM_BOOL)0;
		LOC3 = open_15603_1689653243(result0, filename0, mode0, bufsize0);
		if (!!(LOC3)) goto LA4;
{		sysfatal_15626_1689653243(((NimStringDesc*) &TMP29), filename0);
}	}
	LA4: ;
	return result0;
}

N_NIMCALL(NIM_BOOL, reopen_15646_1689653243)(FILE* f0, NimStringDesc* filename0, Filemode12409 mode0) {
	NIM_BOOL result0;
	FILE* LOC1;
	nimfr("reopen", "sysio.nim")
	result0 = (NIM_BOOL)0;
	nimln(309, "sysio.nim");
	LOC1 = (FILE*)0;
	LOC1 = freopen(filename0->data, Formatopen_84210_1689653243[(mode0)- 0]->data, f0);
	void* p0 = ((void*) (LOC1));
	nimln(310, "sysio.nim");
	nimln(343, "system.nim");
	result0 = !((p0 == NIM_NIL));
	popFrame();
	return result0;
}

N_NIMCALL(NIM_BOOL, endoffile_15654_1689653243)(FILE* f0) {
	NIM_BOOL result0;
	nimfr("endOfFile", "sysio.nim")
{	result0 = (NIM_BOOL)0;
	nimln(188, "sysio.nim");
	int c0 = fgetc(f0);
	nimln(189, "sysio.nim");
	ungetc(c0, f0);
	nimln(190, "sysio.nim");
	result0 = (c0 < ((NI32) 0));
	goto BeforeRet;
	}BeforeRet: ;
	popFrame();
	return result0;
}

N_NIMCALL(NI, rawfilesize_82266_1689653243)(FILE* file0) {
	NI result0;
	NI LOC1;
	NI LOC2;
	nimfr("rawFileSize", "sysio.nim")
	result0 = (NI)0;
	nimln(181, "sysio.nim");
	NI oldpos0 = ftell(file0);
	nimln(182, "sysio.nim");
	LOC1 = (NI)0;
	LOC1 = fseek(file0, ((NI) 0), ((NI) 2));
	nimln(183, "sysio.nim");
	result0 = ftell(file0);
	nimln(184, "sysio.nim");
	LOC2 = (NI)0;
	LOC2 = fseek(file0, oldpos0, ((NI) 0));
	popFrame();
	return result0;
}

N_NIMCALL(NI, readbuffer_15754_1689653243)(FILE* f0, void* buffer0, NI len0) {
	NI result0;
	result0 = (NI)0;
	result0 = fread(buffer0, ((NI) 1), ((NI) (len0)), f0);
	return result0;
}

N_NOINLINE(void, raiseeio_81467_1689653243)(NimStringDesc* msg0) {
	nimfr("raiseEIO", "sysio.nim")
	nimln(51, "sysio.nim");
	sysfatal_81472_1689653243(msg0);
	popFrame();
}

N_NIMCALL(NimStringDesc*, readallbuffer_82258_1689653243)(FILE* file0) {
	NimStringDesc* result0;
	NimStringDesc* buffer0;
	nimfr("readAllBuffer", "sysio.nim")
	result0 = (NimStringDesc*)0;
	nimln(168, "sysio.nim");
	result0 = copyString(((NimStringDesc*) &TMP4));
	nimln(169, "sysio.nim");
	buffer0 = mnewString(((NI) 4000));
	{
		nimln(170, "sysio.nim");
		while (1) {
			nimln(171, "sysio.nim");
			NI bytesread0 = readbuffer_15754_1689653243(file0, ((void*) ((&buffer0->data[((NI) 0)]))), ((NI) 4000));
			nimln(172, "sysio.nim");
			{
				if (!(bytesread0 == ((NI) 4000))) goto LA5;
{				nimln(173, "sysio.nim");
				result0 = resizeString(result0, buffer0->len + 0);
appendString(result0, buffer0);
}			}
			goto LA3;
			LA5: ;
			{
				nimln(175, "sysio.nim");
				buffer0 = setLengthStr(buffer0, ((NI) (bytesread0)));
				nimln(176, "sysio.nim");
				result0 = resizeString(result0, buffer0->len + 0);
appendString(result0, buffer0);
				nimln(177, "sysio.nim");
				goto LA1;
			}
			LA3: ;
		}
	} LA1: ;
	popFrame();
	return result0;
}

N_NIMCALL(NimStringDesc*, readallfile_82277_1689653243)(FILE* file0, NI len0) {
	NimStringDesc* result0;
	nimfr("readAllFile", "sysio.nim")
	result0 = (NimStringDesc*)0;
	nimln(195, "sysio.nim");
	result0 = mnewString(((NI) (len0)));
	nimln(196, "sysio.nim");
	NI bytes0 = readbuffer_15754_1689653243(file0, ((void*) ((&result0->data[((NI) 0)]))), ((NI) (len0)));
	nimln(197, "sysio.nim");
	{
		if (!endoffile_15654_1689653243(file0)) goto LA3;
{		nimln(198, "sysio.nim");
		{
			if (!(bytes0 < len0)) goto LA7;
{			nimln(199, "sysio.nim");
			result0 = setLengthStr(result0, ((NI) (bytes0)));
}		}
		LA7: ;
}	}
	goto LA1;
	LA3: ;
	{
		NI LOC10;
		nimln(343, "system.nim");
		nimln(200, "sysio.nim");
		LOC10 = (NI)0;
		LOC10 = ferror(file0);
		if (!!((LOC10 == ((NI) 0)))) goto LA11;
{		nimln(201, "sysio.nim");
		raiseeio_81467_1689653243(((NimStringDesc*) &TMP30));
}	}
	goto LA1;
	LA11: ;
	{
		NimStringDesc* LOC14;
		nimln(205, "sysio.nim");
		LOC14 = (NimStringDesc*)0;
		LOC14 = readallbuffer_82258_1689653243(file0);
		result0 = resizeString(result0, LOC14->len + 0);
appendString(result0, LOC14);
	}
	LA1: ;
	popFrame();
	return result0;
}

N_NIMCALL(NimStringDesc*, readall_15663_1689653243)(FILE* file0) {
	NimStringDesc* result0;
	NI LOC1;
	nimfr("readAll", "sysio.nim")
	result0 = (NimStringDesc*)0;
	nimln(215, "sysio.nim");
	LOC1 = (NI)0;
	{
		nimln(343, "system.nim");
		if (!!((file0 == stdin))) goto LA4;
{		nimln(215, "sysio.nim");
		LOC1 = rawfilesize_82266_1689653243(file0);
}	}
	goto LA2;
	LA4: ;
	{
		LOC1 = ((NI) -1);
	}
	LA2: ;
	NI len0 = LOC1;
	nimln(218, "sysio.nim");
	{
		nimln(351, "system.nim");
		if (!(((NI) 0) < len0)) goto LA9;
{		nimln(219, "sysio.nim");
		result0 = readallfile_82277_1689653243(file0, len0);
}	}
	goto LA7;
	LA9: ;
	{
		nimln(221, "sysio.nim");
		result0 = readallbuffer_82258_1689653243(file0);
	}
	LA7: ;
	popFrame();
	return result0;
}

static N_INLINE(void, setFrame)(TFrame* s0) {
	frameptr_19636_1689653243 = s0;
}

N_NIMCALL(NimStringDesc*, readfile_15666_1689653243)(NimStringDesc* filename0) {
	NimStringDesc* result0;
	FILE* f0;
	nimfr("readFile", "sysio.nim")
	result0 = (NimStringDesc*)0;
	f0 = (FILE*)0;
	nimln(339, "sysio.nim");
	{
		if (!open_15603_1689653243(f0, filename0, ((Filemode12409) 0), ((NI) -1))) goto LA3;
{		nimln(340, "sysio.nim");
		try {
			nimln(341, "sysio.nim");
			result0 = readall_15663_1689653243(f0);
		} catch (NimException& TMP31) {
		setFrame((TFrame*)&FR);
		{
			nimln(343, "sysio.nim");
			fclose(f0);
			throw;
		}
		}
		{
			fclose(f0);
		}
}	}
	goto LA1;
	LA3: ;
	{
		nimln(345, "sysio.nim");
		sysfatal_15626_1689653243(((NimStringDesc*) &TMP29), filename0);
	}
	LA1: ;
	popFrame();
	return result0;
}

N_NIMCALL(NI, writebuffer_15776_1689653243)(FILE* f0, void* buffer0, NI len0) {
	NI result0;
	result0 = (NI)0;
	result0 = fwrite(buffer0, ((NI) 1), ((NI) (len0)), f0);
	return result0;
}

N_NIMCALL(void, write_15689_1689653243)(FILE* f0, NimStringDesc* s0) {
	{
		NI LOC3;
		LOC3 = (NI)0;
		LOC3 = writebuffer_15776_1689653243(f0, ((void*) (s0->data)), ((NI) ((s0 ? s0->len : 0))));
		if (!!((LOC3 == (s0 ? s0->len : 0)))) goto LA4;
{		raiseeio_81467_1689653243(((NimStringDesc*) &TMP33));
}	}
	LA4: ;
}

N_NIMCALL(void, writefile_15669_1689653243)(NimStringDesc* filename0, NimStringDesc* content0) {
	FILE* f0;
	nimfr("writeFile", "sysio.nim")
	f0 = (FILE*)0;
	nimln(349, "sysio.nim");
	{
		if (!open_15603_1689653243(f0, filename0, ((Filemode12409) 1), ((NI) -1))) goto LA3;
{		nimln(350, "sysio.nim");
		try {
			nimln(351, "sysio.nim");
			write_15689_1689653243(f0, content0);
		} catch (NimException& TMP32) {
		setFrame((TFrame*)&FR);
		{
			nimln(353, "sysio.nim");
			fclose(f0);
			throw;
		}
		}
		{
			fclose(f0);
		}
}	}
	goto LA1;
	LA3: ;
	{
		nimln(355, "sysio.nim");
		sysfatal_15626_1689653243(((NimStringDesc*) &TMP29), filename0);
	}
	LA1: ;
	popFrame();
}

N_NIMCALL(void, write_15673_1689653243)(FILE* f0, NF32 r0) {
	nimfr("write", "sysio.nim")
	nimln(158, "sysio.nim");
	fprintf(f0, "%g", r0);
	popFrame();
}

N_NIMCALL(void, write_15677_1689653243)(FILE* f0, NI i0) {
	nimfr("write", "sysio.nim")
	nimln(145, "sysio.nim");
	fprintf(f0, "%lld", i0);
	popFrame();
}

N_NIMCALL(void, write_15681_1689653243)(FILE* f0, NI64 i0) {
	nimfr("write", "sysio.nim")
	nimln(151, "sysio.nim");
	fprintf(f0, "%lld", i0);
	popFrame();
}

N_NIMCALL(void, write_15685_1689653243)(FILE* f0, NF r0) {
	nimfr("write", "sysio.nim")
	nimln(159, "sysio.nim");
	fprintf(f0, "%g", r0);
	popFrame();
}

N_NIMCALL(void, write_15693_1689653243)(FILE* f0, NIM_BOOL b0) {
	nimfr("write", "sysio.nim")
	nimln(156, "sysio.nim");
	{
		if (!b0) goto LA3;
{		write_15689_1689653243(f0, ((NimStringDesc*) &TMP34));
}	}
	goto LA1;
	LA3: ;
	{
		nimln(157, "sysio.nim");
		write_15689_1689653243(f0, ((NimStringDesc*) &TMP35));
	}
	LA1: ;
	popFrame();
}

N_NIMCALL(void, write_15697_1689653243)(FILE* f0, NIM_CHAR c0) {
	nimfr("write", "sysio.nim")
	nimln(161, "sysio.nim");
	putc(c0, f0);
	popFrame();
}

N_NIMCALL(void, write_15705_1689653243)(FILE* f0, NimStringDesc** a0, NI a0Len0) {
	nimfr("write", "sysio.nim")
	{
		NimStringDesc* x_82251_1689653243;
		x_82251_1689653243 = (NimStringDesc*)0;
		nimln(1966, "system.nim");
		NI i_82257_1689653243 = ((NI) 0);
		{
			nimln(1967, "system.nim");
			while (1) {
				if (!(i_82257_1689653243 < a0Len0)) goto LA3;
				nimln(1968, "system.nim");
				x_82251_1689653243 = a0[i_82257_1689653243];
				nimln(163, "sysio.nim");
				write_15689_1689653243(f0, x_82251_1689653243);
				nimln(1969, "system.nim");
				i_82257_1689653243 += ((NI) 1);
			} LA3: ;
		}
	}
	popFrame();
}

N_NIMCALL(NIM_BOOL, readline_15713_1689653243)(FILE* f0, NimStringDesc*& line0) {
	NIM_BOOL result0;
	nimfr("readLine", "sysio.nim")
{	result0 = (NIM_BOOL)0;
	nimln(101, "sysio.nim");
	NI pos0 = ((NI) 0);
	nimln(106, "sysio.nim");
	nimln(380, "system.nim");
	NI space0 = (NI)((*((TGenericSeq*) (line0))).reserved & ((NI) IL64(9223372036854775807)));
	nimln(107, "sysio.nim");
	line0 = setLengthStr(line0, ((NI) (space0)));
	{
		nimln(109, "sysio.nim");
		while (1) {
			nimln(112, "sysio.nim");
			memset(((void*) ((&line0->data[pos0]))), ((int) 10), space0);
			nimln(113, "sysio.nim");
			{
				NCSTRING LOC5;
				LOC5 = (NCSTRING)0;
				LOC5 = fgets(((NCSTRING) ((&line0->data[pos0]))), space0, f0);
				if (!(((void*) (LOC5)) == NIM_NIL)) goto LA6;
{				nimln(114, "sysio.nim");
				line0 = setLengthStr(line0, ((NI) 0));
				nimln(115, "sysio.nim");
				result0 = NIM_FALSE;
				goto BeforeRet;
}			}
			LA6: ;
			nimln(116, "sysio.nim");
			void* m0 = memchr(((void*) ((&line0->data[pos0]))), ((int) 10), space0);
			nimln(117, "sysio.nim");
			{
				nimln(343, "system.nim");
				if (!!((m0 == NIM_NIL))) goto LA10;
{				nimln(119, "sysio.nim");
				NI last0 = (NI)(((NI) (m0)) - ((NI) ((&line0->data[((NI) 0)]))));
				nimln(120, "sysio.nim");
				{
					NIM_BOOL LOC14;
					LOC14 = (NIM_BOOL)0;
					nimln(351, "system.nim");
					LOC14 = (((NI) 0) < last0);
					if (!(LOC14)) goto LA15;
					nimln(120, "sysio.nim");
					LOC14 = ((NU8)(line0->data[(NI)(last0 - ((NI) 1))]) == (NU8)(13));
					LA15: ;
					if (!LOC14) goto LA16;
{					nimln(121, "sysio.nim");
					line0 = setLengthStr(line0, ((NI) ((NI)(last0 - ((NI) 1)))));
					nimln(122, "sysio.nim");
					result0 = NIM_TRUE;
					goto BeforeRet;
}				}
				goto LA12;
				LA16: ;
				{
					NIM_BOOL LOC19;
					nimln(126, "sysio.nim");
					LOC19 = (NIM_BOOL)0;
					nimln(351, "system.nim");
					LOC19 = (((NI) 0) < last0);
					if (!(LOC19)) goto LA20;
					nimln(126, "sysio.nim");
					LOC19 = ((NU8)(line0->data[(NI)(last0 - ((NI) 1))]) == (NU8)(0));
					LA20: ;
					if (!LOC19) goto LA21;
{					nimln(127, "sysio.nim");
					{
						NIM_BOOL LOC25;
						LOC25 = (NIM_BOOL)0;
						LOC25 = (last0 < (NI)((NI)(pos0 + space0) - ((NI) 1)));
						if (!(LOC25)) goto LA26;
						nimln(343, "system.nim");
						nimln(127, "sysio.nim");
						LOC25 = !(((NU8)(line0->data[(NI)(last0 + ((NI) 1))]) == (NU8)(0)));
						LA26: ;
						if (!LOC25) goto LA27;
{						nimln(128, "sysio.nim");
						last0 -= ((NI) 1);
}					}
					LA27: ;
}				}
				goto LA12;
				LA21: ;
				LA12: ;
				nimln(129, "sysio.nim");
				line0 = setLengthStr(line0, ((NI) (last0)));
				nimln(130, "sysio.nim");
				result0 = NIM_TRUE;
				goto BeforeRet;
}			}
			goto LA8;
			LA10: ;
			{
				nimln(133, "sysio.nim");
				space0 -= ((NI) 1);
			}
			LA8: ;
			nimln(135, "sysio.nim");
			pos0 += space0;
			nimln(136, "sysio.nim");
			space0 = ((NI) 128);
			nimln(137, "sysio.nim");
			line0 = setLengthStr(line0, ((NI) ((NI)(pos0 + space0))));
		}
	}
	}BeforeRet: ;
	popFrame();
	return result0;
}

N_NIMCALL(NimStringDesc*, readline_15710_1689653243)(FILE* f0) {
	NimStringDesc* result0;
	nimfr("readLine", "sysio.nim")
	result0 = (NimStringDesc*)0;
	nimln(140, "sysio.nim");
	result0 = rawNewString(((NI) 80));
	nimln(141, "sysio.nim");
	{
		NIM_BOOL LOC3;
		LOC3 = (NIM_BOOL)0;
		LOC3 = readline_15713_1689653243(f0, result0);
		if (!!(LOC3)) goto LA4;
{		raiseeio_81467_1689653243(((NimStringDesc*) &TMP36));
}	}
	LA4: ;
	popFrame();
	return result0;
}

N_NIMCALL(NI64, getfilepos_15785_1689653243)(FILE* f0) {
	NI64 result0;
	NI LOC1;
	nimfr("getFilePos", "sysio.nim")
	result0 = (NI64)0;
	nimln(324, "sysio.nim");
	LOC1 = (NI)0;
	LOC1 = ftell(f0);
	result0 = ((NI64) (LOC1));
	nimln(325, "sysio.nim");
	{
		if (!(result0 < IL64(0))) goto LA4;
{		raiseeio_81467_1689653243(((NimStringDesc*) &TMP37));
}	}
	LA4: ;
	popFrame();
	return result0;
}

N_NIMCALL(void, setfilepos_15781_1689653243)(FILE* f0, NI64 pos0) {
	nimfr("setFilePos", "sysio.nim")
	nimln(320, "sysio.nim");
	{
		NI LOC3;
		nimln(343, "system.nim");
		nimln(320, "sysio.nim");
		LOC3 = (NI)0;
		LOC3 = fseek(f0, ((long) (pos0)), ((NI) 0));
		if (!!((LOC3 == ((NI) 0)))) goto LA4;
{		nimln(321, "sysio.nim");
		raiseeio_81467_1689653243(((NimStringDesc*) &TMP38));
}	}
	LA4: ;
	popFrame();
}

N_NIMCALL(NI64, getfilesize_15732_1689653243)(FILE* f0) {
	NI64 result0;
	NI LOC1;
	nimfr("getFileSize", "sysio.nim")
	result0 = (NI64)0;
	nimln(328, "sysio.nim");
	NI64 oldpos0 = getfilepos_15785_1689653243(f0);
	nimln(329, "sysio.nim");
	LOC1 = (NI)0;
	LOC1 = fseek(f0, ((NI) 0), ((NI) 2));
	nimln(330, "sysio.nim");
	result0 = getfilepos_15785_1689653243(f0);
	nimln(331, "sysio.nim");
	setfilepos_15781_1689653243(f0, oldpos0);
	popFrame();
	return result0;
}

N_NIMCALL(NI, readchars_15746_1689653243)(FILE* f0, NIM_CHAR* a0, NI a0Len0, NI start0, NI len0) {
	NI result0;
	result0 = (NI)0;
	{
		if (!(a0Len0 < ((NI) ((NI)(((NI) (start0)) + ((NI) (len0))))))) goto LA3;
{		raiseeio_81467_1689653243(((NimStringDesc*) &TMP39));
}	}
	LA3: ;
	result0 = readbuffer_15754_1689653243(f0, ((void*) ((&a0[start0]))), len0);
	return result0;
}

N_NIMCALL(NI, writechars_15769_1689653243)(FILE* f0, NIM_CHAR* a0, NI a0Len0, NI start0, NI len0) {
	NI result0;
	result0 = (NI)0;
	NI8* x0 = ((NI8*) (a0));
	result0 = writebuffer_15776_1689653243(f0, ((void*) ((&x0[(start0)- 0]))), len0);
	return result0;
}
N_NIMCALL(void, TMP40)(void* p, NI op) {
	TY16005* a;
	NI LOC1;
	a = (TY16005*)p;
	LOC1 = (NI)0;
	for (LOC1 = 0; LOC1 < a->len; LOC1++) {
	nimGCvisit((void*)a->data[LOC1], op);
	}
}

N_NOINLINE(void, raiseOverflow)(void) {
	sysfatal_24265_1689653243(((NimStringDesc*) &TMP41));
}

static N_INLINE(NI, addInt)(NI a0, NI b0) {
	NI result0;
{	result0 = (NI)0;
	result0 = (NI)((NU64)(a0) + (NU64)(b0));
	{
		NIM_BOOL LOC3;
		LOC3 = (NIM_BOOL)0;
		LOC3 = (((NI) 0) <= (NI)(result0 ^ a0));
		if (LOC3) goto LA4;
		LOC3 = (((NI) 0) <= (NI)(result0 ^ b0));
		LA4: ;
		if (!LOC3) goto LA5;
{		goto BeforeRet;
}	}
	LA5: ;
	raiseOverflow();
	}BeforeRet: ;
	return result0;
}

N_NIMCALL(NI, mulInt)(NI a0, NI b0) {
	NI result0;
	NF resasfloat0;
	NF floatprod0;
{	result0 = (NI)0;
	resasfloat0 = (NF)0;
	floatprod0 = (NF)0;
	result0 = (NI)((NU64)(a0) * (NU64)(b0));
	floatprod0 = ((NF)(((double) (a0))) * (NF)(((double) (b0))));
	resasfloat0 = ((double) (result0));
	{
		if (!(resasfloat0 == floatprod0)) goto LA3;
{		goto BeforeRet;
}	}
	LA3: ;
	{
		if (!(((NF)(3.2000000000000000e+01) * (NF)((((NF)(resasfloat0) - (NF)(floatprod0)) > 0? (((NF)(resasfloat0) - (NF)(floatprod0))) : -(((NF)(resasfloat0) - (NF)(floatprod0)))))) <= (floatprod0 > 0? (floatprod0) : -(floatprod0)))) goto LA7;
{		goto BeforeRet;
}	}
	LA7: ;
	raiseOverflow();
	}BeforeRet: ;
	return result0;
}

N_NIMCALL(void*, newSeq)(TNimType* typ0, NI len0) {
	void* result0;
	nimfr("newSeq", "gc.nim")
	result0 = (void*)0;
	nimln(487, "gc.nim");
	NI size0 = addInt(mulInt(len0, (*(*typ0).base).size), ((NI) 16));
	nimln(488, "gc.nim");
	result0 = newObj(typ0, size0);
	nimln(489, "gc.nim");
	(*((TGenericSeq*) (result0))).len = len0;
	nimln(490, "gc.nim");
	(*((TGenericSeq*) (result0))).reserved = len0;
	popFrame();
	return result0;
}

N_NIMCALL(TY16005*, cstringarraytoseq_16001_1689653243)(NCSTRING* a0, NI len0) {
	TY16005* result0;
	result0 = (TY16005*)0;
	result0 = (TY16005*) newSeq((&NTI16005), len0);
	{
		NI i_16214_1689653243;
		NI HEX3Atmp_16216_1689653243;
		i_16214_1689653243 = (NI)0;
		HEX3Atmp_16216_1689653243 = (NI)0;
		HEX3Atmp_16216_1689653243 = (NI)(((NI) (len0)) - ((NI) 1));
		NI res_16219_1689653243 = ((NI) 0);
		{
			while (1) {
				if (!(res_16219_1689653243 <= ((NI) (HEX3Atmp_16216_1689653243)))) goto LA3;
				i_16214_1689653243 = ((NI) (res_16219_1689653243));
				asgnRefNoCycle((void**) (&result0->data[i_16214_1689653243]), cstrToNimstr(a0[(i_16214_1689653243)- 0]));
				res_16219_1689653243 += ((NI) 1);
			} LA3: ;
		}
	}
	return result0;
}

N_NIMCALL(TY16005*, cstringarraytoseq_16222_1689653243)(NCSTRING* a0) {
	TY16005* result0;
	result0 = (TY16005*)0;
	NI L0 = ((NI) 0);
	{
		while (1) {
			if (!!((((void*) (a0[(L0)- 0])) == NIM_NIL))) goto LA2;
			L0 += ((NI) 1);
		} LA2: ;
	}
	result0 = cstringarraytoseq_16001_1689653243(a0, ((NI) (L0)));
	return result0;
}

N_NIMCALL(NCSTRING*, alloccstringarray_16401_1689653243)(NimStringDesc** a0, NI a0Len0) {
	NCSTRING* result0;
	void* LOC1;
	result0 = (NCSTRING*)0;
	LOC1 = (void*)0;
	LOC1 = alloc0_7417_1689653243(((NI) ((NI)((NI)(a0Len0 + ((NI) 1)) * ((NI) 8)))));
	result0 = ((NCSTRING*) (LOC1));
	NimStringDesc** x0 = ((NimStringDesc**) (a0));
	{
		NI i_16615_1689653243;
		NI HEX3Atmp_16622_1689653243;
		i_16615_1689653243 = (NI)0;
		HEX3Atmp_16622_1689653243 = (NI)0;
		HEX3Atmp_16622_1689653243 = (a0Len0-1);
		NI res_16625_1689653243 = ((NI) 0);
		{
			while (1) {
				void* LOC5;
				if (!(res_16625_1689653243 <= HEX3Atmp_16622_1689653243)) goto LA4;
				i_16615_1689653243 = res_16625_1689653243;
				LOC5 = (void*)0;
				LOC5 = alloc0_7417_1689653243(((NI) ((NI)((x0[(i_16615_1689653243)- 0] ? x0[(i_16615_1689653243)- 0]->len : 0) + ((NI) 1)))));
				result0[(i_16615_1689653243)- 0] = ((NCSTRING) (LOC5));
				memcpy(((void*) (result0[(i_16615_1689653243)- 0])), ((void*) ((&x0[(i_16615_1689653243)- 0]->data[((NI) 0)]))), ((NI) ((x0[(i_16615_1689653243)- 0] ? x0[(i_16615_1689653243)- 0]->len : 0))));
				res_16625_1689653243 += ((NI) 1);
			} LA4: ;
		}
	}
	return result0;
}

N_NIMCALL(void, dealloccstringarray_16629_1689653243)(NCSTRING* a0) {
	NI i0 = ((NI) 0);
	{
		while (1) {
			if (!!((((void*) (a0[(i0)- 0])) == NIM_NIL))) goto LA2;
			dealloc_7448_1689653243(((void*) (a0[(i0)- 0])));
			i0 += ((NI) 1);
		} LA2: ;
	}
	dealloc_7448_1689653243(((void*) (a0)));
}

static N_INLINE(NI, atomicinc_16801_1689653243)(NI& memloc0, NI x0) {
	NI result0;
	result0 = (NI)0;
	memloc0 += x0;
	result0 = memloc0;
	return result0;
}

static N_INLINE(NI, atomicdec_16806_1689653243)(NI& memloc0, NI x0) {
	NI result0;
	result0 = (NI)0;
	memloc0 -= x0;
	result0 = memloc0;
	return result0;
}

static N_INLINE(NI, addandfetch_17001_1689653243)(NI* p0, NI val0) {
	NI result0;
	result0 = (NI)0;
	(*p0) += val0;
	result0 = (*p0);
	return result0;
}

static N_INLINE(void, cpurelax_17801_1689653243)(void) {
	asm volatile("pause" ::: "memory");
}

N_NIMCALL(void, setcontrolchook_19001_1689653243)(TY19005 hook0) {
	signal(SIGINT, ((Signalhandler23608) (hook0)));
}

N_NIMCALL(NimStringDesc*, getstacktrace_19201_1689653243)(void) {
	NimStringDesc* result0;
	result0 = (NimStringDesc*)0;
	result0 = copyString(((NimStringDesc*) &TMP4));
	rawwritestacktrace_20601_1689653243(result0);
	return result0;
}

N_NIMCALL(NimStringDesc*, getstacktrace_19203_1689653243)(Exception* e0) {
	NimStringDesc* result0;
	result0 = (NimStringDesc*)0;
	{
		NIM_BOOL LOC3;
		LOC3 = (NIM_BOOL)0;
		LOC3 = !(e0 == 0);
		if (!(LOC3)) goto LA4;
		LOC3 = !((*e0).trace == 0);
		LA4: ;
		if (!LOC3) goto LA5;
{		result0 = copyString((*e0).trace);
}	}
	goto LA1;
	LA5: ;
	{
		result0 = copyString(((NimStringDesc*) &TMP4));
	}
	LA1: ;
	return result0;
}

N_NOINLINE(void, raiseIndexError)(void) {
	sysfatal_23827_1689653243(((NimStringDesc*) &TMP42));
}

static N_INLINE(NI, chckIndx)(NI i0, NI a0, NI b0) {
	NI result0;
{	result0 = (NI)0;
	{
		NIM_BOOL LOC3;
		LOC3 = (NIM_BOOL)0;
		LOC3 = (a0 <= i0);
		if (!(LOC3)) goto LA4;
		LOC3 = (i0 <= b0);
		LA4: ;
		if (!LOC3) goto LA5;
{		result0 = i0;
		goto BeforeRet;
}	}
	goto LA1;
	LA5: ;
	{
		raiseIndexError();
	}
	LA1: ;
	}BeforeRet: ;
	return result0;
}

N_NIMCALL(NimStringDesc*, nimInt64ToStr)(NI64 x0) {
	NimStringDesc* result0;
	result0 = (NimStringDesc*)0;
	result0 = mnewString(((NI) 32));
	NI i0 = ((NI) 0);
	NI64 y0 = x0;
	{
		while (1) {
			NI64 d0 = (NI64)(y0 / IL64(10));
			result0->data[i0] = ((NIM_CHAR) (((NI) ((NI)((((NI) ((NI64)(y0 - (NI64)(d0 * IL64(10))))) > 0? (((NI) ((NI64)(y0 - (NI64)(d0 * IL64(10)))))) : -(((NI) ((NI64)(y0 - (NI64)(d0 * IL64(10))))))) + ((NI) 48))))));
			i0 += ((NI) 1);
			y0 = d0;
			{
				if (!(y0 == IL64(0))) goto LA5;
{				goto LA1;
}			}
			LA5: ;
		}
	} LA1: ;
	{
		if (!(x0 < IL64(0))) goto LA9;
{		result0->data[i0] = 45;
		i0 += ((NI) 1);
}	}
	LA9: ;
	result0 = setLengthStr(result0, ((NI) (i0)));
	{
		NI j_81185_1689653243;
		NI HEX3Atmp_81199_1689653243;
		j_81185_1689653243 = (NI)0;
		HEX3Atmp_81199_1689653243 = (NI)0;
		HEX3Atmp_81199_1689653243 = (NI)((NI)(i0 / ((NI) 2)) - ((NI) 1));
		NI res_81202_1689653243 = ((NI) 0);
		{
			while (1) {
				NIM_CHAR LOC14;
				if (!(res_81202_1689653243 <= HEX3Atmp_81199_1689653243)) goto LA13;
				j_81185_1689653243 = res_81202_1689653243;
				LOC14 = (NIM_CHAR)0;
				LOC14 = result0->data[j_81185_1689653243];
				result0->data[j_81185_1689653243] = result0->data[(NI)((NI)(i0 - j_81185_1689653243) - ((NI) 1))];
				result0->data[(NI)((NI)(i0 - j_81185_1689653243) - ((NI) 1))] = LOC14;
				res_81202_1689653243 += ((NI) 1);
			} LA13: ;
		}
	}
	return result0;
}

N_NOINLINE(void, raiseRangeError)(NI64 val0) {
	NimStringDesc* LOC1;
	LOC1 = (NimStringDesc*)0;
	LOC1 = nimInt64ToStr(val0);
	sysfatal_23803_1689653243(((NimStringDesc*) &TMP43), LOC1);
}

static N_INLINE(NI, chckRange)(NI i0, NI a0, NI b0) {
	NI result0;
{	result0 = (NI)0;
	{
		NIM_BOOL LOC3;
		LOC3 = (NIM_BOOL)0;
		LOC3 = (a0 <= i0);
		if (!(LOC3)) goto LA4;
		LOC3 = (i0 <= b0);
		LA4: ;
		if (!LOC3) goto LA5;
{		result0 = i0;
		goto BeforeRet;
}	}
	goto LA1;
	LA5: ;
	{
		raiseRangeError(((NI64) (i0)));
	}
	LA1: ;
	}BeforeRet: ;
	return result0;
}

N_NIMCALL(NimStringDesc*, nimFloatToStr)(NF f0) {
	NimStringDesc* result0;
	TY80565 buf0;
	int LOC1;
	result0 = (NimStringDesc*)0;
	memset((void*)buf0, 0, sizeof(buf0));
	LOC1 = (int)0;
	LOC1 = sprintf(((NCSTRING) (buf0)), "%.16g", f0);
	NI n0 = ((NI) (LOC1));
	NIM_BOOL hasdot0 = NIM_FALSE;
	{
		NI i_80578_1689653243;
		NI HEX3Atmp_80593_1689653243;
		i_80578_1689653243 = (NI)0;
		HEX3Atmp_80593_1689653243 = (NI)0;
		HEX3Atmp_80593_1689653243 = (NI)(n0 - ((NI) 1));
		NI res_80596_1689653243 = ((NI) 0);
		{
			while (1) {
				if (!(res_80596_1689653243 <= HEX3Atmp_80593_1689653243)) goto LA4;
				i_80578_1689653243 = res_80596_1689653243;
				{
					if (!((NU8)(buf0[(i_80578_1689653243)- 0]) == (NU8)(44))) goto LA7;
{					buf0[(i_80578_1689653243)- 0] = 46;
					hasdot0 = NIM_TRUE;
}				}
				goto LA5;
				LA7: ;
				{
					if (!(((NU8)(buf0[(i_80578_1689653243)- 0])) >= ((NU8)(97)) && ((NU8)(buf0[(i_80578_1689653243)- 0])) <= ((NU8)(122)) || ((NU8)(buf0[(i_80578_1689653243)- 0])) >= ((NU8)(65)) && ((NU8)(buf0[(i_80578_1689653243)- 0])) <= ((NU8)(90)) || ((NU8)(buf0[(i_80578_1689653243)- 0])) == ((NU8)(46)))) goto LA10;
{					hasdot0 = NIM_TRUE;
}				}
				goto LA5;
				LA10: ;
				LA5: ;
				res_80596_1689653243 += ((NI) 1);
			} LA4: ;
		}
	}
	{
		if (!!(hasdot0)) goto LA14;
{		buf0[(n0)- 0] = 46;
		buf0[((NI)(n0 + ((NI) 1)))- 0] = 48;
		buf0[((NI)(n0 + ((NI) 2)))- 0] = 0;
}	}
	LA14: ;
	{
		if (!((NU8)(buf0[((NI)(n0 - ((NI) 1)))- 0]) == (NU8)(78))) goto LA18;
{		result0 = copyString(((NimStringDesc*) &TMP44));
}	}
	goto LA16;
	LA18: ;
	{
		if (!((NU8)(buf0[((NI)(n0 - ((NI) 1)))- 0]) == (NU8)(70))) goto LA21;
{		{
			if (!((NU8)(buf0[(((NI) 0))- 0]) == (NU8)(45))) goto LA25;
{			result0 = copyString(((NimStringDesc*) &TMP45));
}		}
		goto LA23;
		LA25: ;
		{
			result0 = copyString(((NimStringDesc*) &TMP46));
		}
		LA23: ;
}	}
	goto LA16;
	LA21: ;
	{
		result0 = cstrToNimstr(((NCSTRING) (buf0)));
	}
	LA16: ;
	return result0;
}

static N_INLINE(NF, chckRangeF)(NF x0, NF a0, NF b0) {
	NF result0;
{	result0 = (NF)0;
	{
		NIM_BOOL LOC3;
		LOC3 = (NIM_BOOL)0;
		LOC3 = (a0 <= x0);
		if (!(LOC3)) goto LA4;
		LOC3 = (x0 <= b0);
		LA4: ;
		if (!LOC3) goto LA5;
{		result0 = x0;
		goto BeforeRet;
}	}
	goto LA1;
	LA5: ;
	{
		NimStringDesc* LOC8;
		LOC8 = (NimStringDesc*)0;
		LOC8 = nimFloatToStr(x0);
		sysfatal_23803_1689653243(((NimStringDesc*) &TMP43), LOC8);
	}
	LA1: ;
	}BeforeRet: ;
	return result0;
}

N_NOINLINE(void, chckNil)(void* p0) {
	{
		if (!(p0 == NIM_NIL)) goto LA3;
{		sysfatal_24018_1689653243(((NimStringDesc*) &TMP47));
}	}
	LA3: ;
}
N_NIMCALL(void, TMP48)() {
	nimGCvisit((void*)currexception_19639_1689653243, 0);
}

N_NIMCALL(void, nimRegisterGlobalMarker)(Globalmarkerproc56602 markerproc0) {
	nimfr("nimRegisterGlobalMarker", "gc.nim")
	nimln(326, "gc.nim");
	{
		if (!(globalmarkerslen_56607_1689653243 <= ((NI) 7000))) goto LA3;
{		nimln(327, "gc.nim");
		globalmarkers_56611_1689653243[(globalmarkerslen_56607_1689653243)- 0] = markerproc0;
		nimln(328, "gc.nim");
		globalmarkerslen_56607_1689653243 += ((NI) 1);
}	}
	goto LA1;
	LA3: ;
	{
		nimln(330, "gc.nim");
		printf("%s\012", ((NimStringDesc*) &TMP49)? (((NimStringDesc*) &TMP49))->data:"nil");
		fflush(stdout);
		nimln(331, "gc.nim");
		exit(((NI) 1));
	}
	LA1: ;
	popFrame();
}

static N_INLINE(TFrame*, getFrame)(void) {
	TFrame* result0;
	result0 = (TFrame*)0;
	result0 = frameptr_19636_1689653243;
	return result0;
}

static N_INLINE(void, pushSafePoint)(TSafePoint* s0) {
	(*s0).hasRaiseAction = NIM_FALSE;
	(*s0).prev = exchandler_19637_1689653243;
	exchandler_19637_1689653243 = s0;
}

static N_INLINE(void, popSafePoint)(void) {
	exchandler_19637_1689653243 = (*exchandler_19637_1689653243).prev;
}

static N_INLINE(void, popCurrentException)(void) {
	asgnRef((void**) (&currexception_19639_1689653243), NIM_NIL);
}

N_NIMCALL(NIM_BOOL, stacktraceavailable_20474_1689653243)(void) {
	NIM_BOOL result0;
	result0 = (NIM_BOOL)0;
	{
		if (!(frameptr_19636_1689653243 == NIM_NIL)) goto LA3;
{		result0 = NIM_FALSE;
}	}
	goto LA1;
	LA3: ;
	{
		result0 = NIM_TRUE;
	}
	LA1: ;
	return result0;
}

N_NIMCALL(void, reraiseException)(void) {
	{
		if (!(currexception_19639_1689653243 == NIM_NIL)) goto LA3;
{		sysfatal_21618_1689653243(((NimStringDesc*) &TMP50));
}	}
	goto LA1;
	LA3: ;
	{
		raiseexceptionaux_21201_1689653243(currexception_19639_1689653243);
	}
	LA1: ;
}

static N_INLINE(void, Gcdisable_9801_1689653243)(void) {
	gch_50658_1689653243.recgclock += ((NI) 1);
}

static N_INLINE(void, Gcenable_9803_1689653243)(void) {
	{
		if (!(((NI) 0) < gch_50658_1689653243.recgclock)) goto LA3;
{		gch_50658_1689653243.recgclock -= ((NI) 1);
}	}
	LA3: ;
}

N_NOCONV(void, signalHandler)(int sign0) {
	NimStringDesc* buf0;
	Gcdisable_9801_1689653243();
	buf0 = rawNewString(((NI) 2000));
	rawwritestacktrace_20601_1689653243(buf0);
	{
		if (!(sign0 == SIGINT)) goto LA3;
{		buf0 = resizeString(buf0, 31);
appendString(buf0, ((NimStringDesc*) &TMP51));
}	}
	goto LA1;
	LA3: ;
	{
		if (!(sign0 == SIGSEGV)) goto LA6;
{		buf0 = resizeString(buf0, 61);
appendString(buf0, ((NimStringDesc*) &TMP52));
}	}
	goto LA1;
	LA6: ;
	{
		if (!(sign0 == SIGABRT)) goto LA9;
{		buf0 = resizeString(buf0, 31);
appendString(buf0, ((NimStringDesc*) &TMP53));
}	}
	goto LA1;
	LA9: ;
	{
		if (!(sign0 == SIGFPE)) goto LA12;
{		buf0 = resizeString(buf0, 26);
appendString(buf0, ((NimStringDesc*) &TMP54));
}	}
	goto LA1;
	LA12: ;
	{
		if (!(sign0 == SIGILL)) goto LA15;
{		buf0 = resizeString(buf0, 27);
appendString(buf0, ((NimStringDesc*) &TMP55));
}	}
	goto LA1;
	LA15: ;
	{
		if (!(sign0 == SIGSEGV)) goto LA18;
{		buf0 = resizeString(buf0, 60);
appendString(buf0, ((NimStringDesc*) &TMP56));
}	}
	goto LA1;
	LA18: ;
	{
		{
			{
				if (!(sign0 == SIGPIPE)) goto LA24;
{				buf0 = resizeString(buf0, 22);
appendString(buf0, ((NimStringDesc*) &TMP57));
				goto LA21;
}			}
			LA24: ;
			buf0 = resizeString(buf0, 15);
appendString(buf0, ((NimStringDesc*) &TMP58));
		} LA21: ;
	}
	LA1: ;
	showerrormessage_19606_1689653243(buf0->data);
	Gcenable_9803_1689653243();
	exit(((NI) 1));
}

N_NIMCALL(void, registersignalhandler_23401_1689653243)(void) {
	signal(SIGINT, signalHandler);
	signal(SIGSEGV, signalHandler);
	signal(SIGABRT, signalHandler);
	signal(SIGFPE, signalHandler);
	signal(SIGILL, signalHandler);
	signal(SIGSEGV, signalHandler);
	signal(SIGPIPE, signalHandler);
}

N_NOINLINE(void, raiseFieldError)(NimStringDesc* f0) {
	sysfatal_23850_1689653243(f0, ((NimStringDesc*) &TMP59));
}

N_NIMCALL(NI64, chckRange64)(NI64 i0, NI64 a0, NI64 b0) {
	NI64 result0;
{	result0 = (NI64)0;
	{
		NIM_BOOL LOC3;
		LOC3 = (NIM_BOOL)0;
		LOC3 = (a0 <= i0);
		if (!(LOC3)) goto LA4;
		LOC3 = (i0 <= b0);
		LA4: ;
		if (!LOC3) goto LA5;
{		result0 = i0;
		goto BeforeRet;
}	}
	goto LA1;
	LA5: ;
	{
		raiseRangeError(i0);
	}
	LA1: ;
	}BeforeRet: ;
	return result0;
}

N_NIMCALL(void, chckObj)(TNimType* obj0, TNimType* subclass0) {
{	TNimType* x0 = obj0;
	{
		if (!(x0 == subclass0)) goto LA3;
{		goto BeforeRet;
}	}
	LA3: ;
	{
		while (1) {
			if (!!((x0 == subclass0))) goto LA6;
			{
				if (!(x0 == NIM_NIL)) goto LA9;
{				sysfatal_24077_1689653243(((NimStringDesc*) &TMP60));
				goto LA5;
}			}
			LA9: ;
			x0 = (*x0).base;
		} LA6: ;
	} LA5: ;
	}BeforeRet: ;
}

static N_INLINE(void, chckObjAsgn)(TNimType* a0, TNimType* b0) {
	{
		if (!!((a0 == b0))) goto LA3;
{		sysfatal_24113_1689653243(((NimStringDesc*) &TMP61));
}	}
	LA3: ;
}

N_NIMCALL(NIM_BOOL, isObj)(TNimType* obj0, TNimType* subclass0) {
	NIM_BOOL result0;
{	result0 = (NIM_BOOL)0;
	TNimType* x0 = obj0;
	{
		if (!(x0 == subclass0)) goto LA3;
{		result0 = NIM_TRUE;
		goto BeforeRet;
}	}
	LA3: ;
	{
		while (1) {
			if (!!((x0 == subclass0))) goto LA6;
			{
				if (!(x0 == NIM_NIL)) goto LA9;
{				result0 = NIM_FALSE;
				goto BeforeRet;
}			}
			LA9: ;
			x0 = (*x0).base;
		} LA6: ;
	}
	result0 = NIM_TRUE;
	goto BeforeRet;
	}BeforeRet: ;
	return result0;
}

N_NOINLINE(void, raiseDivByZero)(void) {
	sysfatal_24287_1689653243(((NimStringDesc*) &TMP62));
}

static N_INLINE(NI64, addInt64)(NI64 a0, NI64 b0) {
	NI64 result0;
{	result0 = (NI64)0;
	result0 = (NI64)((NU64)(a0) + (NU64)(b0));
	{
		NIM_BOOL LOC3;
		LOC3 = (NIM_BOOL)0;
		LOC3 = (IL64(0) <= (NI64)(result0 ^ a0));
		if (LOC3) goto LA4;
		LOC3 = (IL64(0) <= (NI64)(result0 ^ b0));
		LA4: ;
		if (!LOC3) goto LA5;
{		goto BeforeRet;
}	}
	LA5: ;
	raiseOverflow();
	}BeforeRet: ;
	return result0;
}

static N_INLINE(NI64, subInt64)(NI64 a0, NI64 b0) {
	NI64 result0;
{	result0 = (NI64)0;
	result0 = (NI64)((NU64)(a0) - (NU64)(b0));
	{
		NIM_BOOL LOC3;
		LOC3 = (NIM_BOOL)0;
		LOC3 = (IL64(0) <= (NI64)(result0 ^ a0));
		if (LOC3) goto LA4;
		LOC3 = (IL64(0) <= (NI64)(result0 ^ (NI64)((NU64) ~(b0))));
		LA4: ;
		if (!LOC3) goto LA5;
{		goto BeforeRet;
}	}
	LA5: ;
	raiseOverflow();
	}BeforeRet: ;
	return result0;
}

N_NIMCALL(NI64, mulInt64)(NI64 a0, NI64 b0) {
	NI64 result0;
	NF resasfloat0;
	NF floatprod0;
{	result0 = (NI64)0;
	resasfloat0 = (NF)0;
	floatprod0 = (NF)0;
	result0 = (NI64)((NU64)(a0) * (NU64)(b0));
	floatprod0 = ((double) (a0));
	floatprod0 = ((NF)(floatprod0) * (NF)(((double) (b0))));
	resasfloat0 = ((double) (result0));
	{
		if (!(resasfloat0 == floatprod0)) goto LA3;
{		goto BeforeRet;
}	}
	LA3: ;
	{
		if (!(((NF)(3.2000000000000000e+01) * (NF)((((NF)(resasfloat0) - (NF)(floatprod0)) > 0? (((NF)(resasfloat0) - (NF)(floatprod0))) : -(((NF)(resasfloat0) - (NF)(floatprod0)))))) <= (floatprod0 > 0? (floatprod0) : -(floatprod0)))) goto LA7;
{		goto BeforeRet;
}	}
	LA7: ;
	raiseOverflow();
	}BeforeRet: ;
	return result0;
}

static N_INLINE(NI64, negInt64)(NI64 a0) {
	NI64 result0;
{	result0 = (NI64)0;
	{
		if (!!((a0 == (IL64(-9223372036854775807) - IL64(1))))) goto LA3;
{		result0 = -(a0);
		goto BeforeRet;
}	}
	LA3: ;
	raiseOverflow();
	}BeforeRet: ;
	return result0;
}

static N_INLINE(NI64, absInt64)(NI64 a0) {
	NI64 result0;
{	result0 = (NI64)0;
	{
		if (!!((a0 == (IL64(-9223372036854775807) - IL64(1))))) goto LA3;
{		{
			if (!(IL64(0) <= a0)) goto LA7;
{			result0 = a0;
			goto BeforeRet;
}		}
		goto LA5;
		LA7: ;
		{
			result0 = -(a0);
			goto BeforeRet;
		}
		LA5: ;
}	}
	LA3: ;
	raiseOverflow();
	}BeforeRet: ;
	return result0;
}

static N_INLINE(NI64, divInt64)(NI64 a0, NI64 b0) {
	NI64 result0;
{	result0 = (NI64)0;
	{
		if (!(b0 == IL64(0))) goto LA3;
{		raiseDivByZero();
}	}
	LA3: ;
	{
		NIM_BOOL LOC7;
		LOC7 = (NIM_BOOL)0;
		LOC7 = (a0 == (IL64(-9223372036854775807) - IL64(1)));
		if (!(LOC7)) goto LA8;
		LOC7 = (b0 == IL64(-1));
		LA8: ;
		if (!LOC7) goto LA9;
{		raiseOverflow();
}	}
	LA9: ;
	result0 = (NI64)(a0 / b0);
	goto BeforeRet;
	}BeforeRet: ;
	return result0;
}

static N_INLINE(NI64, modInt64)(NI64 a0, NI64 b0) {
	NI64 result0;
{	result0 = (NI64)0;
	{
		if (!(b0 == IL64(0))) goto LA3;
{		raiseDivByZero();
}	}
	LA3: ;
	result0 = (NI64)(a0 % b0);
	goto BeforeRet;
	}BeforeRet: ;
	return result0;
}

static N_INLINE(NI, absInt)(NI a0) {
	NI result0;
{	result0 = (NI)0;
	{
		if (!!((a0 == ((NI) (IL64(-9223372036854775807) - IL64(1)))))) goto LA3;
{		{
			if (!(((NI) 0) <= a0)) goto LA7;
{			result0 = a0;
			goto BeforeRet;
}		}
		goto LA5;
		LA7: ;
		{
			result0 = ((NI64)-(a0));
			goto BeforeRet;
		}
		LA5: ;
}	}
	LA3: ;
	raiseOverflow();
	}BeforeRet: ;
	return result0;
}

static N_INLINE(NI, subInt)(NI a0, NI b0) {
	NI result0;
{	result0 = (NI)0;
	result0 = (NI)((NU64)(a0) - (NU64)(b0));
	{
		NIM_BOOL LOC3;
		LOC3 = (NIM_BOOL)0;
		LOC3 = (((NI) 0) <= (NI)(result0 ^ a0));
		if (LOC3) goto LA4;
		LOC3 = (((NI) 0) <= (NI)(result0 ^ (NI)((NU64) ~(b0))));
		LA4: ;
		if (!LOC3) goto LA5;
{		goto BeforeRet;
}	}
	LA5: ;
	raiseOverflow();
	}BeforeRet: ;
	return result0;
}

static N_INLINE(NI, negInt)(NI a0) {
	NI result0;
{	result0 = (NI)0;
	{
		if (!!((a0 == ((NI) (IL64(-9223372036854775807) - IL64(1)))))) goto LA3;
{		result0 = ((NI64)-(a0));
		goto BeforeRet;
}	}
	LA3: ;
	raiseOverflow();
	}BeforeRet: ;
	return result0;
}

static N_INLINE(NI, divInt)(NI a0, NI b0) {
	NI result0;
{	result0 = (NI)0;
	{
		if (!(b0 == ((NI) 0))) goto LA3;
{		raiseDivByZero();
}	}
	LA3: ;
	{
		NIM_BOOL LOC7;
		LOC7 = (NIM_BOOL)0;
		LOC7 = (a0 == ((NI) (IL64(-9223372036854775807) - IL64(1))));
		if (!(LOC7)) goto LA8;
		LOC7 = (b0 == ((NI) -1));
		LA8: ;
		if (!LOC7) goto LA9;
{		raiseOverflow();
}	}
	LA9: ;
	result0 = (NI)(a0 / b0);
	goto BeforeRet;
	}BeforeRet: ;
	return result0;
}

static N_INLINE(NI, modInt)(NI a0, NI b0) {
	NI result0;
{	result0 = (NI)0;
	{
		if (!(b0 == ((NI) 0))) goto LA3;
{		raiseDivByZero();
}	}
	LA3: ;
	result0 = (NI)(a0 % b0);
	goto BeforeRet;
	}BeforeRet: ;
	return result0;
}

N_NOINLINE(void, raisefloatinvalidop_26419_1689653243)(void) {
	sysfatal_26423_1689653243(((NimStringDesc*) &TMP63));
}

static N_INLINE(void, nanCheck)(NF x0) {
	{
		if (!!((x0 == x0))) goto LA3;
{		raisefloatinvalidop_26419_1689653243();
}	}
	LA3: ;
}

N_NOINLINE(void, raisefloatoverflow_26444_1689653243)(NF x0) {
	{
		if (!(0.0 < x0)) goto LA3;
{		sysfatal_26449_1689653243(((NimStringDesc*) &TMP64));
}	}
	goto LA1;
	LA3: ;
	{
		sysfatal_26468_1689653243(((NimStringDesc*) &TMP65));
	}
	LA1: ;
}

static N_INLINE(void, infCheck)(NF x0) {
	{
		NIM_BOOL LOC3;
		LOC3 = (NIM_BOOL)0;
		LOC3 = !((x0 == 0.0));
		if (!(LOC3)) goto LA4;
		LOC3 = (((NF)(x0) * (NF)(5.0000000000000000e-01)) == x0);
		LA4: ;
		if (!LOC3) goto LA5;
{		raisefloatoverflow_26444_1689653243(x0);
}	}
	LA5: ;
}

N_NIMCALL(void, rawwrite_26602_1689653243)(FILE* f0, NimStringDesc* s0) {
	NI LOC1;
	LOC1 = (NI)0;
	LOC1 = writebuffer_15776_1689653243(f0, ((void*) (s0->data)), ((NI) ((s0 ? s0->len : 0))));
}

N_NOINLINE(void, nimLoadLibraryError)(NimStringDesc* path0) {
	rawwrite_26602_1689653243(stderr, ((NimStringDesc*) &TMP66));
	rawwrite_26602_1689653243(stderr, path0);
	rawwrite_26602_1689653243(stderr, ((NimStringDesc*) &TMP10));
	exit(((NI) 1));
}

N_NOINLINE(void, procaddrerror_26609_1689653243)(NCSTRING name0) {
	rawwrite_26602_1689653243(stderr, ((NimStringDesc*) &TMP67));
	write_15701_1689653243(stderr, name0);
	rawwrite_26602_1689653243(stderr, ((NimStringDesc*) &TMP10));
	exit(((NI) 1));
}

N_NIMCALL(void, nimUnloadLibrary)(void* lib0) {
	dlclose(lib0);
}

N_NIMCALL(void*, nimLoadLibrary)(NimStringDesc* path0) {
	void* result0;
	result0 = (void*)0;
	result0 = dlopen(path0->data, RTLD_NOW);
	return result0;
}

N_NIMCALL(void*, nimGetProcAddr)(void* lib0, NCSTRING name0) {
	void* result0;
	result0 = (void*)0;
	result0 = dlsym(lib0, name0);
	{
		if (!(result0 == NIM_NIL)) goto LA3;
{		procaddrerror_26609_1689653243(name0);
}	}
	LA3: ;
	return result0;
}

N_NIMCALL(NI, countBits32)(NI32 n0) {
	NI result0;
	nimfr("countBits32", "sets.nim")
	result0 = (NI)0;
	nimln(17, "sets.nim");
	NI32 v0 = n0;
	nimln(18, "sets.nim");
	v0 = (NI32)((NU32)(v0) - (NU32)((NI32)((NI32)((NU32)(v0) >> (NU32)(((NI32) 1))) & ((NI32) 1431655765))));
	nimln(19, "sets.nim");
	v0 = (NI32)((NU32)((NI32)(v0 & ((NI32) 858993459))) + (NU32)((NI32)((NI32)((NU32)(v0) >> (NU32)(((NI32) 2))) & ((NI32) 858993459))));
	nimln(20, "sets.nim");
	result0 = ((NI) ((NI32)((NU32)((NI32)((NU32)((NI32)((NI32)((NU32)(v0) + (NU32)((NI32)((NU32)(v0) >> (NU32)(((NI32) 4))))) & ((NI32) 252645135))) * (NU32)(((NI32) 16843009)))) >> (NU32)(((NI32) 24)))));
	popFrame();
	return result0;
}

N_NIMCALL(NI, countBits64)(NI64 n0) {
	NI result0;
	NI LOC1;
	NI LOC2;
	nimfr("countBits64", "sets.nim")
	result0 = (NI)0;
	nimln(23, "sets.nim");
	LOC1 = (NI)0;
	LOC1 = countBits32(((NI32)(NU32)(NU64)(((NI64) ((NI64)(n0 & IL64(4294967295)))))));
	nimln(24, "sets.nim");
	LOC2 = (NI)0;
	LOC2 = countBits32(((NI32)(NU32)(NU64)((NI64)((NU64)(n0) >> (NU64)(IL64(32))))));
	result0 = (NI)(LOC1 + LOC2);
	popFrame();
	return result0;
}

N_NIMCALL(NI, cardSet)(Nimset27202 s0, NI len0) {
	NI result0;
	nimfr("cardSet", "sets.nim")
	result0 = (NI)0;
	nimln(27, "sets.nim");
	result0 = ((NI) 0);
	{
		NI i_27415_1689653243;
		NI HEX3Atmp_27427_1689653243;
		i_27415_1689653243 = (NI)0;
		HEX3Atmp_27427_1689653243 = (NI)0;
		nimln(28, "sets.nim");
		HEX3Atmp_27427_1689653243 = (NI)(len0 - ((NI) 1));
		nimln(1875, "system.nim");
		NI res_27430_1689653243 = ((NI) 0);
		{
			nimln(1876, "system.nim");
			while (1) {
				NI LOC4;
				if (!(res_27430_1689653243 <= HEX3Atmp_27427_1689653243)) goto LA3;
				nimln(1877, "system.nim");
				i_27415_1689653243 = res_27430_1689653243;
				nimln(29, "sets.nim");
				LOC4 = (NI)0;
				LOC4 = countBits32(((NI32) (s0[(i_27415_1689653243)- 0])));
				result0 += LOC4;
				nimln(1891, "system.nim");
				res_27430_1689653243 += ((NI) 1);
			} LA3: ;
		}
	}
	popFrame();
	return result0;
}

static N_INLINE(void*, ostryallocpages_30020_1689653243)(NI size0) {
	void* result0;
	nimfr("osTryAllocPages", "osalloc.nim")
	result0 = (void*)0;
	nimln(106, "osalloc.nim");
	nimln(107, "osalloc.nim");
	result0 = mmap(NIM_NIL, size0, ((int) 3), (NI32)(((NI32) 2) | MAP_ANONYMOUS), ((int) -1), ((NI) 0));
	nimln(108, "osalloc.nim");
	{
		if (!(result0 == ((void*) -1))) goto LA3;
{		result0 = NIM_NIL;
}	}
	LA3: ;
	popFrame();
	return result0;
}

N_NIMCALL(NI, getmaxmem_30434_1689653243)(Memregion30286& a0) {
	NI result0;
	nimfr("getMaxMem", "alloc.nim")
	result0 = (NI)0;
	nimln(126, "alloc.nim");
	result0 = ((a0.currmem >= a0.maxmem) ? a0.currmem : a0.maxmem);
	popFrame();
	return result0;
}

N_NIMCALL(Avlnode30284*, find_31246_1689653243)(Avlnode30284* root0, NI key0) {
	Avlnode30284* result0;
	nimfr("find", "avltree.nim")
{	result0 = (Avlnode30284*)0;
	nimln(28, "avltree.nim");
	Avlnode30284* it0 = root0;
	{
		nimln(29, "avltree.nim");
		while (1) {
			nimln(12, "avltree.nim");
			if (!!((it0 == bottom_30321_1689653243))) goto LA2;
			nimln(30, "avltree.nim");
			{
				if (!((*it0).key == key0)) goto LA5;
{				result0 = it0;
				goto BeforeRet;
}			}
			LA5: ;
			nimln(31, "avltree.nim");
			it0 = (*it0).link[(((NU64)((*it0).key) < (NU64)(key0)))- 0];
		} LA2: ;
	}
	}BeforeRet: ;
	popFrame();
	return result0;
}

N_NIMCALL(void, lldeallocall_31471_1689653243)(Memregion30286& a0) {
	nimfr("llDeallocAll", "alloc.nim")
	nimln(169, "alloc.nim");
	Llchunk30280* it0 = a0.llmem;
	{
		nimln(170, "alloc.nim");
		while (1) {
			nimln(343, "system.nim");
			if (!!((it0 == NIM_NIL))) goto LA2;
			nimln(172, "alloc.nim");
			Llchunk30280* next0 = (*it0).next;
			nimln(173, "alloc.nim");
			osdeallocpages_30025_1689653243(((void*) (it0)), ((NI) 4096));
			nimln(174, "alloc.nim");
			it0 = next0;
		} LA2: ;
	}
	popFrame();
}

N_NIMCALL(void, writefreelist_32830_1689653243)(Memregion30286* a0) {
	nimfr("writeFreeList", "alloc.nim")
	nimln(326, "alloc.nim");
	Bigchunk30242* it0 = (*a0).freechunkslist;
	nimln(327, "alloc.nim");
	fprintf(stdout, "freeChunksList: %p\012", it0);
	{
		nimln(328, "alloc.nim");
		while (1) {
			nimln(343, "system.nim");
			if (!!((it0 == NIM_NIL))) goto LA2;
			nimln(329, "alloc.nim");
			fprintf(stdout, "it: %p, next: %p, prev: %p\012", it0, (*it0).next, (*it0).prev);
			nimln(331, "alloc.nim");
			it0 = (*it0).next;
		} LA2: ;
	}
	popFrame();
}

N_NIMCALL(NIM_BOOL, isallocatedptr_37202_1689653243)(Memregion30286* a0, void* p0) {
	NIM_BOOL result0;
	nimfr("isAllocatedPtr", "alloc.nim")
	result0 = (NIM_BOOL)0;
	nimln(582, "alloc.nim");
	{
		if (!isaccessible_32816_1689653243(a0, p0)) goto LA3;
{		nimln(583, "alloc.nim");
		Basechunk30238* c_45413_1689653243 = pageaddr_31981_1689653243(p0);
		nimln(584, "alloc.nim");
		{
			NIM_BOOL LOC7;
			LOC7 = (NIM_BOOL)0;
			LOC7 = chunkunused_31889_1689653243(c_45413_1689653243);
			if (!!(LOC7)) goto LA8;
{			nimln(585, "alloc.nim");
			{
				NIM_BOOL LOC14;
				NIM_BOOL LOC15;
				if (!issmallchunk_31869_1689653243(c_45413_1689653243)) goto LA12;
{				nimln(586, "alloc.nim");
				Smallchunk30240* c0 = ((Smallchunk30240*) (c_45413_1689653243));
				nimln(587, "alloc.nim");
				nimln(67, "alloc.nim");
				NI offset0 = (NI)((NU64)(((NI) ((NI)(((NI) (p0)) & ((NI) 4095))))) - (NU64)((NI)(((NI)sizeof(Smallchunk30240)) - ((NI) 8))));
				nimln(589, "alloc.nim");
				LOC14 = (NIM_BOOL)0;
				LOC15 = (NIM_BOOL)0;
				nimln(1745, "system.nim");
				LOC15 = ((NU64)(offset0) < (NU64)((*c0).acc));
				if (!(LOC15)) goto LA16;
				nimln(589, "alloc.nim");
				LOC15 = ((NI)((NU64)(offset0) % (NU64)((*c0).size)) == ((NI) 0));
				LA16: ;
				LOC14 = LOC15;
				if (!(LOC14)) goto LA17;
				nimln(1745, "system.nim");
				LOC14 = ((NU64)(((NI) 1)) < (NU64)((*((Freecell30230*) (p0))).zerofield));
				LA17: ;
				result0 = LOC14;
}			}
			goto LA10;
			LA12: ;
			{
				NIM_BOOL LOC19;
				nimln(592, "alloc.nim");
				Bigchunk30242* c0 = ((Bigchunk30242*) (c_45413_1689653243));
				nimln(593, "alloc.nim");
				LOC19 = (NIM_BOOL)0;
				LOC19 = (p0 == ((void*) ((&(*c0).data))));
				if (!(LOC19)) goto LA20;
				nimln(1745, "system.nim");
				LOC19 = ((NU64)(((NI) 1)) < (NU64)((*((Freecell30230*) (p0))).zerofield));
				LA20: ;
				result0 = LOC19;
			}
			LA10: ;
}		}
		LA8: ;
}	}
	LA3: ;
	popFrame();
	return result0;
}

N_NIMCALL(void*, rawalloc0_43811_1689653243)(Memregion30286& a0, NI requestedsize0) {
	void* result0;
	nimfr("rawAlloc0", "alloc.nim")
	result0 = (void*)0;
	nimln(534, "alloc.nim");
	result0 = rawalloc_37404_1689653243(a0, requestedsize0);
	nimln(535, "alloc.nim");
	zeroMem(result0, ((NI) (requestedsize0)));
	popFrame();
	return result0;
}

N_NIMCALL(NI, ptrsize_46413_1689653243)(void* p0) {
	NI result0;
	nimfr("ptrSize", "alloc.nim")
	result0 = (NI)0;
	nimln(636, "alloc.nim");
	void* x0 = ((void*) ((NI)((NU64)(((NI) (p0))) - (NU64)(((NI)sizeof(Freecell30230))))));
	nimln(637, "alloc.nim");
	Basechunk30238* c0 = pageaddr_31981_1689653243(p0);
	nimln(639, "alloc.nim");
	result0 = (NI)((NU64)((*c0).size) - (NU64)(((NI)sizeof(Freecell30230))));
	nimln(640, "alloc.nim");
	{
		NIM_BOOL LOC3;
		LOC3 = (NIM_BOOL)0;
		LOC3 = issmallchunk_31869_1689653243(c0);
		if (!!(LOC3)) goto LA4;
{		nimln(641, "alloc.nim");
		nimln(68, "alloc.nim");
		result0 -= (NI)(((NI)sizeof(Bigchunk30242)) - ((NI) 8));
}	}
	LA4: ;
	popFrame();
	return result0;
}

N_NIMCALL(void*, realloc_47804_1689653243)(Memregion30286& allocator0, void* p0, NI newsize0) {
	void* result0;
	nimfr("realloc", "alloc.nim")
	result0 = (void*)0;
	nimln(663, "alloc.nim");
	{
		nimln(351, "system.nim");
		if (!(((NI) 0) < ((NI) (newsize0)))) goto LA3;
{		nimln(664, "alloc.nim");
		result0 = alloc0_46816_1689653243(allocator0, newsize0);
		nimln(665, "alloc.nim");
		{
			NI LOC9;
			nimln(343, "system.nim");
			if (!!((p0 == NIM_NIL))) goto LA7;
{			nimln(666, "alloc.nim");
			LOC9 = (NI)0;
			LOC9 = ptrsize_46413_1689653243(p0);
			memcpy(result0, p0, ((NI) (LOC9)));
			nimln(667, "alloc.nim");
			dealloc_46823_1689653243(allocator0, p0);
}		}
		LA7: ;
}	}
	goto LA1;
	LA3: ;
	{
		nimln(343, "system.nim");
		if (!!((p0 == NIM_NIL))) goto LA11;
{		nimln(669, "alloc.nim");
		dealloc_46823_1689653243(allocator0, p0);
}	}
	goto LA1;
	LA11: ;
	LA1: ;
	popFrame();
	return result0;
}

N_NIMCALL(void, deallocospages_47814_1689653243)(Memregion30286& a0) {
	nimfr("deallocOsPages", "alloc.nim")
	{
		NI p_47818_1689653243;
		Intset30214 HEX3Atmp_48005_1689653243;
		p_47818_1689653243 = (NI)0;
		memset((void*)(&HEX3Atmp_48005_1689653243), 0, sizeof(HEX3Atmp_48005_1689653243));
		nimln(673, "alloc.nim");
		HEX3Atmp_48005_1689653243 = a0.chunkstarts;
		{
			NI h_48012_1689653243;
			h_48012_1689653243 = (NI)0;
			nimln(1875, "system.nim");
			NI res_48014_1689653243 = ((NI) 0);
			{
				nimln(1876, "system.nim");
				while (1) {
					if (!(res_48014_1689653243 <= ((NI) 255))) goto LA4;
					nimln(1877, "system.nim");
					h_48012_1689653243 = ((NI) (res_48014_1689653243));
					nimln(214, "alloc.nim");
					Trunk30210* r_48016_1689653243 = HEX3Atmp_48005_1689653243.data[(h_48012_1689653243)- 0];
					{
						nimln(215, "alloc.nim");
						while (1) {
							nimln(343, "system.nim");
							if (!!((r_48016_1689653243 == NIM_NIL))) goto LA6;
							nimln(216, "alloc.nim");
							NI i_48018_1689653243 = ((NI) 0);
							{
								nimln(217, "alloc.nim");
								while (1) {
									if (!(i_48018_1689653243 <= ((NI) 7))) goto LA8;
									nimln(218, "alloc.nim");
									NI w_48020_1689653243 = (*r_48016_1689653243).bits[(i_48018_1689653243)- 0];
									nimln(220, "alloc.nim");
									NI j_48022_1689653243 = ((NI) 0);
									{
										nimln(221, "alloc.nim");
										while (1) {
											nimln(343, "system.nim");
											if (!!((w_48020_1689653243 == ((NI) 0)))) goto LA10;
											nimln(222, "alloc.nim");
											{
												NI LOC15;
												nimln(343, "system.nim");
												nimln(222, "alloc.nim");
												if (!!((((NI) ((NI)(w_48020_1689653243 & ((NI) 1)))) == ((NI) 0)))) goto LA13;
{												nimln(223, "alloc.nim");
												p_47818_1689653243 = (NI)((NI)((NU64)((*r_48016_1689653243).key) << (NU64)(((NI) 9))) | (NI)((NU64)((NI)((NU64)(i_48018_1689653243) << (NU64)(((NI) 6)))) + (NU64)(j_48022_1689653243)));
												nimln(674, "alloc.nim");
												Basechunk30238* page0 = ((Basechunk30238*) ((NI)((NU64)(p_47818_1689653243) << (NU64)(((NI) 12)))));
												nimln(676, "alloc.nim");
												LOC15 = (NI)0;
												{
													if (!((*page0).size < ((NI) 4096))) goto LA18;
{													LOC15 = ((NI) 4096);
}												}
												goto LA16;
												LA18: ;
												{
													LOC15 = (*page0).size;
												}
												LA16: ;
												NI size0 = LOC15;
												nimln(677, "alloc.nim");
												osdeallocpages_30025_1689653243(((void*) (page0)), size0);
}											}
											LA13: ;
											nimln(224, "alloc.nim");
											j_48022_1689653243 += ((NI) 1);
											nimln(225, "alloc.nim");
											w_48020_1689653243 = (NI)((NU64)(w_48020_1689653243) >> (NU64)(((NI) 1)));
										} LA10: ;
									}
									nimln(226, "alloc.nim");
									i_48018_1689653243 += ((NI) 1);
								} LA8: ;
							}
							nimln(227, "alloc.nim");
							r_48016_1689653243 = (*r_48016_1689653243).next;
						} LA6: ;
					}
					nimln(1896, "system.nim");
					res_48014_1689653243 += ((NI) 1);
				} LA4: ;
			}
		}
	}
	nimln(686, "alloc.nim");
	lldeallocall_31471_1689653243(a0);
	popFrame();
}

static N_INLINE(NI, getfreemem_48023_1689653243)(Memregion30286* a0) {
	NI result0;
	nimfr("getFreeMem", "alloc.nim")
	result0 = (NI)0;
	nimln(688, "alloc.nim");
	result0 = (*a0).freemem;
	popFrame();
	return result0;
}

static N_INLINE(NI, gettotalmem_48027_1689653243)(Memregion30286* a0) {
	NI result0;
	nimfr("getTotalMem", "alloc.nim")
	result0 = (NI)0;
	nimln(689, "alloc.nim");
	result0 = (*a0).currmem;
	popFrame();
	return result0;
}

static N_INLINE(NIM_BOOL, contains_48159_1689653243)(Cellseq48122* s0, Cell48106* c0) {
	NIM_BOOL result0;
	nimfr("contains", "cellsets.nim")
{	result0 = (NIM_BOOL)0;
	{
		NI i_48173_1689653243;
		NI HEX3Atmp_48186_1689653243;
		i_48173_1689653243 = (NI)0;
		HEX3Atmp_48186_1689653243 = (NI)0;
		nimln(48, "cellsets.nim");
		HEX3Atmp_48186_1689653243 = (NI)((*s0).len - ((NI) 1));
		nimln(1875, "system.nim");
		NI res_48189_1689653243 = ((NI) 0);
		{
			nimln(1876, "system.nim");
			while (1) {
				if (!(res_48189_1689653243 <= HEX3Atmp_48186_1689653243)) goto LA3;
				nimln(1877, "system.nim");
				i_48173_1689653243 = res_48189_1689653243;
				nimln(49, "cellsets.nim");
				{
					if (!((*s0).d[(i_48173_1689653243)- 0] == c0)) goto LA6;
{					result0 = NIM_TRUE;
					goto BeforeRet;
}				}
				LA6: ;
				nimln(1896, "system.nim");
				res_48189_1689653243 += ((NI) 1);
			} LA3: ;
		}
	}
	nimln(50, "cellsets.nim");
	result0 = NIM_FALSE;
	goto BeforeRet;
	}BeforeRet: ;
	popFrame();
	return result0;
}

N_NIMCALL(void, deinit_48222_1689653243)(Cellseq48122& s0) {
	nimfr("deinit", "cellsets.nim")
	nimln(69, "cellsets.nim");
	dealloc_7448_1689653243(((void*) (s0.d)));
	nimln(70, "cellsets.nim");
	s0.d = NIM_NIL;
	nimln(71, "cellsets.nim");
	s0.len = ((NI) 0);
	nimln(72, "cellsets.nim");
	s0.cap = ((NI) 0);
	popFrame();
}

N_NIMCALL(void, excl_48875_1689653243)(Cellset48118& s0, Cell48106* cell0) {
	nimfr("excl", "cellsets.nim")
	nimln(166, "cellsets.nim");
	NI u0 = ((NI) (cell0));
	nimln(167, "cellsets.nim");
	Pagedesc48114* t0 = cellsetget_48260_1689653243((&s0), (NI)((NU64)(u0) >> (NU64)(((NI) 12))));
	nimln(168, "cellsets.nim");
	{
		nimln(343, "system.nim");
		if (!!((t0 == NIM_NIL))) goto LA3;
{		nimln(169, "cellsets.nim");
		u0 = (NI)((NU64)((NI)((NU64)(u0) % (NU64)(((NI) 4096)))) / (NU64)(((NI) 8)));
		nimln(170, "cellsets.nim");
		nimln(171, "cellsets.nim");
		(*t0).bits[((NI)((NU64)(u0) >> (NU64)(((NI) 6))))- 0] = (NI)((*t0).bits[((NI)((NU64)(u0) >> (NU64)(((NI) 6))))- 0] & (NI)((NU64) ~((NI)((NU64)(((NI) 1)) << (NU64)(((NI) ((NI)(u0 & ((NI) 63)))))))));
}	}
	LA3: ;
	popFrame();
}

N_NIMCALL(void, deallocospages_51001_1689653243)(void) {
	nimfr("deallocOsPages", "alloc.nim")
	nimln(704, "alloc.nim");
	deallocospages_47814_1689653243(gch_50658_1689653243.region);
	popFrame();
}

N_NOCONV(void*, realloc_7433_1689653243)(void* p0, NI newsize0) {
	void* result0;
	nimfr("realloc", "alloc.nim")
	result0 = (void*)0;
	nimln(716, "alloc.nim");
	result0 = realloc_47804_1689653243(gch_50658_1689653243.region, p0, newsize0);
	popFrame();
	return result0;
}

N_NOCONV(void*, allocshared_7451_1689653243)(NI size0) {
	void* result0;
	nimfr("allocShared", "alloc.nim")
	result0 = (void*)0;
	nimln(745, "alloc.nim");
	result0 = alloc_7401_1689653243(size0);
	popFrame();
	return result0;
}

N_NOCONV(void*, allocshared0_7467_1689653243)(NI size0) {
	void* result0;
	nimfr("allocShared0", "alloc.nim")
	result0 = (void*)0;
	nimln(748, "alloc.nim");
	result0 = allocshared_7451_1689653243(size0);
	nimln(749, "alloc.nim");
	zeroMem(result0, size0);
	popFrame();
	return result0;
}

N_NOCONV(void, deallocshared_7498_1689653243)(void* p0) {
	nimfr("deallocShared", "alloc.nim")
	nimln(757, "alloc.nim");
	dealloc_7448_1689653243(p0);
	popFrame();
}

N_NOCONV(void*, reallocshared_7483_1689653243)(void* p0, NI newsize0) {
	void* result0;
	nimfr("reallocShared", "alloc.nim")
	result0 = (void*)0;
	nimln(765, "alloc.nim");
	result0 = realloc_7433_1689653243(p0, newsize0);
	popFrame();
	return result0;
}

N_NIMCALL(TNimType*, extGetCellType)(void* c0) {
	TNimType* result0;
	nimfr("extGetCellType", "gc.nim")
	result0 = (TNimType*)0;
	nimln(135, "gc.nim");
	result0 = (*usrtocell_52241_1689653243(c0)).typ;
	popFrame();
	return result0;
}

N_NIMCALL(NI, getRefcount)(void* p0) {
	NI result0;
	nimfr("internRefcount", "gc.nim")
	result0 = (NI)0;
	nimln(138, "gc.nim");
	result0 = (NI)((NU64)((*usrtocell_52241_1689653243(p0)).refcount) >> (NU64)(((NI) 3)));
	popFrame();
	return result0;
}

N_NIMCALL(void, writecell_52418_1689653243)(NCSTRING msg0, Cell48106* c0) {
	nimfr("writeCell", "gc.nim")
	nimln(152, "gc.nim");
	NI kind0 = ((NI) -1);
	nimln(153, "gc.nim");
	{
		nimln(343, "system.nim");
		if (!!(((*c0).typ == NIM_NIL))) goto LA3;
{		nimln(153, "gc.nim");
		kind0 = ((NI) ((*(*c0).typ).kind));
}	}
	LA3: ;
	nimln(158, "gc.nim");
	nimln(159, "gc.nim");
	nimln(144, "gc.nim");
	fprintf(stdout, "[GC] %s: %p %d rc=%ld; color=%ld\012", msg0, c0, kind0, (NI)((NU64)((*c0).refcount) >> (NU64)(((NI) 3))), (NI)((*c0).refcount & ((NI) 3)));
	popFrame();
}

N_NOINLINE(NIM_BOOL, isonstack_52611_1689653243)(void* p0) {
	NIM_BOOL result0;
	void* volatile stacktop0;
	NIM_BOOL LOC1;
	result0 = (NIM_BOOL)0;
	stacktop0 = (void*)0;
	stacktop0 = ((void*) ((&stacktop0)));
	NI b0 = ((NI) (gch_50658_1689653243.stackbottom));
	NI a0 = ((NI) (stacktop0));
	NI x0 = ((NI) (p0));
	LOC1 = (NIM_BOOL)0;
	LOC1 = ((NU64)(a0) <= (NU64)(x0));
	if (!(LOC1)) goto LA2;
	LOC1 = ((NU64)(x0) <= (NU64)(b0));
	LA2: ;
	result0 = LOC1;
	return result0;
}

static N_INLINE(void, rtladdcycleroot_53032_1689653243)(Cell48106* c0) {
	nimfr("rtlAddCycleRoot", "gc.nim")
	popFrame();
}

N_NIMCALL(void, nimGCref)(void* p0) {
	nimfr("nimGCref", "gc.nim")
	nimln(229, "gc.nim");
	add_48193_1689653243(gch_50658_1689653243.additionalroots, usrtocell_52241_1689653243(p0));
	nimln(230, "gc.nim");
	incref_54219_1689653243(usrtocell_52241_1689653243(p0));
	popFrame();
}

N_NIMCALL(void, nimGCunref)(void* p0) {
	nimfr("nimGCunref", "gc.nim")
	nimln(233, "gc.nim");
	Cell48106* cell0 = usrtocell_52241_1689653243(p0);
	nimln(234, "gc.nim");
	NI L0 = (NI)(gch_50658_1689653243.additionalroots.len - ((NI) 1));
	nimln(235, "gc.nim");
	NI i0 = L0;
	nimln(236, "gc.nim");
	Cell48106** d0 = gch_50658_1689653243.additionalroots.d;
	{
		nimln(237, "gc.nim");
		while (1) {
			nimln(347, "system.nim");
			if (!(((NI) 0) <= i0)) goto LA2;
			nimln(238, "gc.nim");
			{
				if (!(d0[(i0)- 0] == cell0)) goto LA5;
{				nimln(239, "gc.nim");
				d0[(i0)- 0] = d0[(L0)- 0];
				nimln(240, "gc.nim");
				gch_50658_1689653243.additionalroots.len -= ((NI) 1);
				nimln(241, "gc.nim");
				goto LA1;
}			}
			LA5: ;
			nimln(242, "gc.nim");
			i0 -= ((NI) 1);
		} LA2: ;
	} LA1: ;
	nimln(243, "gc.nim");
	decref_53801_1689653243(usrtocell_52241_1689653243(p0));
	popFrame();
}

N_NIMCALL(void, unsureAsgnRef)(void** dest0, void* src0) {
	nimfr("unsureAsgnRef", "gc.nim")
	nimln(284, "gc.nim");
	{
		NIM_BOOL LOC3;
		LOC3 = (NIM_BOOL)0;
		LOC3 = isonstack_52611_1689653243(((void*) (dest0)));
		if (!!(LOC3)) goto LA4;
{		nimln(285, "gc.nim");
		{
			nimln(343, "system.nim");
			if (!!((src0 == NIM_NIL))) goto LA8;
{			nimln(285, "gc.nim");
			incref_54219_1689653243(usrtocell_52241_1689653243(src0));
}		}
		LA8: ;
		nimln(289, "gc.nim");
		{
			nimln(1741, "system.nim");
			if (!((NU64)(((NI) 4096)) <= (NU64)(((NI) ((*dest0)))))) goto LA12;
{			nimln(289, "gc.nim");
			decref_53801_1689653243(usrtocell_52241_1689653243((*dest0)));
}		}
		LA12: ;
}	}
	goto LA1;
	LA4: ;
	{
	}
	LA1: ;
	nimln(294, "gc.nim");
	(*dest0) = src0;
	popFrame();
}

N_NIMCALL(void, gcinvariant_57892_1689653243)(void) {
}

N_NIMCALL(void*, newSeqRC1)(TNimType* typ0, NI len0) {
	void* result0;
	nimfr("newSeqRC1", "gc.nim")
	result0 = (void*)0;
	nimln(524, "gc.nim");
	NI size0 = addInt(mulInt(len0, (*(*typ0).base).size), ((NI) 16));
	nimln(525, "gc.nim");
	result0 = newObjRC1(typ0, size0);
	nimln(526, "gc.nim");
	(*((TGenericSeq*) (result0))).len = len0;
	nimln(527, "gc.nim");
	(*((TGenericSeq*) (result0))).reserved = len0;
	popFrame();
	return result0;
}

N_NIMCALL(Foreigncell71404, protect_71408_1689653243)(void* x0) {
	Foreigncell71404 result0;
	memset((void*)(&result0), 0, sizeof(result0));
	nimGCref(x0);
	result0.data = x0;
	result0.owner = (&gch_50658_1689653243);
	return result0;
}

N_NIMCALL(void, dispose_71413_1689653243)(Foreigncell71404 x0) {
	nimGCunref(x0.data);
}

N_NIMCALL(NIM_BOOL, isnotforeign_71601_1689653243)(Foreigncell71404 x0) {
	NIM_BOOL result0;
	result0 = (NIM_BOOL)0;
	result0 = (x0.owner == (&gch_50658_1689653243));
	return result0;
}

N_NIMCALL(NI, len_71617_1689653243)(Gcstack50616* stack0) {
	NI result0;
{	result0 = (NI)0;
	{
		if (!(stack0 == NIM_NIL)) goto LA3;
{		result0 = ((NI) 0);
		goto BeforeRet;
}	}
	LA3: ;
	Gcstack50616* s0 = stack0;
	result0 = ((NI) 1);
	{
		while (1) {
			if (!!(((*s0).next == NIM_NIL))) goto LA6;
			result0 += ((NI) 1);
			s0 = (*s0).next;
		} LA6: ;
	}
	}BeforeRet: ;
	return result0;
}

N_NIMCALL(void, Gcsetstrategy_9814_1689653243)(Gcstrategy9808 strategy0) {
}

N_NIMCALL(void, Gcenablemarkandsweep_9817_1689653243)(void) {
	gch_50658_1689653243.cyclethreshold = ((NI) 4194304);
}

N_NIMCALL(void, Gcdisablemarkandsweep_9819_1689653243)(void) {
	gch_50658_1689653243.cyclethreshold = ((NI) IL64(9223372036854775806));
}

N_NIMCALL(void, Gcfullcollect_9805_1689653243)(void) {
	NI oldthreshold0 = gch_50658_1689653243.cyclethreshold;
	gch_50658_1689653243.cyclethreshold = ((NI) 0);
	collectct_52607_1689653243(gch_50658_1689653243);
	gch_50658_1689653243.cyclethreshold = oldthreshold0;
}

N_NIMCALL(NimStringDesc*, Gcgetstatistics_9821_1689653243)(void) {
	NimStringDesc* result0;
	NimStringDesc* LOC1;
	NI LOC2;
	NimStringDesc* LOC3;
	NI LOC4;
	NimStringDesc* LOC5;
	NimStringDesc* LOC6;
	NimStringDesc* LOC7;
	NimStringDesc* LOC8;
	NimStringDesc* LOC9;
	NimStringDesc* LOC10;
	NimStringDesc* LOC11;
	NimStringDesc* LOC12;
	NimStringDesc* LOC13;
	NimStringDesc* LOC14;
	result0 = (NimStringDesc*)0;
	Gcdisable_9801_1689653243();
	LOC1 = (NimStringDesc*)0;
	LOC2 = (NI)0;
	LOC2 = gettotalmem_8059_1689653243();
	LOC3 = (NimStringDesc*)0;
	LOC3 = nimIntToStr(LOC2);
	LOC4 = (NI)0;
	LOC4 = getoccupiedmem_8055_1689653243();
	LOC5 = (NimStringDesc*)0;
	LOC5 = nimIntToStr(LOC4);
	LOC6 = (NimStringDesc*)0;
	LOC6 = nimIntToStr(gch_50658_1689653243.stat.stackscans);
	LOC7 = (NimStringDesc*)0;
	LOC7 = nimIntToStr(gch_50658_1689653243.stat.maxstackcells);
	LOC8 = (NimStringDesc*)0;
	LOC8 = nimIntToStr(gch_50658_1689653243.stat.cyclecollections);
	LOC9 = (NimStringDesc*)0;
	LOC9 = nimIntToStr(gch_50658_1689653243.stat.maxthreshold);
	LOC10 = (NimStringDesc*)0;
	LOC10 = nimIntToStr(gch_50658_1689653243.zct.cap);
	LOC11 = (NimStringDesc*)0;
	LOC11 = nimIntToStr(gch_50658_1689653243.stat.cycletablesize);
	LOC12 = (NimStringDesc*)0;
	LOC12 = nimInt64ToStr((NI64)(gch_50658_1689653243.stat.maxpause / IL64(1000000)));
	LOC1 = rawNewString(LOC3->len + LOC5->len + LOC6->len + LOC7->len + LOC8->len + LOC9->len + LOC10->len + LOC11->len + LOC12->len + 202);
appendString(LOC1, ((NimStringDesc*) &TMP68));
appendString(LOC1, LOC3);
appendString(LOC1, ((NimStringDesc*) &TMP69));
appendString(LOC1, LOC5);
appendString(LOC1, ((NimStringDesc*) &TMP70));
appendString(LOC1, LOC6);
appendString(LOC1, ((NimStringDesc*) &TMP71));
appendString(LOC1, LOC7);
appendString(LOC1, ((NimStringDesc*) &TMP72));
appendString(LOC1, LOC8);
appendString(LOC1, ((NimStringDesc*) &TMP73));
appendString(LOC1, LOC9);
appendString(LOC1, ((NimStringDesc*) &TMP74));
appendString(LOC1, LOC10);
appendString(LOC1, ((NimStringDesc*) &TMP75));
appendString(LOC1, LOC11);
appendString(LOC1, ((NimStringDesc*) &TMP76));
appendString(LOC1, LOC12);
appendString(LOC1, ((NimStringDesc*) &TMP10));
	result0 = LOC1;
	LOC13 = (NimStringDesc*)0;
	LOC14 = (NimStringDesc*)0;
	LOC14 = nimIntToStr(gch_50658_1689653243.stat.maxstacksize);
	LOC13 = rawNewString(result0->len + LOC14->len + 22);
appendString(LOC13, result0);
appendString(LOC13, ((NimStringDesc*) &TMP77));
appendString(LOC13, LOC14);
appendString(LOC13, ((NimStringDesc*) &TMP10));
	result0 = LOC13;
	Gcenable_9803_1689653243();
	return result0;
}

static N_INLINE(NI, cmpStrings)(NimStringDesc* a0, NimStringDesc* b0) {
	NI result0;
	int LOC13;
{	result0 = (NI)0;
	{
		if (!(a0 == b0)) goto LA3;
{		result0 = ((NI) 0);
		goto BeforeRet;
}	}
	LA3: ;
	{
		if (!(a0 == NIM_NIL)) goto LA7;
{		result0 = ((NI) -1);
		goto BeforeRet;
}	}
	LA7: ;
	{
		if (!(b0 == NIM_NIL)) goto LA11;
{		result0 = ((NI) 1);
		goto BeforeRet;
}	}
	LA11: ;
	LOC13 = (int)0;
	LOC13 = strcmp(((NCSTRING) ((*a0).data)), ((NCSTRING) ((*b0).data)));
	result0 = ((NI) (LOC13));
	goto BeforeRet;
	}BeforeRet: ;
	return result0;
}

static N_INLINE(NIM_BOOL, eqStrings)(NimStringDesc* a0, NimStringDesc* b0) {
	NIM_BOOL result0;
	NIM_BOOL LOC11;
	int LOC13;
{	result0 = (NIM_BOOL)0;
	{
		if (!(a0 == b0)) goto LA3;
{		result0 = NIM_TRUE;
		goto BeforeRet;
}	}
	LA3: ;
	{
		NIM_BOOL LOC7;
		LOC7 = (NIM_BOOL)0;
		LOC7 = (a0 == NIM_NIL);
		if (LOC7) goto LA8;
		LOC7 = (b0 == NIM_NIL);
		LA8: ;
		if (!LOC7) goto LA9;
{		result0 = NIM_FALSE;
		goto BeforeRet;
}	}
	LA9: ;
	LOC11 = (NIM_BOOL)0;
	LOC11 = ((*a0).len == (*b0).len);
	if (!(LOC11)) goto LA12;
	LOC13 = (int)0;
	LOC13 = memcmp(((NCSTRING) ((*a0).data)), ((NCSTRING) ((*b0).data)), (*a0).len);
	LOC11 = (LOC13 == ((NI32) 0));
	LA12: ;
	result0 = LOC11;
	goto BeforeRet;
	}BeforeRet: ;
	return result0;
}

N_NIMCALL(NimStringDesc*, copyStrLast)(NimStringDesc* s0, NI start_79810_1689653243, NI last0) {
	NimStringDesc* result0;
	result0 = (NimStringDesc*)0;
	NI start0 = ((start_79810_1689653243 >= ((NI) 0)) ? start_79810_1689653243 : ((NI) 0));
	NI len0 = (NI)((NI)(((last0 <= (NI)((*s0).len - ((NI) 1))) ? last0 : (NI)((*s0).len - ((NI) 1))) - start0) + ((NI) 1));
	{
		if (!(((NI) 0) < len0)) goto LA3;
{		result0 = rawNewStringNoInit(len0);
		(*result0).len = len0;
		memcpy(((NCSTRING) ((*result0).data)), ((NCSTRING) ((&(*s0).data[(start0)- 0]))), len0);
		(*result0).data[(len0)- 0] = 0;
}	}
	goto LA1;
	LA3: ;
	{
		result0 = rawNewString(len0);
	}
	LA1: ;
	return result0;
}

N_NIMCALL(NimStringDesc*, copyStr)(NimStringDesc* s0, NI start0) {
	NimStringDesc* result0;
	result0 = (NimStringDesc*)0;
	result0 = copyStrLast(s0, start0, (NI)((*s0).len - ((NI) 1)));
	return result0;
}

N_NIMCALL(NI, hashString)(NimStringDesc* s0) {
	NI result0;
	result0 = (NI)0;
	NI h0 = ((NI) 0);
	{
		NI i_80020_1689653243;
		NI HEX3Atmp_80068_1689653243;
		i_80020_1689653243 = (NI)0;
		HEX3Atmp_80068_1689653243 = (NI)0;
		HEX3Atmp_80068_1689653243 = (NI)((s0 ? s0->len : 0) - ((NI) 1));
		NI res_80071_1689653243 = ((NI) 0);
		{
			while (1) {
				if (!(res_80071_1689653243 <= HEX3Atmp_80068_1689653243)) goto LA3;
				i_80020_1689653243 = res_80071_1689653243;
				h0 = (NI)((NU64)(h0) + (NU64)(((NI) (((NU8)(s0->data[i_80020_1689653243]))))));
				h0 = (NI)((NU64)(h0) + (NU64)((NI)((NU64)(h0) << (NU64)(((NI) 10)))));
				h0 = (NI)(h0 ^ (NI)((NU64)(h0) >> (NU64)(((NI) 6))));
				res_80071_1689653243 += ((NI) 1);
			} LA3: ;
		}
	}
	h0 = (NI)((NU64)(h0) + (NU64)((NI)((NU64)(h0) << (NU64)(((NI) 3)))));
	h0 = (NI)(h0 ^ (NI)((NU64)(h0) >> (NU64)(((NI) 11))));
	h0 = (NI)((NU64)(h0) + (NU64)((NI)((NU64)(h0) << (NU64)(((NI) 15)))));
	result0 = h0;
	return result0;
}

static N_INLINE(void, appendChar)(NimStringDesc* dest0, NIM_CHAR c0) {
	(*dest0).data[((*dest0).len)- 0] = c0;
	(*dest0).data[((NI)((*dest0).len + ((NI) 1)))- 0] = 0;
	(*dest0).len += ((NI) 1);
}

N_NIMCALL(TGenericSeq*, incrSeq)(TGenericSeq* seq0, NI elemsize0) {
	TGenericSeq* result0;
	result0 = (TGenericSeq*)0;
	result0 = seq0;
	{
		void* LOC5;
		if (!((NI)((*result0).reserved & ((NI) IL64(9223372036854775807))) <= (*result0).len)) goto LA3;
{		(*result0).reserved = resize_79201_1689653243((NI)((*result0).reserved & ((NI) IL64(9223372036854775807))));
		LOC5 = (void*)0;
		LOC5 = growobj_67009_1689653243(((void*) (result0)), (NI)((NI)(elemsize0 * (*result0).reserved) + ((NI) 16)));
		result0 = ((TGenericSeq*) (LOC5));
}	}
	LA3: ;
	(*result0).len += ((NI) 1);
	return result0;
}

N_NIMCALL(TGenericSeq*, incrSeqV2)(TGenericSeq* seq0, NI elemsize0) {
	TGenericSeq* result0;
	result0 = (TGenericSeq*)0;
	result0 = seq0;
	{
		void* LOC5;
		if (!((NI)((*result0).reserved & ((NI) IL64(9223372036854775807))) <= (*result0).len)) goto LA3;
{		(*result0).reserved = resize_79201_1689653243((NI)((*result0).reserved & ((NI) IL64(9223372036854775807))));
		LOC5 = (void*)0;
		LOC5 = growobj_67009_1689653243(((void*) (result0)), (NI)((NI)(elemsize0 * (*result0).reserved) + ((NI) 16)));
		result0 = ((TGenericSeq*) (LOC5));
}	}
	LA3: ;
	return result0;
}

N_NIMCALL(TGenericSeq*, setLengthSeq)(TGenericSeq* seq0, NI elemsize0, NI newlen0) {
	TGenericSeq* result0;
	result0 = (TGenericSeq*)0;
	result0 = seq0;
	{
		NI LOC5;
		void* LOC6;
		if (!((NI)((*result0).reserved & ((NI) IL64(9223372036854775807))) < newlen0)) goto LA3;
{		LOC5 = (NI)0;
		LOC5 = resize_79201_1689653243((NI)((*result0).reserved & ((NI) IL64(9223372036854775807))));
		(*result0).reserved = ((LOC5 >= newlen0) ? LOC5 : newlen0);
		LOC6 = (void*)0;
		LOC6 = growobj_67009_1689653243(((void*) (result0)), (NI)((NI)(elemsize0 * (*result0).reserved) + ((NI) 16)));
		result0 = ((TGenericSeq*) (LOC6));
}	}
	goto LA1;
	LA3: ;
	{
		if (!(newlen0 < (*result0).len)) goto LA8;
{		{
			NI i_80410_1689653243;
			NI HEX3Atmp_80487_1689653243;
			i_80410_1689653243 = (NI)0;
			HEX3Atmp_80487_1689653243 = (NI)0;
			HEX3Atmp_80487_1689653243 = (NI)((*result0).len - ((NI) 1));
			NI res_80490_1689653243 = newlen0;
			{
				while (1) {
					if (!(res_80490_1689653243 <= HEX3Atmp_80487_1689653243)) goto LA12;
					i_80410_1689653243 = res_80490_1689653243;
					forallchildrenaux_52622_1689653243(((void*) ((NI)((NU64)((NI)((NU64)(((NI) (result0))) + (NU64)(((NI) 16)))) + (NU64)((NI)((NU64)(i_80410_1689653243) * (NU64)(elemsize0)))))), (*extGetCellType(((void*) (result0)))).base, ((Walkop50610) 2));
					res_80490_1689653243 += ((NI) 1);
				} LA12: ;
			}
		}
		zeroMem(((void*) ((NI)((NU64)((NI)((NU64)(((NI) (result0))) + (NU64)(((NI) 16)))) + (NU64)((NI)((NU64)(newlen0) * (NU64)(elemsize0)))))), ((NI) ((NI)((NU64)((NI)((NU64)((*result0).len) - (NU64)(newlen0))) * (NU64)(elemsize0)))));
}	}
	goto LA1;
	LA8: ;
	LA1: ;
	(*result0).len = newlen0;
	return result0;
}

N_NIMCALL(NI, nimParseBiggestFloat)(NimStringDesc* s0, NF& number0, NI start0) {
	NI result0;
	NI exponent0;
	NU64 integer0;
	NU64 fraction0;
	TY81003 t0;
{	result0 = (NI)0;
	NI i0 = start0;
	NF sign0 = 1.0000000000000000e+00;
	NI kdigits0 = ((NI) 0);
	NI fdigits0 = ((NI) 0);
	exponent0 = (NI)0;
	integer0 = (NU64)0;
	fraction0 = (NU64)0;
	NI fracexponent0 = ((NI) 0);
	NI expsign0 = ((NI) 1);
	NI firstdigit0 = ((NI) -1);
	NIM_BOOL hassign0 = NIM_FALSE;
	{
		NIM_BOOL LOC3;
		LOC3 = (NIM_BOOL)0;
		LOC3 = ((NU8)(s0->data[i0]) == (NU8)(43));
		if (LOC3) goto LA4;
		LOC3 = ((NU8)(s0->data[i0]) == (NU8)(45));
		LA4: ;
		if (!LOC3) goto LA5;
{		hassign0 = NIM_TRUE;
		{
			if (!((NU8)(s0->data[i0]) == (NU8)(45))) goto LA9;
{			sign0 = -1.0000000000000000e+00;
}		}
		LA9: ;
		i0 += ((NI) 1);
}	}
	LA5: ;
	{
		NIM_BOOL LOC13;
		LOC13 = (NIM_BOOL)0;
		LOC13 = ((NU8)(s0->data[i0]) == (NU8)(78));
		if (LOC13) goto LA14;
		LOC13 = ((NU8)(s0->data[i0]) == (NU8)(110));
		LA14: ;
		if (!LOC13) goto LA15;
{		{
			NIM_BOOL LOC19;
			LOC19 = (NIM_BOOL)0;
			LOC19 = ((NU8)(s0->data[(NI)(i0 + ((NI) 1))]) == (NU8)(65));
			if (LOC19) goto LA20;
			LOC19 = ((NU8)(s0->data[(NI)(i0 + ((NI) 1))]) == (NU8)(97));
			LA20: ;
			if (!LOC19) goto LA21;
{			{
				NIM_BOOL LOC25;
				LOC25 = (NIM_BOOL)0;
				LOC25 = ((NU8)(s0->data[(NI)(i0 + ((NI) 2))]) == (NU8)(78));
				if (LOC25) goto LA26;
				LOC25 = ((NU8)(s0->data[(NI)(i0 + ((NI) 2))]) == (NU8)(110));
				LA26: ;
				if (!LOC25) goto LA27;
{				{
					if (!!((((NU8)(s0->data[(NI)(i0 + ((NI) 3))])) >= ((NU8)(97)) && ((NU8)(s0->data[(NI)(i0 + ((NI) 3))])) <= ((NU8)(122)) || ((NU8)(s0->data[(NI)(i0 + ((NI) 3))])) >= ((NU8)(65)) && ((NU8)(s0->data[(NI)(i0 + ((NI) 3))])) <= ((NU8)(90)) || ((NU8)(s0->data[(NI)(i0 + ((NI) 3))])) >= ((NU8)(48)) && ((NU8)(s0->data[(NI)(i0 + ((NI) 3))])) <= ((NU8)(57)) || ((NU8)(s0->data[(NI)(i0 + ((NI) 3))])) == ((NU8)(95))))) goto LA31;
{					number0 = NAN;
					result0 = (NI)((NI)(i0 + ((NI) 3)) - start0);
					goto BeforeRet;
}				}
				LA31: ;
}			}
			LA27: ;
}		}
		LA21: ;
		result0 = ((NI) 0);
		goto BeforeRet;
}	}
	LA15: ;
	{
		NIM_BOOL LOC35;
		LOC35 = (NIM_BOOL)0;
		LOC35 = ((NU8)(s0->data[i0]) == (NU8)(73));
		if (LOC35) goto LA36;
		LOC35 = ((NU8)(s0->data[i0]) == (NU8)(105));
		LA36: ;
		if (!LOC35) goto LA37;
{		{
			NIM_BOOL LOC41;
			LOC41 = (NIM_BOOL)0;
			LOC41 = ((NU8)(s0->data[(NI)(i0 + ((NI) 1))]) == (NU8)(78));
			if (LOC41) goto LA42;
			LOC41 = ((NU8)(s0->data[(NI)(i0 + ((NI) 1))]) == (NU8)(110));
			LA42: ;
			if (!LOC41) goto LA43;
{			{
				NIM_BOOL LOC47;
				LOC47 = (NIM_BOOL)0;
				LOC47 = ((NU8)(s0->data[(NI)(i0 + ((NI) 2))]) == (NU8)(70));
				if (LOC47) goto LA48;
				LOC47 = ((NU8)(s0->data[(NI)(i0 + ((NI) 2))]) == (NU8)(102));
				LA48: ;
				if (!LOC47) goto LA49;
{				{
					if (!!((((NU8)(s0->data[(NI)(i0 + ((NI) 3))])) >= ((NU8)(97)) && ((NU8)(s0->data[(NI)(i0 + ((NI) 3))])) <= ((NU8)(122)) || ((NU8)(s0->data[(NI)(i0 + ((NI) 3))])) >= ((NU8)(65)) && ((NU8)(s0->data[(NI)(i0 + ((NI) 3))])) <= ((NU8)(90)) || ((NU8)(s0->data[(NI)(i0 + ((NI) 3))])) >= ((NU8)(48)) && ((NU8)(s0->data[(NI)(i0 + ((NI) 3))])) <= ((NU8)(57)) || ((NU8)(s0->data[(NI)(i0 + ((NI) 3))])) == ((NU8)(95))))) goto LA53;
{					number0 = ((NF)(INF) * (NF)(sign0));
					result0 = (NI)((NI)(i0 + ((NI) 3)) - start0);
					goto BeforeRet;
}				}
				LA53: ;
}			}
			LA49: ;
}		}
		LA43: ;
		result0 = ((NI) 0);
		goto BeforeRet;
}	}
	LA37: ;
	{
		if (!(((NU8)(s0->data[i0])) >= ((NU8)(48)) && ((NU8)(s0->data[i0])) <= ((NU8)(57)))) goto LA57;
{		firstdigit0 = ((NI) ((NI)(((NI) (((NU8)(s0->data[i0])))) - ((NI) 48))));
}	}
	LA57: ;
	{
		while (1) {
			if (!(((NU8)(s0->data[i0])) >= ((NU8)(48)) && ((NU8)(s0->data[i0])) <= ((NU8)(57)))) goto LA60;
			kdigits0 += ((NI) 1);
			integer0 = (NU64)((NU64)((NU64)((NU64)(integer0) * (NU64)(10ULL))) + (NU64)(((NU64) ((NI)(((NI) (((NU8)(s0->data[i0])))) - ((NI) 48))))));
			i0 += ((NI) 1);
			{
				while (1) {
					if (!((NU8)(s0->data[i0]) == (NU8)(95))) goto LA62;
					i0 += ((NI) 1);
				} LA62: ;
			}
		} LA60: ;
	}
	{
		if (!((NU8)(s0->data[i0]) == (NU8)(46))) goto LA65;
{		i0 += ((NI) 1);
		{
			if (!(kdigits0 <= ((NI) 0))) goto LA69;
{			{
				while (1) {
					if (!((NU8)(s0->data[i0]) == (NU8)(48))) goto LA72;
					fracexponent0 += ((NI) 1);
					i0 += ((NI) 1);
					{
						while (1) {
							if (!((NU8)(s0->data[i0]) == (NU8)(95))) goto LA74;
							i0 += ((NI) 1);
						} LA74: ;
					}
				} LA72: ;
			}
}		}
		LA69: ;
		{
			NIM_BOOL LOC77;
			LOC77 = (NIM_BOOL)0;
			LOC77 = (firstdigit0 == ((NI) -1));
			if (!(LOC77)) goto LA78;
			LOC77 = (((NU8)(s0->data[i0])) >= ((NU8)(48)) && ((NU8)(s0->data[i0])) <= ((NU8)(57)));
			LA78: ;
			if (!LOC77) goto LA79;
{			firstdigit0 = ((NI) ((NI)(((NI) (((NU8)(s0->data[i0])))) - ((NI) 48))));
}		}
		LA79: ;
		{
			while (1) {
				if (!(((NU8)(s0->data[i0])) >= ((NU8)(48)) && ((NU8)(s0->data[i0])) <= ((NU8)(57)))) goto LA82;
				fdigits0 += ((NI) 1);
				fracexponent0 += ((NI) 1);
				integer0 = (NU64)((NU64)((NU64)((NU64)(integer0) * (NU64)(10ULL))) + (NU64)(((NU64) ((NI)(((NI) (((NU8)(s0->data[i0])))) - ((NI) 48))))));
				i0 += ((NI) 1);
				{
					while (1) {
						if (!((NU8)(s0->data[i0]) == (NU8)(95))) goto LA84;
						i0 += ((NI) 1);
					} LA84: ;
				}
			} LA82: ;
		}
}	}
	LA65: ;
	{
		NIM_BOOL LOC87;
		NIM_BOOL LOC89;
		NIM_BOOL LOC91;
		LOC87 = (NIM_BOOL)0;
		LOC87 = ((NI)(kdigits0 + fdigits0) <= ((NI) 0));
		if (!(LOC87)) goto LA88;
		LOC89 = (NIM_BOOL)0;
		LOC89 = (i0 == start0);
		if (LOC89) goto LA90;
		LOC91 = (NIM_BOOL)0;
		LOC91 = (i0 == (NI)(start0 + ((NI) 1)));
		if (!(LOC91)) goto LA92;
		LOC91 = hassign0;
		LA92: ;
		LOC89 = LOC91;
		LA90: ;
		LOC87 = LOC89;
		LA88: ;
		if (!LOC87) goto LA93;
{		result0 = ((NI) 0);
		goto BeforeRet;
}	}
	LA93: ;
	{
		if (!(((NU8)(s0->data[i0])) == ((NU8)(101)) || ((NU8)(s0->data[i0])) == ((NU8)(69)))) goto LA97;
{		i0 += ((NI) 1);
		{
			NIM_BOOL LOC101;
			LOC101 = (NIM_BOOL)0;
			LOC101 = ((NU8)(s0->data[i0]) == (NU8)(43));
			if (LOC101) goto LA102;
			LOC101 = ((NU8)(s0->data[i0]) == (NU8)(45));
			LA102: ;
			if (!LOC101) goto LA103;
{			{
				if (!((NU8)(s0->data[i0]) == (NU8)(45))) goto LA107;
{				expsign0 = ((NI) -1);
}			}
			LA107: ;
			i0 += ((NI) 1);
}		}
		LA103: ;
		{
			if (!!((((NU8)(s0->data[i0])) >= ((NU8)(48)) && ((NU8)(s0->data[i0])) <= ((NU8)(57))))) goto LA111;
{			result0 = ((NI) 0);
			goto BeforeRet;
}		}
		LA111: ;
		{
			while (1) {
				if (!(((NU8)(s0->data[i0])) >= ((NU8)(48)) && ((NU8)(s0->data[i0])) <= ((NU8)(57)))) goto LA114;
				exponent0 = (NI)((NI)(exponent0 * ((NI) 10)) + ((NI) ((NI)(((NI) (((NU8)(s0->data[i0])))) - ((NI) 48)))));
				i0 += ((NI) 1);
				{
					while (1) {
						if (!((NU8)(s0->data[i0]) == (NU8)(95))) goto LA116;
						i0 += ((NI) 1);
					} LA116: ;
				}
			} LA114: ;
		}
}	}
	LA97: ;
	NI realexponent0 = (NI)((NI)(expsign0 * exponent0) - fracexponent0);
	NIM_BOOL expnegative0 = (realexponent0 < ((NI) 0));
	NI absexponent0 = (realexponent0 > 0? (realexponent0) : -(realexponent0));
	{
		if (!(((NI) 999) < absexponent0)) goto LA119;
{		{
			if (!expnegative0) goto LA123;
{			number0 = ((NF)(0.0) * (NF)(sign0));
}		}
		goto LA121;
		LA123: ;
		{
			number0 = ((NF)(INF) * (NF)(sign0));
		}
		LA121: ;
		result0 = (NI)(i0 - start0);
		goto BeforeRet;
}	}
	LA119: ;
	{
		NIM_BOOL LOC128;
		LOC128 = (NIM_BOOL)0;
		LOC128 = ((NI)(kdigits0 + fdigits0) <= ((NI) 16));
		if (!(LOC128)) goto LA129;
		LOC128 = (firstdigit0 <= ((NI) 8));
		LA129: ;
		if (!LOC128) goto LA130;
{		{
			if (!(absexponent0 <= ((NI) 22))) goto LA134;
{			{
				if (!expnegative0) goto LA138;
{				number0 = ((NF)(((NF)(sign0) * (NF)(((NF) (integer0))))) / (NF)(powtens_80607_1689653243[(absexponent0)- 0]));
}			}
			goto LA136;
			LA138: ;
			{
				number0 = ((NF)(((NF)(sign0) * (NF)(((NF) (integer0))))) * (NF)(powtens_80607_1689653243[(absexponent0)- 0]));
			}
			LA136: ;
			result0 = (NI)(i0 - start0);
			goto BeforeRet;
}		}
		LA134: ;
		NI slop0 = (NI)((NI)(((NI) 15) - kdigits0) - fdigits0);
		{
			NIM_BOOL LOC143;
			LOC143 = (NIM_BOOL)0;
			LOC143 = (absexponent0 <= (NI)(((NI) 22) + slop0));
			if (!(LOC143)) goto LA144;
			LOC143 = !(expnegative0);
			LA144: ;
			if (!LOC143) goto LA145;
{			number0 = ((NF)(((NF)(((NF)(sign0) * (NF)(((NF) (integer0))))) * (NF)(powtens_80607_1689653243[(slop0)- 0]))) * (NF)(powtens_80607_1689653243[((NI)(absexponent0 - slop0))- 0]));
			result0 = (NI)(i0 - start0);
			goto BeforeRet;
}		}
		LA145: ;
}	}
	LA130: ;
	memset((void*)t0, 0, sizeof(t0));
	NI ti0 = ((NI) 0);
	NI maxlen0 = ((NI) 494);
	result0 = (NI)(i0 - start0);
	i0 = start0;
	{
		while (1) {
			if (!(((NU8)(s0->data[i0])) >= ((NU8)(48)) && ((NU8)(s0->data[i0])) <= ((NU8)(57)) || ((NU8)(s0->data[i0])) == ((NU8)(43)) || ((NU8)(s0->data[i0])) == ((NU8)(45)))) goto LA148;
			{
				if (!(ti0 < maxlen0)) goto LA151;
{				t0[(ti0)- 0] = s0->data[i0];
				ti0 += ((NI) 1);
}			}
			LA151: ;
			i0 += ((NI) 1);
			{
				while (1) {
					if (!(((NU8)(s0->data[i0])) == ((NU8)(46)) || ((NU8)(s0->data[i0])) == ((NU8)(95)))) goto LA154;
					i0 += ((NI) 1);
				} LA154: ;
			}
		} LA148: ;
	}
	t0[(ti0)- 0] = 69;
	ti0 += ((NI) 1);
	{
		if (!expnegative0) goto LA157;
{		t0[(ti0)- 0] = 45;
}	}
	goto LA155;
	LA157: ;
	{
		t0[(ti0)- 0] = 43;
	}
	LA155: ;
	ti0 += ((NI) 1);
	ti0 += ((NI) 3);
	t0[((NI)(ti0 - ((NI) 1)))- 0] = ((NIM_CHAR) ((NI)(((NI) 48) + ((NI) ((NI)(absexponent0 % ((NI) 10)))))));
	absexponent0 = (NI)(absexponent0 / ((NI) 10));
	t0[((NI)(ti0 - ((NI) 2)))- 0] = ((NIM_CHAR) ((NI)(((NI) 48) + ((NI) ((NI)(absexponent0 % ((NI) 10)))))));
	absexponent0 = (NI)(absexponent0 / ((NI) 10));
	t0[((NI)(ti0 - ((NI) 3)))- 0] = ((NIM_CHAR) ((NI)(((NI) 48) + ((NI) ((NI)(absexponent0 % ((NI) 10)))))));
	number0 = strtod(((NCSTRING) (t0)), NIM_NIL);
	}BeforeRet: ;
	return result0;
}

N_NIMCALL(NimStringDesc*, nimBoolToStr)(NIM_BOOL x0) {
	NimStringDesc* result0;
{	result0 = (NimStringDesc*)0;
	{
		if (!x0) goto LA3;
{		result0 = copyString(((NimStringDesc*) &TMP34));
}	}
	goto LA1;
	LA3: ;
	{
		result0 = copyString(((NimStringDesc*) &TMP35));
	}
	LA1: ;
	goto BeforeRet;
	}BeforeRet: ;
	return result0;
}

N_NIMCALL(NimStringDesc*, nimCharToStr)(NIM_CHAR x0) {
	NimStringDesc* result0;
	result0 = (NimStringDesc*)0;
	result0 = mnewString(((NI) 1));
	result0->data[((NI) 0)] = x0;
	return result0;
}

N_NIMCALL(NI, binaryStrSearch)(NimStringDesc** x0, NI x0Len0, NimStringDesc* y0) {
	NI result0;
	result0 = (NI)0;
	NI a0 = ((NI) 0);
	NI b0 = x0Len0;
	{
		while (1) {
			if (!(a0 < b0)) goto LA2;
			NI mid0 = (NI)((NI)(a0 + b0) / ((NI) 2));
			{
				if (!(cmpStrings(x0[mid0], y0) < 0)) goto LA5;
{				a0 = (NI)(mid0 + ((NI) 1));
}			}
			goto LA3;
			LA5: ;
			{
				b0 = mid0;
			}
			LA3: ;
		} LA2: ;
	}
	{
		NIM_BOOL LOC10;
		LOC10 = (NIM_BOOL)0;
		LOC10 = (a0 < x0Len0);
		if (!(LOC10)) goto LA11;
		LOC10 = eqStrings(x0[a0], y0);
		LA11: ;
		if (!LOC10) goto LA12;
{		result0 = a0;
}	}
	goto LA8;
	LA12: ;
	{
		result0 = ((NI) -1);
	}
	LA8: ;
	return result0;
}

N_NIMCALL(NimStringDesc*, readallfile_82284_1689653243)(FILE* file0) {
	NimStringDesc* result0;
	nimfr("readAllFile", "sysio.nim")
	result0 = (NimStringDesc*)0;
	nimln(208, "sysio.nim");
	NI len0 = rawfilesize_82266_1689653243(file0);
	nimln(209, "sysio.nim");
	result0 = readallfile_82277_1689653243(file0, len0);
	popFrame();
	return result0;
}

static N_INLINE(void, rawEcho)(NimStringDesc* x0) {
	nimfr("rawEcho", "sysio.nim")
	nimln(234, "sysio.nim");
	write_15689_1689653243(stdout, x0);
	popFrame();
}

static N_INLINE(void, rawEchoNL)(void) {
	nimfr("rawEchoNL", "sysio.nim")
	nimln(235, "sysio.nim");
	write_15689_1689653243(stdout, ((NimStringDesc*) &TMP10));
	popFrame();
}

N_NIMCALL(NI, len_82812_1689653243)(NI16* w0) {
	NI result0;
	nimfr("len", "widestrs.nim")
	result0 = (NI)0;
	{
		nimln(24, "widestrs.nim");
		while (1) {
			nimln(343, "system.nim");
			if (!!((w0[(result0)- 0] == ((NI16) 0)))) goto LA2;
			nimln(24, "widestrs.nim");
			result0 += ((NI) 1);
		} LA2: ;
	}
	popFrame();
	return result0;
}
N_NIMCALL(void, TMP78)(void* p, NI op) {
	NI16* a;
	NI LOC1;
	a = (NI16*)p;
	LOC1 = (NI)0;
	for (LOC1 = 0; LOC1 < 1000001; LOC1++) {
	}
}

N_NIMCALL(NI16*, newwidecstring_83812_1689653243)(NCSTRING source0, NI L0) {
	NI16* result0;
	nimfr("newWideCString", "widestrs.nim")
	result0 = (NI16*)0;
	nimln(85, "widestrs.nim");
	result0 = (NI16*) newObj((&NTI82804), ((NI) ((NI)((NI)(L0 * ((NI) 4)) + ((NI) 2)))));
	nimln(87, "widestrs.nim");
	NI d0 = ((NI) 0);
	{
		NI ch_83828_1689653243;
		NI result_83921_1689653243;
		ch_83828_1689653243 = (NI)0;
		nimln(78, "widestrs.nim");
		NI i_83919_1689653243 = ((NI) 0);
		result_83921_1689653243 = (NI)0;
		{
			nimln(80, "widestrs.nim");
			while (1) {
				nimln(343, "system.nim");
				if (!!(((NU8)(source0[i_83919_1689653243]) == (NU8)(0)))) goto LA3;
				nimln(49, "widestrs.nim");
				{
					if (!((NU64)(((NI) (((NU8)(source0[i_83919_1689653243]))))) <= (NU64)(((NI) 127)))) goto LA6;
{					nimln(50, "widestrs.nim");
					result_83921_1689653243 = ((NI) (((NU8)(source0[i_83919_1689653243]))));
					nimln(51, "widestrs.nim");
					i_83919_1689653243 += ((NI) 1);
}				}
				goto LA4;
				LA6: ;
				{
					nimln(52, "widestrs.nim");
					if (!((NI)((NU64)(((NI) (((NU8)(source0[i_83919_1689653243]))))) >> (NU64)(((NI) 5))) == ((NI) 6))) goto LA9;
{					nimln(54, "widestrs.nim");
					result_83921_1689653243 = (NI)((NI)((NU64)(((NI) ((NI)(((NI) (((NU8)(source0[i_83919_1689653243])))) & ((NI) 31))))) << (NU64)(((NI) 6))) | ((NI) ((NI)(((NI) (((NU8)(source0[(NI)(i_83919_1689653243 + ((NI) 1))])))) & ((NI) 63)))));
					nimln(55, "widestrs.nim");
					i_83919_1689653243 += ((NI) 2);
}				}
				goto LA4;
				LA9: ;
				{
					nimln(56, "widestrs.nim");
					if (!((NI)((NU64)(((NI) (((NU8)(source0[i_83919_1689653243]))))) >> (NU64)(((NI) 4))) == ((NI) 14))) goto LA12;
{					nimln(59, "widestrs.nim");
					nimln(60, "widestrs.nim");
					nimln(59, "widestrs.nim");
					nimln(60, "widestrs.nim");
					nimln(61, "widestrs.nim");
					result_83921_1689653243 = (NI)((NI)((NI)((NU64)(((NI) ((NI)(((NI) (((NU8)(source0[i_83919_1689653243])))) & ((NI) 15))))) << (NU64)(((NI) 12))) | (NI)((NU64)(((NI) ((NI)(((NI) (((NU8)(source0[(NI)(i_83919_1689653243 + ((NI) 1))])))) & ((NI) 63))))) << (NU64)(((NI) 6)))) | ((NI) ((NI)(((NI) (((NU8)(source0[(NI)(i_83919_1689653243 + ((NI) 2))])))) & ((NI) 63)))));
					nimln(62, "widestrs.nim");
					i_83919_1689653243 += ((NI) 3);
}				}
				goto LA4;
				LA12: ;
				{
					nimln(63, "widestrs.nim");
					if (!((NI)((NU64)(((NI) (((NU8)(source0[i_83919_1689653243]))))) >> (NU64)(((NI) 3))) == ((NI) 30))) goto LA15;
{					nimln(67, "widestrs.nim");
					nimln(69, "widestrs.nim");
					nimln(68, "widestrs.nim");
					nimln(67, "widestrs.nim");
					nimln(68, "widestrs.nim");
					nimln(69, "widestrs.nim");
					nimln(70, "widestrs.nim");
					result_83921_1689653243 = (NI)((NI)((NI)((NI)((NU64)(((NI) ((NI)(((NI) (((NU8)(source0[i_83919_1689653243])))) & ((NI) 7))))) << (NU64)(((NI) 18))) | (NI)((NU64)(((NI) ((NI)(((NI) (((NU8)(source0[(NI)(i_83919_1689653243 + ((NI) 1))])))) & ((NI) 63))))) << (NU64)(((NI) 12)))) | (NI)((NU64)(((NI) ((NI)(((NI) (((NU8)(source0[(NI)(i_83919_1689653243 + ((NI) 2))])))) & ((NI) 63))))) << (NU64)(((NI) 6)))) | ((NI) ((NI)(((NI) (((NU8)(source0[(NI)(i_83919_1689653243 + ((NI) 3))])))) & ((NI) 63)))));
					nimln(71, "widestrs.nim");
					i_83919_1689653243 += ((NI) 4);
}				}
				goto LA4;
				LA15: ;
				{
					nimln(73, "widestrs.nim");
					result_83921_1689653243 = ((NI) 65533);
					nimln(74, "widestrs.nim");
					i_83919_1689653243 += ((NI) 1);
				}
				LA4: ;
				nimln(79, "widestrs.nim");
				ch_83828_1689653243 = result_83921_1689653243;
				nimln(89, "widestrs.nim");
				{
					if (!((NU64)(ch_83828_1689653243) <= (NU64)(((NI) 65535)))) goto LA20;
{					nimln(90, "widestrs.nim");
					{
						NIM_BOOL LOC24;
						LOC24 = (NIM_BOOL)0;
						nimln(1741, "system.nim");
						LOC24 = ((NU64)(((NI) 55296)) <= (NU64)(ch_83828_1689653243));
						if (!(LOC24)) goto LA25;
						nimln(90, "widestrs.nim");
						LOC24 = ((NU64)(ch_83828_1689653243) <= (NU64)(((NI) 57343)));
						LA25: ;
						if (!LOC24) goto LA26;
{						nimln(91, "widestrs.nim");
						result0[(d0)- 0] = ((NI16) -3);
}					}
					goto LA22;
					LA26: ;
					{
						nimln(93, "widestrs.nim");
						result0[(d0)- 0] = ((NI16)(NU16)(NU)(ch_83828_1689653243));
					}
					LA22: ;
}				}
				goto LA18;
				LA20: ;
				{
					nimln(1745, "system.nim");
					if (!((NU64)(((NI) 1114111)) < (NU64)(ch_83828_1689653243))) goto LA30;
{					nimln(95, "widestrs.nim");
					result0[(d0)- 0] = ((NI16) -3);
}				}
				goto LA18;
				LA30: ;
				{
					nimln(97, "widestrs.nim");
					NI ch0 = (NI)((NU64)(ch_83828_1689653243) - (NU64)(((NI) 65536)));
					nimln(98, "widestrs.nim");
					result0[(d0)- 0] = ((NI16)(NU16)(NU)((NI)((NU64)((NI)((NU64)(ch0) >> (NU64)(((NI) 10)))) + (NU64)(((NI) 55296)))));
					nimln(99, "widestrs.nim");
					d0 += ((NI) 1);
					nimln(100, "widestrs.nim");
					result0[(d0)- 0] = ((NI16)(NU16)(NU)(((NI) ((NI)((NU64)(((NI) ((NI)(ch0 & ((NI) 1023))))) + (NU64)(((NI) 56320)))))));
				}
				LA18: ;
				nimln(101, "widestrs.nim");
				d0 += ((NI) 1);
			} LA3: ;
		}
	}
	nimln(102, "widestrs.nim");
	result0[(d0)- 0] = ((NI16) 0);
	popFrame();
	return result0;
}

N_NIMCALL(NI16*, newwidecstring_83923_1689653243)(NCSTRING s0) {
	NI16* result0;
	nimfr("newWideCString", "widestrs.nim")
{	result0 = (NI16*)0;
	nimln(105, "widestrs.nim");
	{
		if (!s0 == 0) goto LA3;
{		result0 = NIM_NIL;
		goto BeforeRet;
}	}
	LA3: ;
	nimln(111, "widestrs.nim");
	NI L0 = strlen(s0);
	nimln(112, "widestrs.nim");
	result0 = newwidecstring_83812_1689653243(s0, L0);
	}BeforeRet: ;
	popFrame();
	return result0;
}

N_NIMCALL(NI16*, newwidecstring_84002_1689653243)(NimStringDesc* s0) {
	NI16* result0;
	nimfr("newWideCString", "widestrs.nim")
	result0 = (NI16*)0;
	nimln(115, "widestrs.nim");
	result0 = newwidecstring_83812_1689653243(s0->data, (s0 ? s0->len : 0));
	popFrame();
	return result0;
}

N_NIMCALL(NimStringDesc*, HEX24_84006_1689653243)(NI16* w0, NI estimate0, NI replacement0) {
	NimStringDesc* result0;
	nimfr("$", "widestrs.nim")
	result0 = (NimStringDesc*)0;
	nimln(118, "widestrs.nim");
	result0 = rawNewString(((NI) ((NI)(estimate0 + (NI)((NU64)(estimate0) >> (NU64)(((NI) 2)))))));
	nimln(120, "widestrs.nim");
	NI i0 = ((NI) 0);
	{
		nimln(121, "widestrs.nim");
		while (1) {
			nimln(343, "system.nim");
			if (!!((w0[(i0)- 0] == ((NI16) 0)))) goto LA2;
			nimln(122, "widestrs.nim");
			NI ch0 = ((NI) (((NU16) (w0[(i0)- 0]))));
			nimln(123, "widestrs.nim");
			i0 += ((NI) 1);
			nimln(124, "widestrs.nim");
			{
				NIM_BOOL LOC5;
				LOC5 = (NIM_BOOL)0;
				nimln(347, "system.nim");
				LOC5 = (((NI) 55296) <= ch0);
				if (!(LOC5)) goto LA6;
				nimln(124, "widestrs.nim");
				LOC5 = (ch0 <= ((NI) 56319));
				LA6: ;
				if (!LOC5) goto LA7;
{				nimln(126, "widestrs.nim");
				NI ch20 = ((NI) (((NU16) (w0[(i0)- 0]))));
				nimln(129, "widestrs.nim");
				{
					NIM_BOOL LOC11;
					LOC11 = (NIM_BOOL)0;
					nimln(347, "system.nim");
					LOC11 = (((NI) 56320) <= ch20);
					if (!(LOC11)) goto LA12;
					nimln(129, "widestrs.nim");
					LOC11 = (ch20 <= ((NI) 57343));
					LA12: ;
					if (!LOC11) goto LA13;
{					nimln(130, "widestrs.nim");
					ch0 = (NI)((NI)((NI)((NU64)(((NI) ((NI)(ch0 & ((NI) 1023))))) << (NU64)(((NI) 10))) + ((NI) ((NI)(ch20 & ((NI) 1023))))) + ((NI) 65536));
					nimln(131, "widestrs.nim");
					i0 += ((NI) 1);
}				}
				goto LA9;
				LA13: ;
				{
					nimln(134, "widestrs.nim");
					ch0 = replacement0;
				}
				LA9: ;
}			}
			goto LA3;
			LA7: ;
			{
				NIM_BOOL LOC17;
				nimln(135, "widestrs.nim");
				LOC17 = (NIM_BOOL)0;
				nimln(347, "system.nim");
				LOC17 = (((NI) 56320) <= ch0);
				if (!(LOC17)) goto LA18;
				nimln(135, "widestrs.nim");
				LOC17 = (ch0 <= ((NI) 57343));
				LA18: ;
				if (!LOC17) goto LA19;
{				nimln(137, "widestrs.nim");
				ch0 = replacement0;
}			}
			goto LA3;
			LA19: ;
			LA3: ;
			nimln(139, "widestrs.nim");
			{
				if (!(ch0 < ((NI) 128))) goto LA23;
{				nimln(140, "widestrs.nim");
				result0 = addChar(result0, ((NIM_CHAR) (((NI) (ch0)))));
}			}
			goto LA21;
			LA23: ;
			{
				nimln(141, "widestrs.nim");
				if (!(ch0 < ((NI) 2048))) goto LA26;
{				nimln(142, "widestrs.nim");
				result0 = addChar(result0, ((NIM_CHAR) (((NI) ((NI)((NI)((NU64)(ch0) >> (NU64)(((NI) 6))) | ((NI) 192)))))));
				nimln(143, "widestrs.nim");
				result0 = addChar(result0, ((NIM_CHAR) (((NI) ((NI)(((NI) ((NI)(ch0 & ((NI) 63)))) | ((NI) 128)))))));
}			}
			goto LA21;
			LA26: ;
			{
				nimln(144, "widestrs.nim");
				if (!(ch0 < ((NI) 65536))) goto LA29;
{				nimln(145, "widestrs.nim");
				result0 = addChar(result0, ((NIM_CHAR) (((NI) ((NI)((NI)((NU64)(ch0) >> (NU64)(((NI) 12))) | ((NI) 224)))))));
				nimln(146, "widestrs.nim");
				result0 = addChar(result0, ((NIM_CHAR) (((NI) ((NI)(((NI) ((NI)((NI)((NU64)(ch0) >> (NU64)(((NI) 6))) & ((NI) 63)))) | ((NI) 128)))))));
				nimln(147, "widestrs.nim");
				result0 = addChar(result0, ((NIM_CHAR) (((NI) ((NI)(((NI) ((NI)(ch0 & ((NI) 63)))) | ((NI) 128)))))));
}			}
			goto LA21;
			LA29: ;
			{
				nimln(148, "widestrs.nim");
				if (!(ch0 <= ((NI) 1114111))) goto LA32;
{				nimln(149, "widestrs.nim");
				result0 = addChar(result0, ((NIM_CHAR) (((NI) ((NI)((NI)((NU64)(ch0) >> (NU64)(((NI) 18))) | ((NI) 240)))))));
				nimln(150, "widestrs.nim");
				result0 = addChar(result0, ((NIM_CHAR) (((NI) ((NI)(((NI) ((NI)((NI)((NU64)(ch0) >> (NU64)(((NI) 12))) & ((NI) 63)))) | ((NI) 128)))))));
				nimln(151, "widestrs.nim");
				result0 = addChar(result0, ((NIM_CHAR) (((NI) ((NI)(((NI) ((NI)((NI)((NU64)(ch0) >> (NU64)(((NI) 6))) & ((NI) 63)))) | ((NI) 128)))))));
				nimln(152, "widestrs.nim");
				result0 = addChar(result0, ((NIM_CHAR) (((NI) ((NI)(((NI) ((NI)(ch0 & ((NI) 63)))) | ((NI) 128)))))));
}			}
			goto LA21;
			LA32: ;
			{
				nimln(155, "widestrs.nim");
				result0 = addChar(result0, 239);
				nimln(156, "widestrs.nim");
				result0 = addChar(result0, 191);
				nimln(157, "widestrs.nim");
				result0 = addChar(result0, 189);
			}
			LA21: ;
		} LA2: ;
	}
	popFrame();
	return result0;
}

N_NIMCALL(NimStringDesc*, HEX24_84072_1689653243)(NI16* s0) {
	NimStringDesc* result0;
	nimfr("$", "widestrs.nim")
	result0 = (NimStringDesc*)0;
	nimln(160, "widestrs.nim");
	result0 = HEX24_84006_1689653243(s0, ((NI) 80), ((NI) 65533));
	popFrame();
	return result0;
}

N_NIMCALL(void, genericReset)(void* dest0, TNimType* mt0) {
	nimfr("genericReset", "assign.nim")
	nimln(195, "assign.nim");
	NI d0 = ((NI) (dest0));
	nimln(197, "assign.nim");
	switch ((*mt0).kind) {
	case ((Tnimkind3203) 28):
	case ((Tnimkind3203) 22):
	case ((Tnimkind3203) 24):
	{
		nimln(199, "assign.nim");
		unsureAsgnRef(((void**) (dest0)), NIM_NIL);
	}
	break;
	case ((Tnimkind3203) 18):
	{
		nimln(201, "assign.nim");
		genericresetaux_85401_1689653243(dest0, (*mt0).node);
	}
	break;
	case ((Tnimkind3203) 17):
	{
		nimln(203, "assign.nim");
		genericresetaux_85401_1689653243(dest0, (*mt0).node);
		nimln(205, "assign.nim");
		TNimType** pint0 = ((TNimType**) (dest0));
		nimln(206, "assign.nim");
		(*pint0) = NIM_NIL;
	}
	break;
	case ((Tnimkind3203) 16):
	case ((Tnimkind3203) 4):
	{
		{
			NI i_86812_1689653243;
			NI HEX3Atmp_86836_1689653243;
			i_86812_1689653243 = (NI)0;
			HEX3Atmp_86836_1689653243 = (NI)0;
			nimln(208, "assign.nim");
			HEX3Atmp_86836_1689653243 = (NI)((NI)((*mt0).size / (*(*mt0).base).size) - ((NI) 1));
			nimln(1875, "system.nim");
			NI res_86839_1689653243 = ((NI) 0);
			{
				nimln(1876, "system.nim");
				while (1) {
					if (!(res_86839_1689653243 <= HEX3Atmp_86836_1689653243)) goto LA7;
					nimln(1877, "system.nim");
					i_86812_1689653243 = res_86839_1689653243;
					nimln(209, "assign.nim");
					genericReset(((void*) ((NI)((NU64)(d0) + (NU64)((NI)((NU64)(i_86812_1689653243) * (NU64)((*(*mt0).base).size)))))), (*mt0).base);
					nimln(1896, "system.nim");
					res_86839_1689653243 += ((NI) 1);
				} LA7: ;
			}
		}
	}
	break;
	default:
	{
		nimln(211, "assign.nim");
		zeroMem(dest0, ((NI) ((*mt0).size)));
	}
	break;
	}
	popFrame();
}

N_NIMCALL(void, genericresetaux_85401_1689653243)(void* dest0, TNimNode* n0) {
	nimfr("genericResetAux", "assign.nim")
	nimln(183, "assign.nim");
	NI d0 = ((NI) (dest0));
	nimln(184, "assign.nim");
	switch ((*n0).kind) {
	case ((Tnimnodekind3205) 0):
	{
	}
	break;
	case ((Tnimnodekind3205) 1):
	{
		nimln(186, "assign.nim");
		genericReset(((void*) ((NI)((NU64)(d0) + (NU64)((*n0).offset)))), (*n0).typ);
	}
	break;
	case ((Tnimnodekind3205) 2):
	{
		{
			NI i_86619_1689653243;
			NI HEX3Atmp_86645_1689653243;
			i_86619_1689653243 = (NI)0;
			HEX3Atmp_86645_1689653243 = (NI)0;
			nimln(188, "assign.nim");
			HEX3Atmp_86645_1689653243 = (NI)((*n0).len - ((NI) 1));
			nimln(1875, "system.nim");
			NI res_86648_1689653243 = ((NI) 0);
			{
				nimln(1876, "system.nim");
				while (1) {
					if (!(res_86648_1689653243 <= HEX3Atmp_86645_1689653243)) goto LA6;
					nimln(1877, "system.nim");
					i_86619_1689653243 = res_86648_1689653243;
					nimln(188, "assign.nim");
					genericresetaux_85401_1689653243(dest0, (*n0).sons[(i_86619_1689653243)- 0]);
					nimln(1896, "system.nim");
					res_86648_1689653243 += ((NI) 1);
				} LA6: ;
			}
		}
	}
	break;
	case ((Tnimnodekind3205) 3):
	{
		nimln(190, "assign.nim");
		TNimNode* m0 = selectbranch_28007_1689653243(dest0, n0);
		nimln(191, "assign.nim");
		{
			nimln(343, "system.nim");
			if (!!((m0 == NIM_NIL))) goto LA10;
{			nimln(191, "assign.nim");
			genericresetaux_85401_1689653243(dest0, m0);
}		}
		LA10: ;
		nimln(192, "assign.nim");
		zeroMem(((void*) ((NI)((NU64)(d0) + (NU64)((*n0).offset)))), ((NI) ((*(*n0).typ).size)));
	}
	break;
	}
	popFrame();
}

N_NIMCALL(void, genericassignaux_85412_1689653243)(void* dest0, void* src0, TNimNode* n0, NIM_BOOL shallow0) {
	nimfr("genericAssignAux", "assign.nim")
	nimln(16, "assign.nim");
	NI d0 = ((NI) (dest0));
	nimln(17, "assign.nim");
	NI s0 = ((NI) (src0));
	nimln(18, "assign.nim");
	switch ((*n0).kind) {
	case ((Tnimnodekind3205) 1):
	{
		nimln(20, "assign.nim");
		nimln(21, "assign.nim");
		genericassignaux_85406_1689653243(((void*) ((NI)((NU64)(d0) + (NU64)((*n0).offset)))), ((void*) ((NI)((NU64)(s0) + (NU64)((*n0).offset)))), (*n0).typ, shallow0);
	}
	break;
	case ((Tnimnodekind3205) 2):
	{
		{
			NI i_85448_1689653243;
			NI HEX3Atmp_85606_1689653243;
			i_85448_1689653243 = (NI)0;
			HEX3Atmp_85606_1689653243 = (NI)0;
			nimln(23, "assign.nim");
			HEX3Atmp_85606_1689653243 = (NI)((*n0).len - ((NI) 1));
			nimln(1875, "system.nim");
			NI res_85609_1689653243 = ((NI) 0);
			{
				nimln(1876, "system.nim");
				while (1) {
					if (!(res_85609_1689653243 <= HEX3Atmp_85606_1689653243)) goto LA5;
					nimln(1877, "system.nim");
					i_85448_1689653243 = res_85609_1689653243;
					nimln(24, "assign.nim");
					genericassignaux_85412_1689653243(dest0, src0, (*n0).sons[(i_85448_1689653243)- 0], shallow0);
					nimln(1896, "system.nim");
					res_85609_1689653243 += ((NI) 1);
				} LA5: ;
			}
		}
	}
	break;
	case ((Tnimnodekind3205) 3):
	{
		nimln(26, "assign.nim");
		TNimNode* dd0 = selectbranch_28007_1689653243(dest0, n0);
		nimln(27, "assign.nim");
		TNimNode* m0 = selectbranch_28007_1689653243(src0, n0);
		nimln(30, "assign.nim");
		{
			NIM_BOOL LOC9;
			LOC9 = (NIM_BOOL)0;
			nimln(343, "system.nim");
			LOC9 = !((m0 == dd0));
			if (!(LOC9)) goto LA10;
			LOC9 = !((dd0 == NIM_NIL));
			LA10: ;
			if (!LOC9) goto LA11;
{			nimln(31, "assign.nim");
			genericresetaux_85401_1689653243(dest0, dd0);
}		}
		LA11: ;
		nimln(32, "assign.nim");
		memcpy(((void*) ((NI)((NU64)(d0) + (NU64)((*n0).offset)))), ((void*) ((NI)((NU64)(s0) + (NU64)((*n0).offset)))), ((NI) ((*(*n0).typ).size)));
		nimln(34, "assign.nim");
		{
			nimln(343, "system.nim");
			if (!!((m0 == NIM_NIL))) goto LA15;
{			nimln(35, "assign.nim");
			genericassignaux_85412_1689653243(dest0, src0, m0, shallow0);
}		}
		LA15: ;
	}
	break;
	case ((Tnimnodekind3205) 0):
	{
	}
	break;
	}
	popFrame();
}

N_NIMCALL(void, genericassignaux_85406_1689653243)(void* dest0, void* src0, TNimType* mt0, NIM_BOOL shallow0) {
	nimfr("genericAssignAux", "assign.nim")
{	nimln(43, "assign.nim");
	NI d0 = ((NI) (dest0));
	nimln(44, "assign.nim");
	NI s0 = ((NI) (src0));
	nimln(46, "assign.nim");
	switch ((*mt0).kind) {
	case ((Tnimkind3203) 28):
	{
		nimln(48, "assign.nim");
		void** x0 = ((void**) (dest0));
		nimln(49, "assign.nim");
		void* s20 = (*((void**) (s0)));
		nimln(50, "assign.nim");
		{
			NIM_BOOL LOC4;
			NIM_BOOL LOC5;
			LOC4 = (NIM_BOOL)0;
			LOC5 = (NIM_BOOL)0;
			LOC5 = (s20 == NIM_NIL);
			if (LOC5) goto LA6;
			LOC5 = shallow0;
			LA6: ;
			LOC4 = LOC5;
			if (LOC4) goto LA7;
			nimln(343, "system.nim");
			nimln(51, "assign.nim");
			LOC4 = !(((NI)((*((TGenericSeq*) (s20))).reserved & ((NI) (IL64(-9223372036854775807) - IL64(1)))) == ((NI) 0)));
			LA7: ;
			if (!LOC4) goto LA8;
{			nimln(52, "assign.nim");
			unsureAsgnRef(x0, s20);
}		}
		goto LA2;
		LA8: ;
		{
			NimStringDesc* LOC11;
			nimln(54, "assign.nim");
			LOC11 = (NimStringDesc*)0;
			LOC11 = copyString(((NimStringDesc*) (s20)));
			unsureAsgnRef(x0, ((void*) (LOC11)));
		}
		LA2: ;
	}
	break;
	case ((Tnimkind3203) 24):
	{
		nimln(56, "assign.nim");
		void* s20 = (*((void**) (src0)));
		nimln(57, "assign.nim");
		TGenericSeq* seq0 = ((TGenericSeq*) (s20));
		nimln(58, "assign.nim");
		void** x0 = ((void**) (dest0));
		nimln(59, "assign.nim");
		{
			NIM_BOOL LOC15;
			NIM_BOOL LOC16;
			LOC15 = (NIM_BOOL)0;
			LOC16 = (NIM_BOOL)0;
			LOC16 = (s20 == NIM_NIL);
			if (LOC16) goto LA17;
			LOC16 = shallow0;
			LA17: ;
			LOC15 = LOC16;
			if (LOC15) goto LA18;
			nimln(343, "system.nim");
			nimln(59, "assign.nim");
			LOC15 = !(((NI)((*seq0).reserved & ((NI) (IL64(-9223372036854775807) - IL64(1)))) == ((NI) 0)));
			LA18: ;
			if (!LOC15) goto LA19;
{			nimln(61, "assign.nim");
			unsureAsgnRef(x0, s20);
			nimln(62, "assign.nim");
			goto BeforeRet;
}		}
		LA19: ;
		nimln(64, "assign.nim");
		unsureAsgnRef(x0, newSeq(mt0, (*seq0).len));
		nimln(65, "assign.nim");
		NI dst0 = ((NI) ((*((void**) (dest0)))));
		{
			NI i_86011_1689653243;
			NI HEX3Atmp_86141_1689653243;
			i_86011_1689653243 = (NI)0;
			HEX3Atmp_86141_1689653243 = (NI)0;
			nimln(66, "assign.nim");
			HEX3Atmp_86141_1689653243 = (NI)((*seq0).len - ((NI) 1));
			nimln(1875, "system.nim");
			NI res_86144_1689653243 = ((NI) 0);
			{
				nimln(1876, "system.nim");
				while (1) {
					if (!(res_86144_1689653243 <= HEX3Atmp_86141_1689653243)) goto LA23;
					nimln(1877, "system.nim");
					i_86011_1689653243 = res_86144_1689653243;
					nimln(67, "assign.nim");
					nimln(68, "assign.nim");
					nimln(69, "assign.nim");
					genericassignaux_85406_1689653243(((void*) ((NI)((NU64)((NI)((NU64)(dst0) + (NU64)((NI)((NU64)(i_86011_1689653243) * (NU64)((*(*mt0).base).size))))) + (NU64)(((NI) 16))))), ((void*) ((NI)((NU64)((NI)((NU64)(((NI) (s20))) + (NU64)((NI)((NU64)(i_86011_1689653243) * (NU64)((*(*mt0).base).size))))) + (NU64)(((NI) 16))))), (*mt0).base, shallow0);
					nimln(1896, "system.nim");
					res_86144_1689653243 += ((NI) 1);
				} LA23: ;
			}
		}
	}
	break;
	case ((Tnimkind3203) 17):
	{
		nimln(73, "assign.nim");
		{
			nimln(343, "system.nim");
			if (!!(((*mt0).base == NIM_NIL))) goto LA27;
{			nimln(74, "assign.nim");
			genericassignaux_85406_1689653243(dest0, src0, (*mt0).base, shallow0);
}		}
		LA27: ;
		nimln(75, "assign.nim");
		genericassignaux_85412_1689653243(dest0, src0, (*mt0).node, shallow0);
		nimln(78, "assign.nim");
		TNimType** pint0 = ((TNimType**) (dest0));
		nimln(83, "assign.nim");
		(*pint0) = mt0;
	}
	break;
	case ((Tnimkind3203) 18):
	{
		nimln(85, "assign.nim");
		genericassignaux_85412_1689653243(dest0, src0, (*mt0).node, shallow0);
	}
	break;
	case ((Tnimkind3203) 16):
	case ((Tnimkind3203) 4):
	{
		{
			NI i_86089_1689653243;
			NI HEX3Atmp_86152_1689653243;
			i_86089_1689653243 = (NI)0;
			HEX3Atmp_86152_1689653243 = (NI)0;
			nimln(87, "assign.nim");
			HEX3Atmp_86152_1689653243 = (NI)((NI)((*mt0).size / (*(*mt0).base).size) - ((NI) 1));
			nimln(1875, "system.nim");
			NI res_86155_1689653243 = ((NI) 0);
			{
				nimln(1876, "system.nim");
				while (1) {
					if (!(res_86155_1689653243 <= HEX3Atmp_86152_1689653243)) goto LA33;
					nimln(1877, "system.nim");
					i_86089_1689653243 = res_86155_1689653243;
					nimln(88, "assign.nim");
					nimln(89, "assign.nim");
					genericassignaux_85406_1689653243(((void*) ((NI)((NU64)(d0) + (NU64)((NI)((NU64)(i_86089_1689653243) * (NU64)((*(*mt0).base).size)))))), ((void*) ((NI)((NU64)(s0) + (NU64)((NI)((NU64)(i_86089_1689653243) * (NU64)((*(*mt0).base).size)))))), (*mt0).base, shallow0);
					nimln(1896, "system.nim");
					res_86155_1689653243 += ((NI) 1);
				} LA33: ;
			}
		}
	}
	break;
	case ((Tnimkind3203) 22):
	{
		nimln(91, "assign.nim");
		unsureAsgnRef(((void**) (dest0)), (*((void**) (s0))));
	}
	break;
	default:
	{
		nimln(93, "assign.nim");
		memcpy(dest0, src0, ((NI) ((*mt0).size)));
	}
	break;
	}
	}BeforeRet: ;
	popFrame();
}

N_NIMCALL(void, genericAssign)(void* dest0, void* src0, TNimType* mt0) {
	nimfr("genericAssign", "assign.nim")
	nimln(96, "assign.nim");
	genericassignaux_85406_1689653243(dest0, src0, mt0, NIM_FALSE);
	popFrame();
}

N_NIMCALL(void, genericShallowAssign)(void* dest0, void* src0, TNimType* mt0) {
	nimfr("genericShallowAssign", "assign.nim")
	nimln(99, "assign.nim");
	genericassignaux_85406_1689653243(dest0, src0, mt0, NIM_TRUE);
	popFrame();
}

N_NIMCALL(void, genericSeqAssign)(void* dest0, void* src_86204_1689653243, TNimType* mt0) {
	nimfr("genericSeqAssign", "assign.nim")
	nimln(131, "assign.nim");
	void* src0 = src_86204_1689653243;
	nimln(132, "assign.nim");
	genericAssign(dest0, ((void*) ((&src0))), mt0);
	popFrame();
}

N_NIMCALL(void, genericAssignOpenArray)(void* dest0, void* src0, NI len0, TNimType* mt0) {
	nimfr("genericAssignOpenArray", "assign.nim")
	nimln(137, "assign.nim");
	NI d0 = ((NI) (dest0));
	nimln(138, "assign.nim");
	NI s0 = ((NI) (src0));
	{
		NI i_86225_1689653243;
		NI HEX3Atmp_86267_1689653243;
		i_86225_1689653243 = (NI)0;
		HEX3Atmp_86267_1689653243 = (NI)0;
		nimln(139, "assign.nim");
		HEX3Atmp_86267_1689653243 = (NI)(len0 - ((NI) 1));
		nimln(1875, "system.nim");
		NI res_86270_1689653243 = ((NI) 0);
		{
			nimln(1876, "system.nim");
			while (1) {
				if (!(res_86270_1689653243 <= HEX3Atmp_86267_1689653243)) goto LA3;
				nimln(1877, "system.nim");
				i_86225_1689653243 = res_86270_1689653243;
				nimln(140, "assign.nim");
				nimln(141, "assign.nim");
				genericAssign(((void*) ((NI)((NU64)(d0) + (NU64)((NI)((NU64)(i_86225_1689653243) * (NU64)((*(*mt0).base).size)))))), ((void*) ((NI)((NU64)(s0) + (NU64)((NI)((NU64)(i_86225_1689653243) * (NU64)((*(*mt0).base).size)))))), (*mt0).base);
				nimln(1896, "system.nim");
				res_86270_1689653243 += ((NI) 1);
			} LA3: ;
		}
	}
	popFrame();
}

N_NIMCALL(void, objectinitaux_86278_1689653243)(void* dest0, TNimNode* n0) {
	nimfr("objectInitAux", "assign.nim")
	nimln(145, "assign.nim");
	NI d0 = ((NI) (dest0));
	nimln(146, "assign.nim");
	switch ((*n0).kind) {
	case ((Tnimnodekind3205) 0):
	{
	}
	break;
	case ((Tnimnodekind3205) 1):
	{
		nimln(148, "assign.nim");
		objectInit(((void*) ((NI)((NU64)(d0) + (NU64)((*n0).offset)))), (*n0).typ);
	}
	break;
	case ((Tnimnodekind3205) 2):
	{
		{
			NI i_86419_1689653243;
			NI HEX3Atmp_86436_1689653243;
			i_86419_1689653243 = (NI)0;
			HEX3Atmp_86436_1689653243 = (NI)0;
			nimln(150, "assign.nim");
			HEX3Atmp_86436_1689653243 = (NI)((*n0).len - ((NI) 1));
			nimln(1875, "system.nim");
			NI res_86439_1689653243 = ((NI) 0);
			{
				nimln(1876, "system.nim");
				while (1) {
					if (!(res_86439_1689653243 <= HEX3Atmp_86436_1689653243)) goto LA6;
					nimln(1877, "system.nim");
					i_86419_1689653243 = res_86439_1689653243;
					nimln(151, "assign.nim");
					objectinitaux_86278_1689653243(dest0, (*n0).sons[(i_86419_1689653243)- 0]);
					nimln(1896, "system.nim");
					res_86439_1689653243 += ((NI) 1);
				} LA6: ;
			}
		}
	}
	break;
	case ((Tnimnodekind3205) 3):
	{
		nimln(153, "assign.nim");
		TNimNode* m0 = selectbranch_28007_1689653243(dest0, n0);
		nimln(154, "assign.nim");
		{
			nimln(343, "system.nim");
			if (!!((m0 == NIM_NIL))) goto LA10;
{			nimln(154, "assign.nim");
			objectinitaux_86278_1689653243(dest0, m0);
}		}
		LA10: ;
	}
	break;
	}
	popFrame();
}

N_NIMCALL(void, objectInit)(void* dest0, TNimType* typ0) {
	nimfr("objectInit", "assign.nim")
	nimln(159, "assign.nim");
	NI d0 = ((NI) (dest0));
	nimln(160, "assign.nim");
	switch ((*typ0).kind) {
	case ((Tnimkind3203) 17):
	{
		nimln(164, "assign.nim");
		TNimType** pint0 = ((TNimType**) (dest0));
		nimln(165, "assign.nim");
		(*pint0) = typ0;
		nimln(166, "assign.nim");
		objectinitaux_86278_1689653243(dest0, (*typ0).node);
	}
	break;
	case ((Tnimkind3203) 18):
	{
		nimln(168, "assign.nim");
		objectinitaux_86278_1689653243(dest0, (*typ0).node);
	}
	break;
	case ((Tnimkind3203) 16):
	case ((Tnimkind3203) 4):
	{
		{
			NI i_86459_1689653243;
			NI HEX3Atmp_86473_1689653243;
			i_86459_1689653243 = (NI)0;
			HEX3Atmp_86473_1689653243 = (NI)0;
			nimln(170, "assign.nim");
			HEX3Atmp_86473_1689653243 = (NI)((NI)((*typ0).size / (*(*typ0).base).size) - ((NI) 1));
			nimln(1875, "system.nim");
			NI res_86476_1689653243 = ((NI) 0);
			{
				nimln(1876, "system.nim");
				while (1) {
					if (!(res_86476_1689653243 <= HEX3Atmp_86473_1689653243)) goto LA6;
					nimln(1877, "system.nim");
					i_86459_1689653243 = res_86476_1689653243;
					nimln(171, "assign.nim");
					objectInit(((void*) ((NI)((NU64)(d0) + (NU64)((NI)(i_86459_1689653243 * (*(*typ0).base).size))))), (*typ0).base);
					nimln(1896, "system.nim");
					res_86476_1689653243 += ((NI) 1);
				} LA6: ;
			}
		}
	}
	break;
	default:
	{
	}
	break;
	}
	popFrame();
}

N_NIMCALL(TNimNode*, selectbranch_86843_1689653243)(NI discval0, NI L0, TNimNode** a0) {
	TNimNode* result0;
	nimfr("selectBranch", "assign.nim")
	result0 = (TNimNode*)0;
	nimln(215, "assign.nim");
	result0 = a0[(L0)- 0];
	nimln(216, "assign.nim");
	{
		if (!((NU64)(discval0) < (NU64)(L0))) goto LA3;
{		nimln(217, "assign.nim");
		TNimNode* x0 = a0[(discval0)- 0];
		nimln(218, "assign.nim");
		{
			nimln(343, "system.nim");
			if (!!((x0 == NIM_NIL))) goto LA7;
{			nimln(218, "assign.nim");
			result0 = x0;
}		}
		LA7: ;
}	}
	LA3: ;
	popFrame();
	return result0;
}

N_NIMCALL(void, FieldDiscriminantCheck)(NI olddiscval0, NI newdiscval0, TNimNode** a0, NI L0) {
	nimfr("FieldDiscriminantCheck", "assign.nim")
	nimln(223, "assign.nim");
	TNimNode* oldbranch0 = selectbranch_86843_1689653243(olddiscval0, L0, a0);
	nimln(224, "assign.nim");
	TNimNode* newbranch0 = selectbranch_86843_1689653243(newdiscval0, L0, a0);
	nimln(225, "assign.nim");
	{
		NIM_BOOL LOC3;
		LOC3 = (NIM_BOOL)0;
		nimln(343, "system.nim");
		LOC3 = !((newbranch0 == oldbranch0));
		if (!(LOC3)) goto LA4;
		LOC3 = !((olddiscval0 == ((NI) 0)));
		LA4: ;
		if (!LOC3) goto LA5;
{		nimln(226, "assign.nim");
		sysfatal_86903_1689653243(((NimStringDesc*) &TMP79));
}	}
	LA5: ;
	popFrame();
}

N_NIMCALL(void, initreprclosure_87401_1689653243)(Reprclosure87355& cl0) {
	nimfr("initReprClosure", "repr.nim")
	nimln(153, "repr.nim");
	init_48228_1689653243(cl0.marked);
	nimln(154, "repr.nim");
	cl0.recdepth = ((NI) -1);
	nimln(155, "repr.nim");
	cl0.indent = ((NI) 0);
	popFrame();
}

N_NIMCALL(NimStringDesc*, reprEnum)(NI e0, TNimType* typ0) {
	NimStringDesc* result0;
	NimStringDesc* LOC17;
	NimStringDesc* LOC18;
	nimfr("reprEnum", "repr.nim")
{	result0 = (NimStringDesc*)0;
	nimln(77, "repr.nim");
	NI b0 = (NI)((NI)(((NI) 8) - (*typ0).size) * ((NI) 8));
	nimln(78, "repr.nim");
	NI m0 = (NI)((NU64)(((NI) 1)) << (NU64)((NI)(b0 - ((NI) 1))));
	nimln(79, "repr.nim");
	NI o0 = (NI)(e0 & (NI)((NI)((NU64)(((NI) 1)) << (NU64)(b0)) - ((NI) 1)));
	nimln(80, "repr.nim");
	o0 = (NI)((NI)(o0 ^ m0) - m0);
	nimln(83, "repr.nim");
	{
		nimln(1101, "system.nim");
		if (!!((((*typ0).flags &(1U<<((NU)(((Tnimtypeflag3209) 2))&7U)))!=0))) goto LA3;
{		nimln(84, "repr.nim");
		{
			if (!((NU64)(o0) < (NU64)((*(*typ0).node).len))) goto LA7;
{			nimln(85, "repr.nim");
			result0 = cstrToNimstr((*(*(*typ0).node).sons[(o0)- 0]).name);
			goto BeforeRet;
}		}
		LA7: ;
}	}
	goto LA1;
	LA3: ;
	{
		nimln(88, "repr.nim");
		TNimNode* n0 = (*typ0).node;
		nimln(89, "repr.nim");
		TNimNode** s0 = (*n0).sons;
		{
			NI i_87246_1689653243;
			NI HEX3Atmp_87249_1689653243;
			i_87246_1689653243 = (NI)0;
			HEX3Atmp_87249_1689653243 = (NI)0;
			nimln(90, "repr.nim");
			HEX3Atmp_87249_1689653243 = (NI)((*n0).len - ((NI) 1));
			nimln(1875, "system.nim");
			NI res_87252_1689653243 = ((NI) 0);
			{
				nimln(1876, "system.nim");
				while (1) {
					if (!(res_87252_1689653243 <= HEX3Atmp_87249_1689653243)) goto LA12;
					nimln(1877, "system.nim");
					i_87246_1689653243 = res_87252_1689653243;
					nimln(91, "repr.nim");
					{
						if (!((*s0[(i_87246_1689653243)- 0]).offset == o0)) goto LA15;
{						result0 = cstrToNimstr((*s0[(i_87246_1689653243)- 0]).name);
						goto BeforeRet;
}					}
					LA15: ;
					nimln(1896, "system.nim");
					res_87252_1689653243 += ((NI) 1);
				} LA12: ;
			}
		}
	}
	LA1: ;
	nimln(92, "repr.nim");
	LOC17 = (NimStringDesc*)0;
	LOC18 = (NimStringDesc*)0;
	LOC18 = nimIntToStr(o0);
	LOC17 = rawNewString(LOC18->len + 16);
appendString(LOC17, LOC18);
appendString(LOC17, ((NimStringDesc*) &TMP83));
	result0 = LOC17;
	}BeforeRet: ;
	popFrame();
	return result0;
}

N_NIMCALL(NimStringDesc*, reprBool)(NIM_BOOL x0) {
	NimStringDesc* result0;
	nimfr("reprBool", "repr.nim")
	result0 = (NimStringDesc*)0;
	nimln(63, "repr.nim");
	{
		if (!x0) goto LA3;
{		result0 = copyString(((NimStringDesc*) &TMP34));
}	}
	goto LA1;
	LA3: ;
	{
		nimln(64, "repr.nim");
		result0 = copyString(((NimStringDesc*) &TMP35));
	}
	LA1: ;
	popFrame();
	return result0;
}

N_NIMCALL(NimStringDesc*, reprInt)(NI64 x0) {
	NimStringDesc* result0;
	nimfr("reprInt", "repr.nim")
{	result0 = (NimStringDesc*)0;
	nimln(15, "repr.nim");
	result0 = nimInt64ToStr(x0);
	goto BeforeRet;
	}BeforeRet: ;
	popFrame();
	return result0;
}

N_NIMCALL(NimStringDesc*, reprChar)(NIM_CHAR x0) {
	NimStringDesc* result0;
	nimfr("reprChar", "repr.nim")
	result0 = (NimStringDesc*)0;
	nimln(67, "repr.nim");
	result0 = copyString(((NimStringDesc*) &TMP84));
	nimln(68, "repr.nim");
	switch (((NU8)(x0))) {
	case 34:
	{
		nimln(69, "repr.nim");
		result0 = resizeString(result0, 2);
appendString(result0, ((NimStringDesc*) &TMP85));
	}
	break;
	case 92:
	{
		nimln(70, "repr.nim");
		result0 = resizeString(result0, 2);
appendString(result0, ((NimStringDesc*) &TMP86));
	}
	break;
	case 128 ... 255:
	case 0 ... 31:
	{
		NimStringDesc* LOC4;
		NimStringDesc* LOC5;
		nimln(71, "repr.nim");
		LOC4 = (NimStringDesc*)0;
		LOC5 = (NimStringDesc*)0;
		LOC5 = reprInt(((NI64) (((NU8)(x0)))));
		LOC4 = rawNewString(LOC5->len + 1);
appendString(LOC4, ((NimStringDesc*) &TMP87));
appendString(LOC4, LOC5);
		result0 = resizeString(result0, LOC4->len + 0);
appendString(result0, LOC4);
	}
	break;
	default:
	{
		nimln(72, "repr.nim");
		result0 = addChar(result0, x0);
	}
	break;
	}
	nimln(73, "repr.nim");
	result0 = resizeString(result0, 1);
appendString(result0, ((NimStringDesc*) &TMP84));
	popFrame();
	return result0;
}

N_NIMCALL(void, addsetelem_87264_1689653243)(NimStringDesc*& result0, NI elem0, TNimType* typ0) {
	nimfr("addSetElem", "repr.nim")
	nimln(98, "repr.nim");
	switch ((*typ0).kind) {
	case ((Tnimkind3203) 14):
	{
		NimStringDesc* LOC2;
		nimln(99, "repr.nim");
		LOC2 = (NimStringDesc*)0;
		LOC2 = reprEnum(elem0, typ0);
		result0 = resizeString(result0, LOC2->len + 0);
appendString(result0, LOC2);
	}
	break;
	case ((Tnimkind3203) 1):
	{
		NimStringDesc* LOC4;
		nimln(100, "repr.nim");
		LOC4 = (NimStringDesc*)0;
		LOC4 = reprBool(((NIM_BOOL) (elem0)));
		result0 = resizeString(result0, LOC4->len + 0);
appendString(result0, LOC4);
	}
	break;
	case ((Tnimkind3203) 2):
	{
		NimStringDesc* LOC6;
		nimln(101, "repr.nim");
		LOC6 = (NimStringDesc*)0;
		LOC6 = reprChar(((NIM_CHAR) (((NI) (elem0)))));
		result0 = resizeString(result0, LOC6->len + 0);
appendString(result0, LOC6);
	}
	break;
	case ((Tnimkind3203) 20):
	{
		nimln(102, "repr.nim");
		addsetelem_87264_1689653243(result0, elem0, (*typ0).base);
	}
	break;
	case ((Tnimkind3203) 31) ... ((Tnimkind3203) 35):
	case ((Tnimkind3203) 41):
	case ((Tnimkind3203) 42):
	{
		NimStringDesc* LOC9;
		nimln(103, "repr.nim");
		LOC9 = (NimStringDesc*)0;
		LOC9 = reprInt(((NI64) (elem0)));
		result0 = resizeString(result0, LOC9->len + 0);
appendString(result0, LOC9);
	}
	break;
	default:
	{
		nimln(105, "repr.nim");
		result0 = resizeString(result0, 16);
appendString(result0, ((NimStringDesc*) &TMP83));
	}
	break;
	}
	popFrame();
}

N_NIMCALL(void, reprsetaux_87271_1689653243)(NimStringDesc*& result0, void* p0, TNimType* typ0) {
	NI64 u0;
	nimfr("reprSetAux", "repr.nim")
	nimln(109, "repr.nim");
	NI elemcounter0 = ((NI) 0);
	nimln(111, "repr.nim");
	result0 = resizeString(result0, 1);
appendString(result0, ((NimStringDesc*) &TMP81));
	u0 = (NI64)0;
	nimln(113, "repr.nim");
	switch ((*typ0).size) {
	case ((NI) 1):
	{
		nimln(114, "repr.nim");
		u0 = ((NI64)(NU64)(NU8)((*((NI8*) (p0)))));
	}
	break;
	case ((NI) 2):
	{
		nimln(115, "repr.nim");
		u0 = ((NI64)(NU64)(NU16)((*((NI16*) (p0)))));
	}
	break;
	case ((NI) 4):
	{
		nimln(116, "repr.nim");
		u0 = ((NI64)(NU64)(NU32)((*((NI32*) (p0)))));
	}
	break;
	case ((NI) 8):
	{
		nimln(117, "repr.nim");
		u0 = (*((NI64*) (p0)));
	}
	break;
	default:
	{
		nimln(119, "repr.nim");
		NI8* a0 = ((NI8*) (p0));
		{
			NI i_87293_1689653243;
			NI HEX3Atmp_87333_1689653243;
			i_87293_1689653243 = (NI)0;
			HEX3Atmp_87333_1689653243 = (NI)0;
			nimln(120, "repr.nim");
			HEX3Atmp_87333_1689653243 = (NI)((NI)((*typ0).size * ((NI) 8)) - ((NI) 1));
			nimln(1875, "system.nim");
			NI res_87336_1689653243 = ((NI) 0);
			{
				nimln(1876, "system.nim");
				while (1) {
					if (!(res_87336_1689653243 <= HEX3Atmp_87333_1689653243)) goto LA8;
					nimln(1877, "system.nim");
					i_87293_1689653243 = res_87336_1689653243;
					nimln(121, "repr.nim");
					{
						nimln(343, "system.nim");
						nimln(121, "repr.nim");
						if (!!(((NI)(((NI)(NU)(NU8)(a0[((NI)(i_87293_1689653243 / ((NI) 8)))- 0])) & (NI)((NU64)(((NI) 1)) << (NU64)(((NI) ((NI)(i_87293_1689653243 % ((NI) 8))))))) == ((NI) 0)))) goto LA11;
{						nimln(122, "repr.nim");
						{
							nimln(351, "system.nim");
							if (!(((NI) 0) < elemcounter0)) goto LA15;
{							nimln(122, "repr.nim");
							result0 = resizeString(result0, 2);
appendString(result0, ((NimStringDesc*) &TMP82));
}						}
						LA15: ;
						nimln(123, "repr.nim");
						addsetelem_87264_1689653243(result0, (NI)(i_87293_1689653243 + (*(*typ0).node).len), (*typ0).base);
						nimln(124, "repr.nim");
						elemcounter0 += ((NI) 1);
}					}
					LA11: ;
					nimln(1896, "system.nim");
					res_87336_1689653243 += ((NI) 1);
				} LA8: ;
			}
		}
	}
	break;
	}
	nimln(125, "repr.nim");
	{
		if (!((*typ0).size <= ((NI) 8))) goto LA19;
{		{
			NI i_87315_1689653243;
			i_87315_1689653243 = (NI)0;
			nimln(1875, "system.nim");
			NI res_87344_1689653243 = ((NI) 0);
			{
				nimln(1876, "system.nim");
				while (1) {
					if (!(res_87344_1689653243 <= ((NI) 63))) goto LA23;
					nimln(1877, "system.nim");
					i_87315_1689653243 = res_87344_1689653243;
					nimln(127, "repr.nim");
					{
						nimln(343, "system.nim");
						nimln(127, "repr.nim");
						if (!!(((NI64)(u0 & (NI64)((NU64)(IL64(1)) << (NU64)(((NI64) (i_87315_1689653243))))) == IL64(0)))) goto LA26;
{						nimln(128, "repr.nim");
						{
							nimln(351, "system.nim");
							if (!(((NI) 0) < elemcounter0)) goto LA30;
{							nimln(128, "repr.nim");
							result0 = resizeString(result0, 2);
appendString(result0, ((NimStringDesc*) &TMP82));
}						}
						LA30: ;
						nimln(129, "repr.nim");
						addsetelem_87264_1689653243(result0, (NI)(i_87315_1689653243 + (*(*typ0).node).len), (*typ0).base);
						nimln(130, "repr.nim");
						elemcounter0 += ((NI) 1);
}					}
					LA26: ;
					nimln(1896, "system.nim");
					res_87344_1689653243 += ((NI) 1);
				} LA23: ;
			}
		}
}	}
	LA19: ;
	nimln(131, "repr.nim");
	result0 = resizeString(result0, 1);
appendString(result0, ((NimStringDesc*) &TMP88));
	popFrame();
}

N_NIMCALL(void, reprarray_88232_1689653243)(NimStringDesc*& result0, void* p0, TNimType* typ0, Reprclosure87355& cl0) {
	nimfr("reprArray", "repr.nim")
	nimln(171, "repr.nim");
	result0 = resizeString(result0, 1);
appendString(result0, ((NimStringDesc*) &TMP89));
	nimln(172, "repr.nim");
	NI bs0 = (*(*typ0).base).size;
	{
		NI i_88250_1689653243;
		NI HEX3Atmp_88256_1689653243;
		i_88250_1689653243 = (NI)0;
		HEX3Atmp_88256_1689653243 = (NI)0;
		nimln(173, "repr.nim");
		HEX3Atmp_88256_1689653243 = (NI)((NI)((*typ0).size / bs0) - ((NI) 1));
		nimln(1875, "system.nim");
		NI res_88259_1689653243 = ((NI) 0);
		{
			nimln(1876, "system.nim");
			while (1) {
				if (!(res_88259_1689653243 <= HEX3Atmp_88256_1689653243)) goto LA3;
				nimln(1877, "system.nim");
				i_88250_1689653243 = res_88259_1689653243;
				nimln(174, "repr.nim");
				{
					nimln(351, "system.nim");
					if (!(((NI) 0) < i_88250_1689653243)) goto LA6;
{					nimln(174, "repr.nim");
					result0 = resizeString(result0, 2);
appendString(result0, ((NimStringDesc*) &TMP82));
}				}
				LA6: ;
				nimln(175, "repr.nim");
				repraux_88224_1689653243(result0, ((void*) ((NI)(((NI) (p0)) + (NI)(i_88250_1689653243 * bs0)))), (*typ0).base, cl0);
				nimln(1896, "system.nim");
				res_88259_1689653243 += ((NI) 1);
			} LA3: ;
		}
	}
	nimln(176, "repr.nim");
	result0 = resizeString(result0, 1);
appendString(result0, ((NimStringDesc*) &TMP90));
	popFrame();
}

N_NIMCALL(void, reprrecordaux_88295_1689653243)(NimStringDesc*& result0, void* p0, TNimNode* n0, Reprclosure87355& cl0) {
	nimfr("reprRecordAux", "repr.nim")
	nimln(193, "repr.nim");
	switch ((*n0).kind) {
	case ((Tnimnodekind3205) 0):
	{
	}
	break;
	case ((Tnimnodekind3205) 1):
	{
		NimStringDesc* LOC3;
		nimln(196, "repr.nim");
		LOC3 = (NimStringDesc*)0;
		LOC3 = cstrToNimstr((*n0).name);
		result0 = resizeString(result0, LOC3->len + 0);
appendString(result0, LOC3);
		nimln(197, "repr.nim");
		result0 = resizeString(result0, 3);
appendString(result0, ((NimStringDesc*) &TMP91));
		nimln(198, "repr.nim");
		repraux_88224_1689653243(result0, ((void*) ((NI)(((NI) (p0)) + (*n0).offset))), (*n0).typ, cl0);
	}
	break;
	case ((Tnimnodekind3205) 2):
	{
		{
			NI i_88412_1689653243;
			NI HEX3Atmp_88435_1689653243;
			i_88412_1689653243 = (NI)0;
			HEX3Atmp_88435_1689653243 = (NI)0;
			nimln(200, "repr.nim");
			HEX3Atmp_88435_1689653243 = (NI)((*n0).len - ((NI) 1));
			nimln(1875, "system.nim");
			NI res_88438_1689653243 = ((NI) 0);
			{
				nimln(1876, "system.nim");
				while (1) {
					if (!(res_88438_1689653243 <= HEX3Atmp_88435_1689653243)) goto LA7;
					nimln(1877, "system.nim");
					i_88412_1689653243 = res_88438_1689653243;
					nimln(201, "repr.nim");
					{
						nimln(351, "system.nim");
						if (!(((NI) 0) < i_88412_1689653243)) goto LA10;
{						nimln(201, "repr.nim");
						result0 = resizeString(result0, 2);
appendString(result0, ((NimStringDesc*) &TMP92));
}					}
					LA10: ;
					nimln(202, "repr.nim");
					reprrecordaux_88295_1689653243(result0, p0, (*n0).sons[(i_88412_1689653243)- 0], cl0);
					nimln(1896, "system.nim");
					res_88438_1689653243 += ((NI) 1);
				} LA7: ;
			}
		}
	}
	break;
	case ((Tnimnodekind3205) 3):
	{
		nimln(204, "repr.nim");
		TNimNode* m0 = selectbranch_28007_1689653243(p0, n0);
		nimln(205, "repr.nim");
		repraux_88224_1689653243(result0, ((void*) ((NI)(((NI) (p0)) + (*n0).offset))), (*n0).typ, cl0);
		nimln(206, "repr.nim");
		{
			nimln(343, "system.nim");
			if (!!((m0 == NIM_NIL))) goto LA15;
{			nimln(206, "repr.nim");
			reprrecordaux_88295_1689653243(result0, p0, m0, cl0);
}		}
		LA15: ;
	}
	break;
	}
	popFrame();
}

N_NIMCALL(void, reprrecord_88444_1689653243)(NimStringDesc*& result0, void* p0, TNimType* typ0, Reprclosure87355& cl0) {
	nimfr("reprRecord", "repr.nim")
	nimln(210, "repr.nim");
	result0 = resizeString(result0, 1);
appendString(result0, ((NimStringDesc*) &TMP89));
	nimln(211, "repr.nim");
	TNimType* curtyp0 = typ0;
	nimln(212, "repr.nim");
	NIM_BOOL first0 = NIM_TRUE;
	{
		nimln(213, "repr.nim");
		while (1) {
			NimStringDesc* part0;
			nimln(343, "system.nim");
			if (!!((curtyp0 == NIM_NIL))) goto LA2;
			nimln(214, "repr.nim");
			part0 = copyString(((NimStringDesc*) &TMP4));
			nimln(215, "repr.nim");
			reprrecordaux_88295_1689653243(part0, p0, (*curtyp0).node, cl0);
			nimln(216, "repr.nim");
			{
				nimln(351, "system.nim");
				nimln(216, "repr.nim");
				if (!(((NI) 0) < (part0 ? part0->len : 0))) goto LA5;
{				nimln(217, "repr.nim");
				{
					if (!!(first0)) goto LA9;
{					nimln(218, "repr.nim");
					result0 = resizeString(result0, 2);
appendString(result0, ((NimStringDesc*) &TMP92));
}				}
				LA9: ;
				nimln(219, "repr.nim");
				result0 = resizeString(result0, part0->len + 0);
appendString(result0, part0);
				nimln(220, "repr.nim");
				first0 = NIM_FALSE;
}			}
			LA5: ;
			nimln(221, "repr.nim");
			curtyp0 = (*curtyp0).base;
		} LA2: ;
	}
	nimln(222, "repr.nim");
	result0 = resizeString(result0, 1);
appendString(result0, ((NimStringDesc*) &TMP90));
	popFrame();
}

N_NIMCALL(NimStringDesc*, reprPointer)(void* x0) {
	NimStringDesc* result0;
	TY87019 buf0;
	int LOC1;
	nimfr("reprPointer", "repr.nim")
{	result0 = (NimStringDesc*)0;
	memset((void*)buf0, 0, sizeof(buf0));
	nimln(20, "repr.nim");
	LOC1 = (int)0;
	LOC1 = sprintf(((NCSTRING) (buf0)), "%p", x0);
	nimln(21, "repr.nim");
	result0 = cstrToNimstr(((NCSTRING) (buf0)));
	goto BeforeRet;
	}BeforeRet: ;
	popFrame();
	return result0;
}

N_NIMCALL(void, reprref_88470_1689653243)(NimStringDesc*& result0, void* p0, TNimType* typ0, Reprclosure87355& cl0) {
	NimStringDesc* LOC1;
	NimStringDesc* LOC2;
	nimfr("reprRef", "repr.nim")
	nimln(231, "repr.nim");
	Cell48106* cell0 = usrtocell_52241_1689653243(p0);
	nimln(232, "repr.nim");
	LOC1 = (NimStringDesc*)0;
	LOC2 = (NimStringDesc*)0;
	LOC2 = reprPointer(p0);
	LOC1 = rawNewString(LOC2->len + 4);
appendString(LOC1, ((NimStringDesc*) &TMP94));
appendString(LOC1, LOC2);
	result0 = resizeString(result0, LOC1->len + 0);
appendString(result0, LOC1);
	nimln(233, "repr.nim");
	{
		NIM_BOOL LOC5;
		nimln(1101, "system.nim");
		LOC5 = (NIM_BOOL)0;
		LOC5 = contains_48808_1689653243((&cl0.marked), cell0);
		if (!!(LOC5)) goto LA6;
{		nimln(235, "repr.nim");
		incl_48847_1689653243(cl0.marked, cell0);
		nimln(236, "repr.nim");
		result0 = resizeString(result0, 5);
appendString(result0, ((NimStringDesc*) &TMP95));
		nimln(237, "repr.nim");
		repraux_88224_1689653243(result0, p0, (*typ0).base, cl0);
}	}
	LA6: ;
	popFrame();
}

N_NIMCALL(void, reprsequence_88263_1689653243)(NimStringDesc*& result0, void* p0, TNimType* typ0, Reprclosure87355& cl0) {
	NimStringDesc* LOC5;
	NimStringDesc* LOC6;
	nimfr("reprSequence", "repr.nim")
{	nimln(180, "repr.nim");
	{
		if (!(p0 == NIM_NIL)) goto LA3;
{		nimln(181, "repr.nim");
		result0 = resizeString(result0, 3);
appendString(result0, ((NimStringDesc*) &TMP93));
		nimln(182, "repr.nim");
		goto BeforeRet;
}	}
	LA3: ;
	nimln(183, "repr.nim");
	LOC5 = (NimStringDesc*)0;
	LOC6 = (NimStringDesc*)0;
	LOC6 = reprPointer(p0);
	LOC5 = rawNewString(LOC6->len + 1);
appendString(LOC5, LOC6);
appendString(LOC5, ((NimStringDesc*) &TMP89));
	result0 = resizeString(result0, LOC5->len + 0);
appendString(result0, LOC5);
	nimln(184, "repr.nim");
	NI bs0 = (*(*typ0).base).size;
	{
		NI i_88281_1689653243;
		NI HEX3Atmp_88288_1689653243;
		i_88281_1689653243 = (NI)0;
		HEX3Atmp_88288_1689653243 = (NI)0;
		nimln(185, "repr.nim");
		HEX3Atmp_88288_1689653243 = (NI)((*((TGenericSeq*) (p0))).len - ((NI) 1));
		nimln(1875, "system.nim");
		NI res_88291_1689653243 = ((NI) 0);
		{
			nimln(1876, "system.nim");
			while (1) {
				if (!(res_88291_1689653243 <= HEX3Atmp_88288_1689653243)) goto LA9;
				nimln(1877, "system.nim");
				i_88281_1689653243 = res_88291_1689653243;
				nimln(186, "repr.nim");
				{
					nimln(351, "system.nim");
					if (!(((NI) 0) < i_88281_1689653243)) goto LA12;
{					nimln(186, "repr.nim");
					result0 = resizeString(result0, 2);
appendString(result0, ((NimStringDesc*) &TMP82));
}				}
				LA12: ;
				nimln(187, "repr.nim");
				repraux_88224_1689653243(result0, ((void*) ((NI)((NI)(((NI) (p0)) + ((NI) 16)) + (NI)(i_88281_1689653243 * bs0)))), (*typ0).base, cl0);
				nimln(1896, "system.nim");
				res_88291_1689653243 += ((NI) 1);
			} LA9: ;
		}
	}
	nimln(189, "repr.nim");
	result0 = resizeString(result0, 1);
appendString(result0, ((NimStringDesc*) &TMP90));
	}BeforeRet: ;
	popFrame();
}

N_NIMCALL(NimStringDesc*, HEX24_7801_1689653243)(NU64 x0) {
	NimStringDesc* result0;
	nimfr("$", "repr.nim")
	result0 = (NimStringDesc*)0;
	nimln(24, "repr.nim");
	{
		if (!(x0 == ((NI) 0))) goto LA3;
{		nimln(25, "repr.nim");
		result0 = copyString(((NimStringDesc*) &TMP96));
}	}
	goto LA1;
	LA3: ;
	{
		TY87019 buf0;
		memset((void*)buf0, 0, sizeof(buf0));
		nimln(28, "repr.nim");
		NI i0 = ((NI) 0);
		nimln(29, "repr.nim");
		NU64 n0 = x0;
		{
			nimln(30, "repr.nim");
			while (1) {
				nimln(343, "system.nim");
				if (!!((n0 == ((NI) 0)))) goto LA7;
				nimln(31, "repr.nim");
				NU64 nn0 = (NU64)((NU64)(n0) / (NU64)(10ULL));
				nimln(32, "repr.nim");
				buf0[(i0)- 0] = ((NIM_CHAR) ((NU64)((NU64)((NU64)((NU64)(n0) - (NU64)((NU64)((NU64)(10ULL) * (NU64)(nn0))))) + (NU64)(((NI) 48)))));
				nimln(33, "repr.nim");
				i0 += ((NI) 1);
				nimln(34, "repr.nim");
				n0 = nn0;
			} LA7: ;
		}
		nimln(36, "repr.nim");
		NI half0 = (NI)(i0 / ((NI) 2));
		{
			NI t_87122_1689653243;
			NI HEX3Atmp_87137_1689653243;
			t_87122_1689653243 = (NI)0;
			HEX3Atmp_87137_1689653243 = (NI)0;
			nimln(38, "repr.nim");
			HEX3Atmp_87137_1689653243 = (half0 - 1);
			nimln(1875, "system.nim");
			NI res_87140_1689653243 = ((NI) 0);
			{
				nimln(1876, "system.nim");
				while (1) {
					NIM_CHAR LOC11;
					if (!(res_87140_1689653243 <= HEX3Atmp_87137_1689653243)) goto LA10;
					nimln(1877, "system.nim");
					t_87122_1689653243 = res_87140_1689653243;
					nimln(38, "repr.nim");
					LOC11 = (NIM_CHAR)0;
					LOC11 = buf0[(t_87122_1689653243)- 0];
					buf0[(t_87122_1689653243)- 0] = buf0[((NI)((NI)(i0 - t_87122_1689653243) - ((NI) 1)))- 0];
					buf0[((NI)((NI)(i0 - t_87122_1689653243) - ((NI) 1)))- 0] = LOC11;
					nimln(1896, "system.nim");
					res_87140_1689653243 += ((NI) 1);
				} LA10: ;
			}
		}
		nimln(39, "repr.nim");
		result0 = cstrToNimstr(((NCSTRING) (buf0)));
	}
	LA1: ;
	popFrame();
	return result0;
}

N_NIMCALL(void, reprstraux_87144_1689653243)(NimStringDesc*& result0, NimStringDesc* s0) {
	NimStringDesc* LOC5;
	NimStringDesc* LOC6;
	nimfr("reprStrAux", "repr.nim")
{	nimln(42, "repr.nim");
	{
		if (!(((void*) (s0)) == NIM_NIL)) goto LA3;
{		nimln(43, "repr.nim");
		result0 = resizeString(result0, 3);
appendString(result0, ((NimStringDesc*) &TMP93));
		nimln(44, "repr.nim");
		goto BeforeRet;
}	}
	LA3: ;
	nimln(45, "repr.nim");
	LOC5 = (NimStringDesc*)0;
	LOC6 = (NimStringDesc*)0;
	LOC6 = reprPointer(((void*) (s0)));
	LOC5 = rawNewString(LOC6->len + 1);
appendString(LOC5, LOC6);
appendString(LOC5, ((NimStringDesc*) &TMP97));
	result0 = resizeString(result0, LOC5->len + 0);
appendString(result0, LOC5);
	{
		NI i_87166_1689653243;
		NI HEX3Atmp_87179_1689653243;
		i_87166_1689653243 = (NI)0;
		HEX3Atmp_87179_1689653243 = (NI)0;
		nimln(46, "repr.nim");
		HEX3Atmp_87179_1689653243 = ((s0 ? s0->len : 0) - 1);
		nimln(1875, "system.nim");
		NI res_87182_1689653243 = ((NI) 0);
		{
			nimln(1876, "system.nim");
			while (1) {
				if (!(res_87182_1689653243 <= HEX3Atmp_87179_1689653243)) goto LA9;
				nimln(1877, "system.nim");
				i_87166_1689653243 = res_87182_1689653243;
				nimln(47, "repr.nim");
				NIM_CHAR c0 = s0->data[i_87166_1689653243];
				nimln(48, "repr.nim");
				switch (((NU8)(c0))) {
				case 34:
				{
					nimln(49, "repr.nim");
					result0 = resizeString(result0, 2);
appendString(result0, ((NimStringDesc*) &TMP85));
				}
				break;
				case 92:
				{
					nimln(50, "repr.nim");
					result0 = resizeString(result0, 2);
appendString(result0, ((NimStringDesc*) &TMP86));
				}
				break;
				case 10:
				{
					nimln(51, "repr.nim");
					result0 = resizeString(result0, 6);
appendString(result0, ((NimStringDesc*) &TMP98));
				}
				break;
				case 128 ... 255:
				case 0 ... 9:
				case 11 ... 31:
				{
					NimStringDesc* LOC14;
					NimStringDesc* LOC15;
					nimln(53, "repr.nim");
					LOC14 = (NimStringDesc*)0;
					LOC15 = (NimStringDesc*)0;
					LOC15 = reprInt(((NI64) (((NU8)(c0)))));
					LOC14 = rawNewString(LOC15->len + 1);
appendString(LOC14, ((NimStringDesc*) &TMP87));
appendString(LOC14, LOC15);
					result0 = resizeString(result0, LOC14->len + 0);
appendString(result0, LOC14);
				}
				break;
				default:
				{
					nimln(55, "repr.nim");
					result0 = addChar(result0, c0);
				}
				break;
				}
				nimln(1896, "system.nim");
				res_87182_1689653243 += ((NI) 1);
			} LA9: ;
		}
	}
	nimln(56, "repr.nim");
	result0 = resizeString(result0, 1);
appendString(result0, ((NimStringDesc*) &TMP97));
	}BeforeRet: ;
	popFrame();
}

N_NIMCALL(void, repraux_88224_1689653243)(NimStringDesc*& result0, void* p0, TNimType* typ0, Reprclosure87355& cl0) {
	nimfr("reprAux", "repr.nim")
{	nimln(241, "repr.nim");
	{
		if (!(cl0.recdepth == ((NI) 0))) goto LA3;
{		nimln(242, "repr.nim");
		result0 = resizeString(result0, 3);
appendString(result0, ((NimStringDesc*) &TMP80));
		nimln(243, "repr.nim");
		goto BeforeRet;
}	}
	LA3: ;
	nimln(244, "repr.nim");
	cl0.recdepth -= ((NI) 1);
	nimln(245, "repr.nim");
	switch ((*typ0).kind) {
	case ((Tnimkind3203) 19):
	{
		nimln(246, "repr.nim");
		reprsetaux_87271_1689653243(result0, p0, typ0);
	}
	break;
	case ((Tnimkind3203) 16):
	case ((Tnimkind3203) 4):
	{
		nimln(247, "repr.nim");
		reprarray_88232_1689653243(result0, p0, typ0, cl0);
	}
	break;
	case ((Tnimkind3203) 18):
	{
		nimln(248, "repr.nim");
		reprrecord_88444_1689653243(result0, p0, typ0, cl0);
	}
	break;
	case ((Tnimkind3203) 17):
	{
		nimln(250, "repr.nim");
		TNimType* t0 = (*((TNimType**) (p0)));
		nimln(251, "repr.nim");
		reprrecord_88444_1689653243(result0, p0, t0, cl0);
	}
	break;
	case ((Tnimkind3203) 22):
	case ((Tnimkind3203) 21):
	{
		nimln(254, "repr.nim");
		{
			if (!((*((void**) (p0))) == NIM_NIL)) goto LA12;
{			result0 = resizeString(result0, 3);
appendString(result0, ((NimStringDesc*) &TMP93));
}		}
		goto LA10;
		LA12: ;
		{
			nimln(255, "repr.nim");
			reprref_88470_1689653243(result0, (*((void**) (p0))), typ0, cl0);
		}
		LA10: ;
	}
	break;
	case ((Tnimkind3203) 24):
	{
		nimln(257, "repr.nim");
		reprsequence_88263_1689653243(result0, (*((void**) (p0))), typ0, cl0);
	}
	break;
	case ((Tnimkind3203) 31):
	{
		NimStringDesc* LOC17;
		nimln(258, "repr.nim");
		LOC17 = (NimStringDesc*)0;
		LOC17 = nimIntToStr((*((NI*) (p0))));
		result0 = resizeString(result0, LOC17->len + 0);
appendString(result0, LOC17);
	}
	break;
	case ((Tnimkind3203) 32):
	{
		NimStringDesc* LOC19;
		nimln(259, "repr.nim");
		LOC19 = (NimStringDesc*)0;
		LOC19 = nimIntToStr(((NI) ((*((NI8*) (p0))))));
		result0 = resizeString(result0, LOC19->len + 0);
appendString(result0, LOC19);
	}
	break;
	case ((Tnimkind3203) 33):
	{
		NimStringDesc* LOC21;
		nimln(260, "repr.nim");
		LOC21 = (NimStringDesc*)0;
		LOC21 = nimIntToStr(((NI) ((*((NI16*) (p0))))));
		result0 = resizeString(result0, LOC21->len + 0);
appendString(result0, LOC21);
	}
	break;
	case ((Tnimkind3203) 34):
	{
		NimStringDesc* LOC23;
		nimln(261, "repr.nim");
		LOC23 = (NimStringDesc*)0;
		LOC23 = nimIntToStr(((NI) ((*((NI32*) (p0))))));
		result0 = resizeString(result0, LOC23->len + 0);
appendString(result0, LOC23);
	}
	break;
	case ((Tnimkind3203) 35):
	{
		NimStringDesc* LOC25;
		nimln(262, "repr.nim");
		LOC25 = (NimStringDesc*)0;
		LOC25 = nimInt64ToStr((*((NI64*) (p0))));
		result0 = resizeString(result0, LOC25->len + 0);
appendString(result0, LOC25);
	}
	break;
	case ((Tnimkind3203) 40):
	{
		NimStringDesc* LOC27;
		nimln(263, "repr.nim");
		LOC27 = (NimStringDesc*)0;
		LOC27 = HEX24_7801_1689653243(((NU64) ((*((NU*) (p0))))));
		result0 = resizeString(result0, LOC27->len + 0);
appendString(result0, LOC27);
	}
	break;
	case ((Tnimkind3203) 41):
	{
		NimStringDesc* LOC29;
		nimln(264, "repr.nim");
		LOC29 = (NimStringDesc*)0;
		LOC29 = HEX24_7801_1689653243(((NU64) ((*((NU8*) (p0))))));
		result0 = resizeString(result0, LOC29->len + 0);
appendString(result0, LOC29);
	}
	break;
	case ((Tnimkind3203) 42):
	{
		NimStringDesc* LOC31;
		nimln(265, "repr.nim");
		LOC31 = (NimStringDesc*)0;
		LOC31 = HEX24_7801_1689653243(((NU64) ((*((NU16*) (p0))))));
		result0 = resizeString(result0, LOC31->len + 0);
appendString(result0, LOC31);
	}
	break;
	case ((Tnimkind3203) 43):
	{
		NimStringDesc* LOC33;
		nimln(266, "repr.nim");
		LOC33 = (NimStringDesc*)0;
		LOC33 = HEX24_7801_1689653243(((NU64) ((*((NU32*) (p0))))));
		result0 = resizeString(result0, LOC33->len + 0);
appendString(result0, LOC33);
	}
	break;
	case ((Tnimkind3203) 44):
	{
		NimStringDesc* LOC35;
		nimln(267, "repr.nim");
		LOC35 = (NimStringDesc*)0;
		LOC35 = HEX24_7801_1689653243((*((NU64*) (p0))));
		result0 = resizeString(result0, LOC35->len + 0);
appendString(result0, LOC35);
	}
	break;
	case ((Tnimkind3203) 36):
	{
		NimStringDesc* LOC37;
		nimln(269, "repr.nim");
		LOC37 = (NimStringDesc*)0;
		LOC37 = nimFloatToStr((*((NF*) (p0))));
		result0 = resizeString(result0, LOC37->len + 0);
appendString(result0, LOC37);
	}
	break;
	case ((Tnimkind3203) 37):
	{
		NimStringDesc* LOC39;
		nimln(270, "repr.nim");
		LOC39 = (NimStringDesc*)0;
		LOC39 = nimFloatToStr(((NF) ((*((NF32*) (p0))))));
		result0 = resizeString(result0, LOC39->len + 0);
appendString(result0, LOC39);
	}
	break;
	case ((Tnimkind3203) 38):
	{
		NimStringDesc* LOC41;
		nimln(271, "repr.nim");
		LOC41 = (NimStringDesc*)0;
		LOC41 = nimFloatToStr((*((NF*) (p0))));
		result0 = resizeString(result0, LOC41->len + 0);
appendString(result0, LOC41);
	}
	break;
	case ((Tnimkind3203) 14):
	{
		NimStringDesc* LOC43;
		nimln(272, "repr.nim");
		LOC43 = (NimStringDesc*)0;
		LOC43 = reprEnum((*((NI*) (p0))), typ0);
		result0 = resizeString(result0, LOC43->len + 0);
appendString(result0, LOC43);
	}
	break;
	case ((Tnimkind3203) 1):
	{
		NimStringDesc* LOC45;
		nimln(273, "repr.nim");
		LOC45 = (NimStringDesc*)0;
		LOC45 = reprBool((*((NIM_BOOL*) (p0))));
		result0 = resizeString(result0, LOC45->len + 0);
appendString(result0, LOC45);
	}
	break;
	case ((Tnimkind3203) 2):
	{
		NimStringDesc* LOC47;
		nimln(274, "repr.nim");
		LOC47 = (NimStringDesc*)0;
		LOC47 = reprChar((*((NIM_CHAR*) (p0))));
		result0 = resizeString(result0, LOC47->len + 0);
appendString(result0, LOC47);
	}
	break;
	case ((Tnimkind3203) 28):
	{
		nimln(275, "repr.nim");
		reprstraux_87144_1689653243(result0, (*((NimStringDesc**) (p0))));
	}
	break;
	case ((Tnimkind3203) 29):
	{
		nimln(277, "repr.nim");
		NCSTRING cs0 = (*((NCSTRING*) (p0)));
		nimln(278, "repr.nim");
		{
			if (!cs0 == 0) goto LA52;
{			result0 = resizeString(result0, 3);
appendString(result0, ((NimStringDesc*) &TMP93));
}		}
		goto LA50;
		LA52: ;
		{
			NimStringDesc* LOC55;
			nimln(279, "repr.nim");
			LOC55 = (NimStringDesc*)0;
			LOC55 = cstrToNimstr(cs0);
			reprstraux_87144_1689653243(result0, LOC55);
		}
		LA50: ;
	}
	break;
	case ((Tnimkind3203) 20):
	{
		nimln(280, "repr.nim");
		repraux_88224_1689653243(result0, p0, (*typ0).base, cl0);
	}
	break;
	case ((Tnimkind3203) 25):
	case ((Tnimkind3203) 26):
	{
		nimln(282, "repr.nim");
		{
			if (!((*((void**) (p0))) == NIM_NIL)) goto LA60;
{			result0 = resizeString(result0, 3);
appendString(result0, ((NimStringDesc*) &TMP93));
}		}
		goto LA58;
		LA60: ;
		{
			NimStringDesc* LOC63;
			nimln(283, "repr.nim");
			LOC63 = (NimStringDesc*)0;
			LOC63 = reprPointer((*((void**) (p0))));
			result0 = resizeString(result0, LOC63->len + 0);
appendString(result0, LOC63);
		}
		LA58: ;
	}
	break;
	default:
	{
		nimln(285, "repr.nim");
		result0 = resizeString(result0, 15);
appendString(result0, ((NimStringDesc*) &TMP99));
	}
	break;
	}
	nimln(286, "repr.nim");
	cl0.recdepth += ((NI) 1);
	}BeforeRet: ;
	popFrame();
}

N_NIMCALL(void, deinitreprclosure_87802_1689653243)(Reprclosure87355& cl0) {
	nimfr("deinitReprClosure", "repr.nim")
	nimln(158, "repr.nim");
	deinit_48236_1689653243(cl0.marked);
	popFrame();
}

N_NIMCALL(NimStringDesc*, reprAny)(void* p_87003_1689653243, TNimType* typ0) {
	NimStringDesc* result0;
	Reprclosure87355 cl0;
	nimfr("reprAny", "repr.nim")
	result0 = (NimStringDesc*)0;
	memset((void*)(&cl0), 0, sizeof(cl0));
	nimln(305, "repr.nim");
	initreprclosure_87401_1689653243(cl0);
	nimln(306, "repr.nim");
	result0 = copyString(((NimStringDesc*) &TMP4));
	nimln(307, "repr.nim");
	{
		nimln(1095, "system.nim");
		if (!((983056 &((NU64)1<<((NU)((*typ0).kind)&63U)))!=0)) goto LA3;
{		nimln(308, "repr.nim");
		repraux_88224_1689653243(result0, p_87003_1689653243, typ0, cl0);
}	}
	goto LA1;
	LA3: ;
	{
		nimln(310, "repr.nim");
		void* p0 = p_87003_1689653243;
		nimln(311, "repr.nim");
		repraux_88224_1689653243(result0, ((void*) ((&p0))), typ0, cl0);
	}
	LA1: ;
	nimln(312, "repr.nim");
	result0 = resizeString(result0, 1);
appendString(result0, ((NimStringDesc*) &TMP10));
	nimln(313, "repr.nim");
	deinitreprclosure_87802_1689653243(cl0);
	popFrame();
	return result0;
}

N_NIMCALL(NimStringDesc*, reprFloat)(NF x0) {
	NimStringDesc* result0;
	nimfr("reprFloat", "repr.nim")
{	result0 = (NimStringDesc*)0;
	nimln(16, "repr.nim");
	result0 = nimFloatToStr(x0);
	goto BeforeRet;
	}BeforeRet: ;
	popFrame();
	return result0;
}

N_NIMCALL(NimStringDesc*, reprStr)(NimStringDesc* s0) {
	NimStringDesc* result0;
	nimfr("reprStr", "repr.nim")
	result0 = (NimStringDesc*)0;
	nimln(59, "repr.nim");
	result0 = copyString(((NimStringDesc*) &TMP4));
	nimln(60, "repr.nim");
	reprstraux_87144_1689653243(result0, s0);
	popFrame();
	return result0;
}

N_NIMCALL(NimStringDesc*, reprSet)(void* p0, TNimType* typ0) {
	NimStringDesc* result0;
	nimfr("reprSet", "repr.nim")
	result0 = (NimStringDesc*)0;
	nimln(134, "repr.nim");
	result0 = copyString(((NimStringDesc*) &TMP4));
	nimln(135, "repr.nim");
	reprsetaux_87271_1689653243(result0, p0, typ0);
	popFrame();
	return result0;
}

N_NIMCALL(void, reprbreak_88201_1689653243)(NimStringDesc*& result0, Reprclosure87355* cl0) {
	nimfr("reprBreak", "repr.nim")
	nimln(163, "repr.nim");
	result0 = resizeString(result0, 1);
appendString(result0, ((NimStringDesc*) &TMP10));
	{
		NI i_88215_1689653243;
		NI HEX3Atmp_88217_1689653243;
		i_88215_1689653243 = (NI)0;
		HEX3Atmp_88217_1689653243 = (NI)0;
		nimln(164, "repr.nim");
		HEX3Atmp_88217_1689653243 = (NI)((*cl0).indent - ((NI) 1));
		nimln(1875, "system.nim");
		NI res_88220_1689653243 = ((NI) 0);
		{
			nimln(1876, "system.nim");
			while (1) {
				if (!(res_88220_1689653243 <= HEX3Atmp_88217_1689653243)) goto LA3;
				nimln(1877, "system.nim");
				i_88215_1689653243 = res_88220_1689653243;
				nimln(164, "repr.nim");
				result0 = addChar(result0, 32);
				nimln(1896, "system.nim");
				res_88220_1689653243 += ((NI) 1);
			} LA3: ;
		}
	}
	popFrame();
}

N_NIMCALL(NimStringDesc*, reprOpenArray)(void* p0, NI length0, TNimType* elemtyp0) {
	NimStringDesc* result0;
	Reprclosure87355 cl0;
	nimfr("reprOpenArray", "repr.nim")
	result0 = (NimStringDesc*)0;
	memset((void*)(&cl0), 0, sizeof(cl0));
	nimln(292, "repr.nim");
	initreprclosure_87401_1689653243(cl0);
	nimln(293, "repr.nim");
	result0 = copyString(((NimStringDesc*) &TMP89));
	nimln(294, "repr.nim");
	NI bs0 = (*elemtyp0).size;
	{
		NI i_89082_1689653243;
		NI HEX3Atmp_89090_1689653243;
		i_89082_1689653243 = (NI)0;
		HEX3Atmp_89090_1689653243 = (NI)0;
		nimln(295, "repr.nim");
		HEX3Atmp_89090_1689653243 = (NI)(length0 - ((NI) 1));
		nimln(1875, "system.nim");
		NI res_89093_1689653243 = ((NI) 0);
		{
			nimln(1876, "system.nim");
			while (1) {
				if (!(res_89093_1689653243 <= HEX3Atmp_89090_1689653243)) goto LA3;
				nimln(1877, "system.nim");
				i_89082_1689653243 = res_89093_1689653243;
				nimln(296, "repr.nim");
				{
					nimln(351, "system.nim");
					if (!(((NI) 0) < i_89082_1689653243)) goto LA6;
{					nimln(296, "repr.nim");
					result0 = resizeString(result0, 2);
appendString(result0, ((NimStringDesc*) &TMP82));
}				}
				LA6: ;
				nimln(297, "repr.nim");
				repraux_88224_1689653243(result0, ((void*) ((NI)(((NI) (p0)) + (NI)(i_89082_1689653243 * bs0)))), elemtyp0, cl0);
				nimln(1896, "system.nim");
				res_89093_1689653243 += ((NI) 1);
			} LA3: ;
		}
	}
	nimln(298, "repr.nim");
	result0 = resizeString(result0, 1);
appendString(result0, ((NimStringDesc*) &TMP90));
	nimln(299, "repr.nim");
	deinitreprclosure_87802_1689653243(cl0);
	popFrame();
	return result0;
}

static N_INLINE(Exception*, getCurrentException)(void) {
	Exception* result0;
	nimfr("getCurrentException", "system.nim")
	result0 = (Exception*)0;
	nimln(3014, "system.nim");
	result0 = currexception_19639_1689653243;
	popFrame();
	return result0;
}

static N_INLINE(NimStringDesc*, getcurrentexceptionmsg_89405_1689653243)(void) {
	NimStringDesc* result0;
	nimfr("getCurrentExceptionMsg", "system.nim")
{	result0 = (NimStringDesc*)0;
	nimln(3019, "system.nim");
	Exception* e0 = getCurrentException();
	nimln(3020, "system.nim");
	{
		if (!(e0 == NIM_NIL)) goto LA3;
{		result0 = copyString(((NimStringDesc*) &TMP4));
}	}
	goto LA1;
	LA3: ;
	{
		result0 = copyString((*e0).message);
	}
	LA1: ;
	goto BeforeRet;
	}BeforeRet: ;
	popFrame();
	return result0;
}

N_NIMCALL(void, onraise_89421_1689653243)(TY18011 action0) {
	nimfr("onRaise", "system.nim")
	nimln(3028, "system.nim");
	{
		if (!!(exchandler_19637_1689653243 == 0)) goto LA3;
{		nimln(3029, "system.nim");
		(*exchandler_19637_1689653243).hasRaiseAction = NIM_TRUE;
		nimln(3030, "system.nim");
		unsureAsgnRef((void**) (&(*exchandler_19637_1689653243).raiseAction.ClEnv), action0.ClEnv);
		(*exchandler_19637_1689653243).raiseAction.ClPrc = action0.ClPrc;
}	}
	LA3: ;
	popFrame();
}

static N_INLINE(void, setcurrentexception_89436_1689653243)(Exception* exc0) {
	nimfr("setCurrentException", "system.nim")
	nimln(3036, "system.nim");
	asgnRef((void**) (&currexception_19639_1689653243), exc0);
	popFrame();
}

N_NIMCALL(void, quit_90232_1689653243)(NimStringDesc* errormsg0, NI errorcode0) {
	nimfr("quit", "system.nim")
	nimln(3108, "system.nim");
	printf("%s\012", errormsg0? (errormsg0)->data:"nil");
	fflush(stdout);
	nimln(3109, "system.nim");
	exit(errorcode0);
	popFrame();
}

static N_INLINE(NF, HEX2F_90407_1689653243)(NI x0, NI y0) {
	NF result0;
	nimfr("/", "system.nim")
	result0 = (NF)0;
	nimln(3168, "system.nim");
	result0 = ((NF)(((double) (x0))) / (NF)(((double) (y0))));
	popFrame();
	return result0;
}

static N_INLINE(NimStringDesc*, HEX5BHEX5D_90444_1689653243)(NimStringDesc* s0, Slice90451 x0) {
	NimStringDesc* result0;
	nimfr("[]", "system.nim")
	result0 = (NimStringDesc*)0;
	nimln(3189, "system.nim");
	result0 = copyStrLast(s0, x0.a, x0.b);
	popFrame();
	return result0;
}

N_NIMCALL(void, HEX5BHEX5DHEX3D_90458_1689653243)(NimStringDesc*& s0, Slice90451 x0, NimStringDesc* b0) {
	NI TMP100;
	NI TMP101;
	nimfr("[]=", "system.nim")
	nimln(3200, "system.nim");
	NI a0 = x0.a;
	nimln(3201, "system.nim");
	TMP100 = subInt(x0.b, a0);
	TMP101 = addInt((NI)(TMP100), ((NI) 1));
	NI L0 = (NI)(TMP101);
	nimln(3202, "system.nim");
	{
		if (!(L0 == (b0 ? b0->len : 0))) goto LA3;
{		{
			NI i_90485_1689653243;
			NI HEX3Atmp_90537_1689653243;
			i_90485_1689653243 = (NI)0;
			HEX3Atmp_90537_1689653243 = (NI)0;
			nimln(3203, "system.nim");
			HEX3Atmp_90537_1689653243 = subInt(L0, 1);
			nimln(1875, "system.nim");
			NI res_90540_1689653243 = ((NI) 0);
			{
				nimln(1876, "system.nim");
				while (1) {
					NI TMP102;
					NI TMP103;
					if (!(res_90540_1689653243 <= HEX3Atmp_90537_1689653243)) goto LA7;
					nimln(1877, "system.nim");
					i_90485_1689653243 = res_90540_1689653243;
					nimln(3203, "system.nim");
					TMP102 = addInt(i_90485_1689653243, a0);
					if ((NU)((NI)(TMP102)) > (NU)(s0->len)) raiseIndexError();
					if ((NU)(i_90485_1689653243) > (NU)(b0->len)) raiseIndexError();
					s0->data[(NI)(TMP102)] = b0->data[i_90485_1689653243];
					nimln(1896, "system.nim");
					TMP103 = addInt(res_90540_1689653243, ((NI) 1));
					res_90540_1689653243 = (NI)(TMP103);
				} LA7: ;
			}
		}
}	}
	goto LA1;
	LA3: ;
	{
		NI TMP104;
		NI TMP105;
		nimln(3172, "system.nim");
		NI slen_90487_1689653243 = (s0 ? s0->len : 0);
		nimln(3173, "system.nim");
		TMP104 = subInt((b0 ? b0->len : 0), L0);
		NI shift_90489_1689653243 = (NI)(TMP104);
		nimln(3174, "system.nim");
		TMP105 = addInt(slen_90487_1689653243, shift_90489_1689653243);
		NI newlen_90491_1689653243 = (NI)(TMP105);
		nimln(3175, "system.nim");
		{
			nimln(351, "system.nim");
			if (!(((NI) 0) < shift_90489_1689653243)) goto LA11;
{			nimln(3177, "system.nim");
			s0 = setLengthStr(s0, ((NI)chckRange(newlen_90491_1689653243, ((NI) 0), ((NI) IL64(9223372036854775807)))));
			{
				NI i_90493_1689653243;
				NI HEX3Atmp_90545_1689653243;
				NI HEX3Atmp_90546_1689653243;
				NI TMP106;
				NI TMP107;
				NI TMP108;
				i_90493_1689653243 = (NI)0;
				HEX3Atmp_90545_1689653243 = (NI)0;
				HEX3Atmp_90546_1689653243 = (NI)0;
				nimln(3178, "system.nim");
				TMP106 = subInt(newlen_90491_1689653243, ((NI) 1));
				HEX3Atmp_90545_1689653243 = (NI)(TMP106);
				TMP107 = addInt(a0, shift_90489_1689653243);
				TMP108 = addInt((NI)(TMP107), ((NI) 1));
				HEX3Atmp_90546_1689653243 = (NI)(TMP108);
				nimln(1863, "system.nim");
				NI res_90549_1689653243 = HEX3Atmp_90545_1689653243;
				{
					nimln(1864, "system.nim");
					while (1) {
						NI TMP109;
						NI TMP110;
						nimln(347, "system.nim");
						if (!(HEX3Atmp_90546_1689653243 <= res_90549_1689653243)) goto LA15;
						nimln(1865, "system.nim");
						i_90493_1689653243 = res_90549_1689653243;
						nimln(3178, "system.nim");
						if ((NU)(i_90493_1689653243) > (NU)(s0->len)) raiseIndexError();
						TMP109 = subInt(i_90493_1689653243, shift_90489_1689653243);
						if ((NU)((NI)(TMP109)) > (NU)(s0->len)) raiseIndexError();
						s0->data[i_90493_1689653243] = s0->data[(NI)(TMP109)];
						nimln(1866, "system.nim");
						TMP110 = subInt(res_90549_1689653243, ((NI) 1));
						res_90549_1689653243 = (NI)(TMP110);
					} LA15: ;
				}
			}
}		}
		goto LA9;
		LA11: ;
		{
			{
				NI i_90495_1689653243;
				NI HEX3Atmp_90554_1689653243;
				NI HEX3Atmp_90555_1689653243;
				NI TMP111;
				NI TMP112;
				NI TMP113;
				i_90495_1689653243 = (NI)0;
				HEX3Atmp_90554_1689653243 = (NI)0;
				HEX3Atmp_90555_1689653243 = (NI)0;
				nimln(3180, "system.nim");
				TMP111 = addInt(a0, (b0 ? b0->len : 0));
				HEX3Atmp_90554_1689653243 = (NI)(TMP111);
				TMP112 = subInt((s0 ? s0->len : 0), ((NI) 1));
				TMP113 = addInt((NI)(TMP112), shift_90489_1689653243);
				HEX3Atmp_90555_1689653243 = (NI)(TMP113);
				nimln(1875, "system.nim");
				NI res_90558_1689653243 = HEX3Atmp_90554_1689653243;
				{
					nimln(1876, "system.nim");
					while (1) {
						NI TMP114;
						NI TMP115;
						if (!(res_90558_1689653243 <= HEX3Atmp_90555_1689653243)) goto LA19;
						nimln(1877, "system.nim");
						i_90495_1689653243 = res_90558_1689653243;
						nimln(3180, "system.nim");
						if ((NU)(i_90495_1689653243) > (NU)(s0->len)) raiseIndexError();
						TMP114 = subInt(i_90495_1689653243, shift_90489_1689653243);
						if ((NU)((NI)(TMP114)) > (NU)(s0->len)) raiseIndexError();
						s0->data[i_90495_1689653243] = s0->data[(NI)(TMP114)];
						nimln(1891, "system.nim");
						TMP115 = addInt(res_90558_1689653243, ((NI) 1));
						res_90558_1689653243 = (NI)(TMP115);
					} LA19: ;
				}
			}
			nimln(3182, "system.nim");
			s0 = setLengthStr(s0, ((NI)chckRange(newlen_90491_1689653243, ((NI) 0), ((NI) IL64(9223372036854775807)))));
		}
		LA9: ;
		{
			NI i_90497_1689653243;
			NI HEX3Atmp_90563_1689653243;
			i_90497_1689653243 = (NI)0;
			HEX3Atmp_90563_1689653243 = (NI)0;
			nimln(3184, "system.nim");
			HEX3Atmp_90563_1689653243 = subInt((b0 ? b0->len : 0), 1);
			nimln(1875, "system.nim");
			NI res_90566_1689653243 = ((NI) 0);
			{
				nimln(1876, "system.nim");
				while (1) {
					NI TMP116;
					NI TMP117;
					if (!(res_90566_1689653243 <= HEX3Atmp_90563_1689653243)) goto LA22;
					nimln(1877, "system.nim");
					i_90497_1689653243 = res_90566_1689653243;
					nimln(3184, "system.nim");
					TMP116 = addInt(i_90497_1689653243, a0);
					if ((NU)((NI)(TMP116)) > (NU)(s0->len)) raiseIndexError();
					if ((NU)(i_90497_1689653243) > (NU)(b0->len)) raiseIndexError();
					s0->data[(NI)(TMP116)] = b0->data[i_90497_1689653243];
					nimln(1896, "system.nim");
					TMP117 = addInt(res_90566_1689653243, ((NI) 1));
					res_90566_1689653243 = (NI)(TMP117);
				} LA22: ;
			}
		}
	}
	LA1: ;
	popFrame();
}

N_NIMCALL(NimStringDesc*, gorge_90789_1689653243)(NimStringDesc* command0, NimStringDesc* input0, NimStringDesc* cache0) {
	NimStringDesc* result0;
	nimfr("gorge", "system.nim")
	result0 = (NimStringDesc*)0;
	popFrame();
	return result0;
}

N_NIMCALL(NimStringDesc*, staticexec_90795_1689653243)(NimStringDesc* command0, NimStringDesc* input0, NimStringDesc* cache0) {
	NimStringDesc* result0;
	nimfr("staticExec", "system.nim")
	result0 = (NimStringDesc*)0;
	popFrame();
	return result0;
}

static N_INLINE(void, HEX2FHEX3D_90859_1689653243)(NF& x0, NF y0) {
	nimfr("/=", "system.nim")
	nimln(3328, "system.nim");
	x0 = ((NF)(x0) / (NF)(y0));
	popFrame();
}
N_NIMCALL(void, TMP118)(void* p, NI op) {
	Assertionerror3444* a;
	a = (Assertionerror3444*)p;
	nimGCvisit((void*)(*a).parent, op);
	nimGCvisit((void*)(*a).message, op);
	nimGCvisit((void*)(*a).trace, op);
}

static N_INLINE(void, sysfatal_91021_1689653243)(NimStringDesc* message0) {
	Assertionerror3444* e0;
	NimStringDesc* LOC1;
	nimfr("sysFatal", "system.nim")
	e0 = (Assertionerror3444*)0;
	nimln(2532, "system.nim");
	e0 = (Assertionerror3444*) newObj((&NTI91028), sizeof(Assertionerror3444));
	(*e0).m_type = (&NTI3444);
	nimln(2533, "system.nim");
	LOC1 = (NimStringDesc*)0;
	LOC1 = (*e0).message; (*e0).message = copyStringRC1(message0);
	if (LOC1) nimGCunrefNoCycle(LOC1);
	nimln(2534, "system.nim");
	raiseException((Exception*)e0, "AssertionError");
	popFrame();
}

N_NOINLINE(void, raiseassert_91016_1689653243)(NimStringDesc* msg0) {
	nimfr("raiseAssert", "system.nim")
	nimln(3381, "system.nim");
	sysfatal_91021_1689653243(msg0);
	popFrame();
}

N_NIMCALL(void, failedassertimpl_91039_1689653243)(NimStringDesc* msg0) {
	nimfr("failedAssertImpl", "system.nim")
	nimln(3389, "system.nim");
	raiseassert_91016_1689653243(msg0);
	popFrame();
}

static N_INLINE(void, shallow_91618_1689653243)(NimStringDesc*& s_91621_1689653243) {
	nimfr("shallow", "system.nim")
	nimln(3482, "system.nim");
	TGenericSeq* s0 = ((TGenericSeq*) (s_91621_1689653243));
	nimln(3483, "system.nim");
	(*s0).reserved = (NI)((*s0).reserved | ((NI) (IL64(-9223372036854775807) - IL64(1))));
	popFrame();
}

N_NIMCALL(void, insert_92001_1689653243)(NimStringDesc*& x0, NimStringDesc* item0, NI i0) {
	NI TMP119;
	NI TMP120;
	nimfr("insert", "system.nim")
	nimln(3503, "system.nim");
	NI xl0 = (x0 ? x0->len : 0);
	nimln(3504, "system.nim");
	TMP119 = addInt(xl0, (item0 ? item0->len : 0));
	x0 = setLengthStr(x0, ((NI)chckRange((NI)(TMP119), ((NI) 0), ((NI) IL64(9223372036854775807)))));
	nimln(3505, "system.nim");
	TMP120 = subInt(xl0, ((NI) 1));
	NI j0 = (NI)(TMP120);
	{
		nimln(3506, "system.nim");
		while (1) {
			NI TMP121;
			NI TMP122;
			nimln(347, "system.nim");
			if (!(((NI) (i0)) <= j0)) goto LA2;
			nimln(3507, "system.nim");
			TMP121 = addInt(j0, (item0 ? item0->len : 0));
			if ((NU)((NI)(TMP121)) > (NU)(x0->len)) raiseIndexError();
			if ((NU)(j0) > (NU)(x0->len)) raiseIndexError();
			x0->data[(NI)(TMP121)] = x0->data[j0];
			nimln(3508, "system.nim");
			TMP122 = subInt(j0, ((NI) 1));
			j0 = (NI)(TMP122);
		} LA2: ;
	}
	nimln(3509, "system.nim");
	j0 = ((NI) 0);
	{
		nimln(3510, "system.nim");
		while (1) {
			NI TMP123;
			NI TMP124;
			if (!(j0 < (item0 ? item0->len : 0))) goto LA4;
			nimln(3511, "system.nim");
			TMP123 = addInt(j0, ((NI) (i0)));
			if ((NU)((NI)(TMP123)) > (NU)(x0->len)) raiseIndexError();
			if ((NU)(j0) > (NU)(item0->len)) raiseIndexError();
			x0->data[(NI)(TMP123)] = item0->data[j0];
			nimln(3512, "system.nim");
			TMP124 = addInt(j0, ((NI) 1));
			j0 = (NI)(TMP124);
		} LA4: ;
	}
	popFrame();
}

N_NIMCALL(void, safeadd_92412_1689653243)(NimStringDesc*& x0, NIM_CHAR y0) {
	nimfr("safeAdd", "system.nim")
	nimln(3537, "system.nim");
	{
		if (!(x0 == NIM_NIL)) goto LA3;
{		unsureAsgnRef((void**) (&x0), copyString(((NimStringDesc*) &TMP4)));
}	}
	LA3: ;
	nimln(3538, "system.nim");
	x0 = addChar(x0, y0);
	popFrame();
}

N_NIMCALL(void, safeadd_92417_1689653243)(NimStringDesc*& x0, NimStringDesc* y0) {
	nimfr("safeAdd", "system.nim")
	nimln(3543, "system.nim");
	{
		if (!(x0 == NIM_NIL)) goto LA3;
{		unsureAsgnRef((void**) (&x0), copyString(y0));
}	}
	goto LA1;
	LA3: ;
	{
		nimln(3544, "system.nim");
		x0 = resizeString(x0, y0->len + 0);
appendString(x0, y0);
	}
	LA1: ;
	popFrame();
}

N_NIMCALL(void, locals_92601_1689653243)(TNimObject* Result) {
	nimfr("locals", "system.nim")
	popFrame();
}

static N_INLINE(NimStringDesc*, copydeepstring_92815_1689653243)(NimStringDesc* src0) {
	NimStringDesc* result0;
	nimfr("copyDeepString", "deepcopy.nim")
	result0 = (NimStringDesc*)0;
	nimln(36, "deepcopy.nim");
	{
		NI TMP125;
		nimln(343, "system.nim");
		if (!!((src0 == NIM_NIL))) goto LA3;
{		nimln(37, "deepcopy.nim");
		result0 = rawNewStringNoInit((*src0).len);
		nimln(38, "deepcopy.nim");
		(*result0).len = (*src0).len;
		nimln(39, "deepcopy.nim");
		TMP125 = addInt((*src0).len, ((NI) 1));
		memcpy(((NCSTRING) ((*result0).data)), ((NCSTRING) ((*src0).data)), (NI)(TMP125));
}	}
	LA3: ;
	popFrame();
	return result0;
}

N_NIMCALL(void, genericdeepcopyaux_92616_1689653243)(void* dest0, void* src0, TNimNode* n0) {
	nimfr("genericDeepCopyAux", "deepcopy.nim")
	nimln(13, "deepcopy.nim");
	NI d0 = ((NI) (dest0));
	nimln(14, "deepcopy.nim");
	NI s0 = ((NI) (src0));
	nimln(15, "deepcopy.nim");
	switch ((*n0).kind) {
	case ((Tnimnodekind3205) 1):
	{
		nimln(17, "deepcopy.nim");
		nimln(18, "deepcopy.nim");
		genericdeepcopyaux_92611_1689653243(((void*) ((NI)((NU64)(d0) + (NU64)((*n0).offset)))), ((void*) ((NI)((NU64)(s0) + (NU64)((*n0).offset)))), (*n0).typ);
	}
	break;
	case ((Tnimnodekind3205) 2):
	{
		{
			NI i_92651_1689653243;
			NI HEX3Atmp_92806_1689653243;
			NI TMP128;
			i_92651_1689653243 = (NI)0;
			HEX3Atmp_92806_1689653243 = (NI)0;
			nimln(20, "deepcopy.nim");
			TMP128 = subInt((*n0).len, ((NI) 1));
			HEX3Atmp_92806_1689653243 = (NI)(TMP128);
			nimln(1875, "system.nim");
			NI res_92809_1689653243 = ((NI) 0);
			{
				nimln(1876, "system.nim");
				while (1) {
					NI TMP129;
					if (!(res_92809_1689653243 <= HEX3Atmp_92806_1689653243)) goto LA5;
					nimln(1877, "system.nim");
					i_92651_1689653243 = res_92809_1689653243;
					nimln(21, "deepcopy.nim");
					if ((NU)(i_92651_1689653243) > (NU)(32767)) raiseIndexError();
					genericdeepcopyaux_92616_1689653243(dest0, src0, (*n0).sons[(i_92651_1689653243)- 0]);
					nimln(1896, "system.nim");
					TMP129 = addInt(res_92809_1689653243, ((NI) 1));
					res_92809_1689653243 = (NI)(TMP129);
				} LA5: ;
			}
		}
	}
	break;
	case ((Tnimnodekind3205) 3):
	{
		nimln(23, "deepcopy.nim");
		TNimNode* dd0 = selectbranch_28007_1689653243(dest0, n0);
		nimln(24, "deepcopy.nim");
		TNimNode* m0 = selectbranch_28007_1689653243(src0, n0);
		nimln(27, "deepcopy.nim");
		{
			NIM_BOOL LOC9;
			LOC9 = (NIM_BOOL)0;
			nimln(343, "system.nim");
			LOC9 = !((m0 == dd0));
			if (!(LOC9)) goto LA10;
			LOC9 = !((dd0 == NIM_NIL));
			LA10: ;
			if (!LOC9) goto LA11;
{			nimln(28, "deepcopy.nim");
			genericresetaux_85401_1689653243(dest0, dd0);
}		}
		LA11: ;
		nimln(29, "deepcopy.nim");
		memcpy(((void*) ((NI)((NU64)(d0) + (NU64)((*n0).offset)))), ((void*) ((NI)((NU64)(s0) + (NU64)((*n0).offset)))), ((NI)chckRange((*(*n0).typ).size, ((NI) 0), ((NI) IL64(9223372036854775807)))));
		nimln(31, "deepcopy.nim");
		{
			nimln(343, "system.nim");
			if (!!((m0 == NIM_NIL))) goto LA15;
{			nimln(32, "deepcopy.nim");
			genericdeepcopyaux_92616_1689653243(dest0, src0, m0);
}		}
		LA15: ;
	}
	break;
	case ((Tnimnodekind3205) 0):
	{
	}
	break;
	}
	popFrame();
}

N_NIMCALL(void, genericdeepcopyaux_92611_1689653243)(void* dest0, void* src0, TNimType* mt0) {
	nimfr("genericDeepCopyAux", "deepcopy.nim")
{	nimln(43, "deepcopy.nim");
	NI d0 = ((NI) (dest0));
	nimln(44, "deepcopy.nim");
	NI s0 = ((NI) (src0));
	nimln(46, "deepcopy.nim");
	switch ((*mt0).kind) {
	case ((Tnimkind3203) 28):
	{
		nimln(48, "deepcopy.nim");
		void** x0 = ((void**) (dest0));
		nimln(49, "deepcopy.nim");
		void* s20 = (*((void**) (s0)));
		nimln(50, "deepcopy.nim");
		{
			if (!(s20 == NIM_NIL)) goto LA4;
{			nimln(51, "deepcopy.nim");
			unsureAsgnRef(x0, s20);
}		}
		goto LA2;
		LA4: ;
		{
			NimStringDesc* LOC7;
			nimln(53, "deepcopy.nim");
			LOC7 = (NimStringDesc*)0;
			LOC7 = copydeepstring_92815_1689653243(((NimStringDesc*) (s20)));
			unsureAsgnRef(x0, ((void*) (LOC7)));
		}
		LA2: ;
	}
	break;
	case ((Tnimkind3203) 24):
	{
		nimln(55, "deepcopy.nim");
		void* s20 = (*((void**) (src0)));
		nimln(56, "deepcopy.nim");
		TGenericSeq* seq0 = ((TGenericSeq*) (s20));
		nimln(57, "deepcopy.nim");
		void** x0 = ((void**) (dest0));
		nimln(58, "deepcopy.nim");
		{
			if (!(s20 == NIM_NIL)) goto LA11;
{			nimln(59, "deepcopy.nim");
			unsureAsgnRef(x0, s20);
			nimln(60, "deepcopy.nim");
			goto BeforeRet;
}		}
		LA11: ;
		nimln(62, "deepcopy.nim");
		unsureAsgnRef(x0, newSeq(mt0, (*seq0).len));
		nimln(63, "deepcopy.nim");
		NI dst0 = ((NI) ((*((void**) (dest0)))));
		{
			NI i_93211_1689653243;
			NI HEX3Atmp_93432_1689653243;
			NI TMP126;
			i_93211_1689653243 = (NI)0;
			HEX3Atmp_93432_1689653243 = (NI)0;
			nimln(64, "deepcopy.nim");
			TMP126 = subInt((*seq0).len, ((NI) 1));
			HEX3Atmp_93432_1689653243 = (NI)(TMP126);
			nimln(1875, "system.nim");
			NI res_93435_1689653243 = ((NI) 0);
			{
				nimln(1876, "system.nim");
				while (1) {
					NI TMP127;
					if (!(res_93435_1689653243 <= HEX3Atmp_93432_1689653243)) goto LA15;
					nimln(1877, "system.nim");
					i_93211_1689653243 = res_93435_1689653243;
					nimln(65, "deepcopy.nim");
					nimln(66, "deepcopy.nim");
					nimln(67, "deepcopy.nim");
					genericdeepcopyaux_92611_1689653243(((void*) ((NI)((NU64)((NI)((NU64)(dst0) + (NU64)((NI)((NU64)(i_93211_1689653243) * (NU64)((*(*mt0).base).size))))) + (NU64)(((NI) 16))))), ((void*) ((NI)((NU64)((NI)((NU64)(((NI) (s20))) + (NU64)((NI)((NU64)(i_93211_1689653243) * (NU64)((*(*mt0).base).size))))) + (NU64)(((NI) 16))))), (*mt0).base);
					nimln(1896, "system.nim");
					TMP127 = addInt(res_93435_1689653243, ((NI) 1));
					res_93435_1689653243 = (NI)(TMP127);
				} LA15: ;
			}
		}
	}
	break;
	case ((Tnimkind3203) 17):
	{
		nimln(73, "deepcopy.nim");
		TNimType** pint0 = ((TNimType**) (dest0));
		nimln(74, "deepcopy.nim");
		(*pint0) = (*((TNimType**) (src0)));
		nimln(75, "deepcopy.nim");
		{
			nimln(343, "system.nim");
			if (!!(((*mt0).base == NIM_NIL))) goto LA19;
{			nimln(76, "deepcopy.nim");
			genericdeepcopyaux_92611_1689653243(dest0, src0, (*mt0).base);
}		}
		LA19: ;
		nimln(77, "deepcopy.nim");
		genericdeepcopyaux_92616_1689653243(dest0, src0, (*mt0).node);
	}
	break;
	case ((Tnimkind3203) 18):
	{
		nimln(79, "deepcopy.nim");
		genericdeepcopyaux_92616_1689653243(dest0, src0, (*mt0).node);
	}
	break;
	case ((Tnimkind3203) 16):
	case ((Tnimkind3203) 4):
	{
		{
			NI i_93290_1689653243;
			NI HEX3Atmp_93444_1689653243;
			NI TMP130;
			NI TMP131;
			i_93290_1689653243 = (NI)0;
			HEX3Atmp_93444_1689653243 = (NI)0;
			nimln(81, "deepcopy.nim");
			TMP130 = divInt((*mt0).size, (*(*mt0).base).size);
			TMP131 = subInt((NI)(TMP130), ((NI) 1));
			HEX3Atmp_93444_1689653243 = (NI)(TMP131);
			nimln(1875, "system.nim");
			NI res_93447_1689653243 = ((NI) 0);
			{
				nimln(1876, "system.nim");
				while (1) {
					NI TMP132;
					if (!(res_93447_1689653243 <= HEX3Atmp_93444_1689653243)) goto LA25;
					nimln(1877, "system.nim");
					i_93290_1689653243 = res_93447_1689653243;
					nimln(82, "deepcopy.nim");
					nimln(83, "deepcopy.nim");
					genericdeepcopyaux_92611_1689653243(((void*) ((NI)((NU64)(d0) + (NU64)((NI)((NU64)(i_93290_1689653243) * (NU64)((*(*mt0).base).size)))))), ((void*) ((NI)((NU64)(s0) + (NU64)((NI)((NU64)(i_93290_1689653243) * (NU64)((*(*mt0).base).size)))))), (*mt0).base);
					nimln(1896, "system.nim");
					TMP132 = addInt(res_93447_1689653243, ((NI) 1));
					res_93447_1689653243 = (NI)(TMP132);
				} LA25: ;
			}
		}
	}
	break;
	case ((Tnimkind3203) 22):
	{
		nimln(85, "deepcopy.nim");
		void* s20 = (*((void**) (src0)));
		nimln(86, "deepcopy.nim");
		{
			if (!(s20 == NIM_NIL)) goto LA29;
{			nimln(87, "deepcopy.nim");
			unsureAsgnRef(((void**) (dest0)), s20);
}		}
		goto LA27;
		LA29: ;
		{
			nimln(343, "system.nim");
			if (!!(((*(*mt0).base).deepcopy == NIM_NIL))) goto LA32;
{			nimln(89, "deepcopy.nim");
			void* z0 = (*(*mt0).base).deepcopy(s20);
			nimln(90, "deepcopy.nim");
			unsureAsgnRef(((void**) (dest0)), z0);
}		}
		goto LA27;
		LA32: ;
		{
			nimln(97, "deepcopy.nim");
			Cell48106* x0 = usrtocell_52241_1689653243(s20);
			nimln(98, "deepcopy.nim");
			NI forw0 = ((NI) ((*x0).typ));
			nimln(99, "deepcopy.nim");
			{
				if (!(((NI) ((NI)(forw0 & ((NI) 1)))) == ((NI) 1))) goto LA37;
{				nimln(101, "deepcopy.nim");
				void* z0 = ((void*) ((NI)(forw0 & ((NI) -2))));
				nimln(102, "deepcopy.nim");
				unsureAsgnRef(((void**) (dest0)), z0);
}			}
			goto LA35;
			LA37: ;
			{
				nimln(104, "deepcopy.nim");
				TNimType* realtype0 = (*x0).typ;
				nimln(105, "deepcopy.nim");
				void* z0 = newObj(realtype0, (*(*realtype0).base).size);
				nimln(107, "deepcopy.nim");
				unsureAsgnRef(((void**) (dest0)), z0);
				nimln(108, "deepcopy.nim");
				(*x0).typ = ((TNimType*) ((NI)(((NI) (z0)) | ((NI) 1))));
				nimln(109, "deepcopy.nim");
				genericdeepcopyaux_92611_1689653243(z0, s20, (*realtype0).base);
				nimln(110, "deepcopy.nim");
				(*x0).typ = realtype0;
			}
			LA35: ;
		}
		LA27: ;
	}
	break;
	case ((Tnimkind3203) 21):
	{
		nimln(118, "deepcopy.nim");
		void* s20 = (*((void**) (src0)));
		nimln(119, "deepcopy.nim");
		{
			NIM_BOOL LOC43;
			LOC43 = (NIM_BOOL)0;
			nimln(343, "system.nim");
			LOC43 = !((s20 == NIM_NIL));
			if (!(LOC43)) goto LA44;
			LOC43 = !(((*(*mt0).base).deepcopy == NIM_NIL));
			LA44: ;
			if (!LOC43) goto LA45;
{			nimln(120, "deepcopy.nim");
			(*((void**) (dest0))) = (*(*mt0).base).deepcopy(s20);
}		}
		goto LA41;
		LA45: ;
		{
			nimln(122, "deepcopy.nim");
			(*((void**) (dest0))) = s20;
		}
		LA41: ;
	}
	break;
	default:
	{
		nimln(124, "deepcopy.nim");
		memcpy(dest0, src0, ((NI)chckRange((*mt0).size, ((NI) 0), ((NI) IL64(9223372036854775807)))));
	}
	break;
	}
	}BeforeRet: ;
	popFrame();
}

N_NIMCALL(void, genericDeepCopy)(void* dest0, void* src0, TNimType* mt0) {
	nimfr("genericDeepCopy", "deepcopy.nim")
	nimln(127, "deepcopy.nim");
	genericdeepcopyaux_92611_1689653243(dest0, src0, mt0);
	popFrame();
}

N_NIMCALL(void, genericSeqDeepCopy)(void* dest0, void* src_93471_1689653243, TNimType* mt0) {
	nimfr("genericSeqDeepCopy", "deepcopy.nim")
	nimln(131, "deepcopy.nim");
	void* src0 = src_93471_1689653243;
	nimln(132, "deepcopy.nim");
	genericDeepCopy(dest0, ((void*) ((&src0))), mt0);
	popFrame();
}

N_NIMCALL(void, genericDeepCopyOpenArray)(void* dest0, void* src0, NI len0, TNimType* mt0) {
	nimfr("genericDeepCopyOpenArray", "deepcopy.nim")
	nimln(137, "deepcopy.nim");
	NI d0 = ((NI) (dest0));
	nimln(138, "deepcopy.nim");
	NI s0 = ((NI) (src0));
	{
		NI i_93492_1689653243;
		NI HEX3Atmp_93534_1689653243;
		NI TMP133;
		i_93492_1689653243 = (NI)0;
		HEX3Atmp_93534_1689653243 = (NI)0;
		nimln(139, "deepcopy.nim");
		TMP133 = subInt(len0, ((NI) 1));
		HEX3Atmp_93534_1689653243 = (NI)(TMP133);
		nimln(1875, "system.nim");
		NI res_93537_1689653243 = ((NI) 0);
		{
			nimln(1876, "system.nim");
			while (1) {
				NI TMP134;
				if (!(res_93537_1689653243 <= HEX3Atmp_93534_1689653243)) goto LA3;
				nimln(1877, "system.nim");
				i_93492_1689653243 = res_93537_1689653243;
				nimln(140, "deepcopy.nim");
				nimln(141, "deepcopy.nim");
				genericDeepCopy(((void*) ((NI)((NU64)(d0) + (NU64)((NI)((NU64)(i_93492_1689653243) * (NU64)((*(*mt0).base).size)))))), ((void*) ((NI)((NU64)(s0) + (NU64)((NI)((NU64)(i_93492_1689653243) * (NU64)((*(*mt0).base).size)))))), (*mt0).base);
				nimln(1896, "system.nim");
				TMP134 = addInt(res_93537_1689653243, ((NI) 1));
				res_93537_1689653243 = (NI)(TMP134);
			} LA3: ;
		}
	}
	popFrame();
}

N_NIMCALL(NI, HEX5E_93611_1689653243)(NI x0) {
	NI result0;
	nimfr("^", "system.nim")
	result0 = (NI)0;
	popFrame();
	return result0;
}

N_NIMCALL(NI, xlen_93635_1689653243)(NimStringDesc* x0) {
	NI result0;
	nimfr("xlen", "system.nim")
	result0 = (NI)0;
	popFrame();
	return result0;
}

static N_INLINE(NIM_BOOL, HEX3DHEX3D_93646_1689653243)(NCSTRING x0, NCSTRING y0) {
	NIM_BOOL result0;
	nimfr("==", "system.nim")
	result0 = (NIM_BOOL)0;
	nimln(3624, "system.nim");
	{
		if (!(((void*) (x0)) == ((void*) (y0)))) goto LA3;
{		result0 = NIM_TRUE;
}	}
	goto LA1;
	LA3: ;
	{
		NIM_BOOL LOC6;
		nimln(3625, "system.nim");
		LOC6 = (NIM_BOOL)0;
		LOC6 = x0 == 0;
		if (LOC6) goto LA7;
		LOC6 = y0 == 0;
		LA7: ;
		if (!LOC6) goto LA8;
{		result0 = NIM_FALSE;
}	}
	goto LA1;
	LA8: ;
	{
		int LOC11;
		nimln(3626, "system.nim");
		LOC11 = (int)0;
		LOC11 = strcmp(x0, y0);
		result0 = (LOC11 == ((NI32) 0));
	}
	LA1: ;
	popFrame();
	return result0;
}
NIM_EXTERNC N_NOINLINE(void, systemInit000)(void) {
	TNimType LOC1;
	nimvm_5554_1689653243 = NIM_FALSE;
	memset((void*)(&LOC1), 0, sizeof(LOC1));
	LOC1.size = ((NI) 8);
	LOC1.kind = ((Tnimkind3203) 28);
	LOC1.flags = 2;
	strdesc_12403_1689653243 = LOC1;
	initallocator_11801_1689653243();
	initStackBottom();
	initgc_11601_1689653243();
nimRegisterGlobalMarker(TMP48);
	registersignalhandler_23401_1689653243();
}

NIM_EXTERNC N_NOINLINE(void, systemDatInit000)(void) {
static TNimNode* TMP2[4];
static TNimNode TMP0[24];
NTI3408.size = sizeof(TNimObject);
NTI3408.kind = 17;
NTI3408.base = 0;
NTI3408.flags = 1;
TMP0[0].len = 0; TMP0[0].kind = 2;
NTI3408.node = &TMP0[0];
NTI3424.size = sizeof(Exception);
NTI3424.kind = 17;
NTI3424.base = (&NTI3408);
TMP2[0] = &TMP0[2];
NTI10010.size = sizeof(Exception*);
NTI10010.kind = 22;
NTI10010.base = (&NTI3424);
NTI10010.marker = TMP3;
TMP0[2].kind = 1;
TMP0[2].offset = offsetof(Exception, parent);
TMP0[2].typ = (&NTI10010);
TMP0[2].name = "parent";
TMP2[1] = &TMP0[3];
NTI140.size = sizeof(NCSTRING);
NTI140.kind = 29;
NTI140.base = 0;
NTI140.flags = 3;
TMP0[3].kind = 1;
TMP0[3].offset = offsetof(Exception, name);
TMP0[3].typ = (&NTI140);
TMP0[3].name = "name";
TMP2[2] = &TMP0[4];
NTI138.size = sizeof(NimStringDesc*);
NTI138.kind = 28;
NTI138.base = 0;
NTI138.flags = 2;
TMP0[4].kind = 1;
TMP0[4].offset = offsetof(Exception, message);
TMP0[4].typ = (&NTI138);
TMP0[4].name = "msg";
TMP2[3] = &TMP0[5];
TMP0[5].kind = 1;
TMP0[5].offset = offsetof(Exception, trace);
TMP0[5].typ = (&NTI138);
TMP0[5].name = "trace";
TMP0[1].len = 4; TMP0[1].kind = 2; TMP0[1].sons = &TMP2[0];
NTI3424.node = &TMP0[1];
NTI3426.size = sizeof(Systemerror3426);
NTI3426.kind = 17;
NTI3426.base = (&NTI3424);
TMP0[6].len = 0; TMP0[6].kind = 2;
NTI3426.node = &TMP0[6];
NTI3428.size = sizeof(Ioerror3428);
NTI3428.kind = 17;
NTI3428.base = (&NTI3426);
TMP0[7].len = 0; TMP0[7].kind = 2;
NTI3428.node = &TMP0[7];
NTI15635.size = sizeof(Ioerror3428*);
NTI15635.kind = 22;
NTI15635.base = (&NTI3428);
NTI15635.marker = TMP11;
NTI3450.size = sizeof(Outofmemerror3450);
NTI3450.kind = 17;
NTI3450.base = (&NTI3426);
TMP0[8].len = 0; TMP0[8].kind = 2;
NTI3450.node = &TMP0[8];
NTI3460.size = sizeof(Reraiseerror3460);
NTI3460.kind = 17;
NTI3460.base = (&NTI3424);
TMP0[9].len = 0; TMP0[9].kind = 2;
NTI3460.node = &TMP0[9];
NTI21625.size = sizeof(Reraiseerror3460*);
NTI21625.kind = 22;
NTI21625.base = (&NTI3460);
NTI21625.marker = TMP12;
NTI3456.size = sizeof(Rangeerror3456);
NTI3456.kind = 17;
NTI3456.base = (&NTI3424);
TMP0[10].len = 0; TMP0[10].kind = 2;
NTI3456.node = &TMP0[10];
NTI23812.size = sizeof(Rangeerror3456*);
NTI23812.kind = 22;
NTI23812.base = (&NTI3456);
NTI23812.marker = TMP13;
NTI3452.size = sizeof(Indexerror3452);
NTI3452.kind = 17;
NTI3452.base = (&NTI3424);
TMP0[11].len = 0; TMP0[11].kind = 2;
NTI3452.node = &TMP0[11];
NTI23834.size = sizeof(Indexerror3452*);
NTI23834.kind = 22;
NTI23834.base = (&NTI3452);
NTI23834.marker = TMP14;
NTI3454.size = sizeof(Fielderror3454);
NTI3454.kind = 17;
NTI3454.base = (&NTI3424);
TMP0[12].len = 0; TMP0[12].kind = 2;
NTI3454.node = &TMP0[12];
NTI23859.size = sizeof(Fielderror3454*);
NTI23859.kind = 22;
NTI23859.base = (&NTI3454);
NTI23859.marker = TMP15;
NTI3446.size = sizeof(Valueerror3446);
NTI3446.kind = 17;
NTI3446.base = (&NTI3424);
TMP0[13].len = 0; TMP0[13].kind = 2;
NTI3446.node = &TMP0[13];
NTI24025.size = sizeof(Valueerror3446*);
NTI24025.kind = 22;
NTI24025.base = (&NTI3446);
NTI24025.marker = TMP16;
NTI3464.size = sizeof(Objectconversionerror3464);
NTI3464.kind = 17;
NTI3464.base = (&NTI3424);
TMP0[14].len = 0; TMP0[14].kind = 2;
NTI3464.node = &TMP0[14];
NTI24084.size = sizeof(Objectconversionerror3464*);
NTI24084.kind = 22;
NTI24084.base = (&NTI3464);
NTI24084.marker = TMP17;
NTI3462.size = sizeof(Objectassignmenterror3462);
NTI3462.kind = 17;
NTI3462.base = (&NTI3424);
TMP0[15].len = 0; TMP0[15].kind = 2;
NTI3462.node = &TMP0[15];
NTI24120.size = sizeof(Objectassignmenterror3462*);
NTI24120.kind = 22;
NTI24120.base = (&NTI3462);
NTI24120.marker = TMP18;
NTI3436.size = sizeof(Arithmeticerror3436);
NTI3436.kind = 17;
NTI3436.base = (&NTI3424);
TMP0[16].len = 0; TMP0[16].kind = 2;
NTI3436.node = &TMP0[16];
NTI3440.size = sizeof(Overflowerror3440);
NTI3440.kind = 17;
NTI3440.base = (&NTI3436);
TMP0[17].len = 0; TMP0[17].kind = 2;
NTI3440.node = &TMP0[17];
NTI24272.size = sizeof(Overflowerror3440*);
NTI24272.kind = 22;
NTI24272.base = (&NTI3440);
NTI24272.marker = TMP19;
NTI3438.size = sizeof(Divbyzeroerror3438);
NTI3438.kind = 17;
NTI3438.base = (&NTI3436);
TMP0[18].len = 0; TMP0[18].kind = 2;
NTI3438.node = &TMP0[18];
NTI24294.size = sizeof(Divbyzeroerror3438*);
NTI24294.kind = 22;
NTI24294.base = (&NTI3438);
NTI24294.marker = TMP20;
NTI3466.size = sizeof(Floatingpointerror3466);
NTI3466.kind = 17;
NTI3466.base = (&NTI3424);
TMP0[19].len = 0; TMP0[19].kind = 2;
NTI3466.node = &TMP0[19];
NTI3468.size = sizeof(Floatinvalidoperror3468);
NTI3468.kind = 17;
NTI3468.base = (&NTI3466);
TMP0[20].len = 0; TMP0[20].kind = 2;
NTI3468.node = &TMP0[20];
NTI26430.size = sizeof(Floatinvalidoperror3468*);
NTI26430.kind = 22;
NTI26430.base = (&NTI3468);
NTI26430.marker = TMP21;
NTI3472.size = sizeof(Floatoverflowerror3472);
NTI3472.kind = 17;
NTI3472.base = (&NTI3466);
TMP0[21].len = 0; TMP0[21].kind = 2;
NTI3472.node = &TMP0[21];
NTI26456.size = sizeof(Floatoverflowerror3472*);
NTI26456.kind = 22;
NTI26456.base = (&NTI3472);
NTI26456.marker = TMP22;
NTI3474.size = sizeof(Floatunderflowerror3474);
NTI3474.kind = 17;
NTI3474.base = (&NTI3466);
TMP0[22].len = 0; TMP0[22].kind = 2;
NTI3474.node = &TMP0[22];
NTI26475.size = sizeof(Floatunderflowerror3474*);
NTI26475.kind = 22;
NTI26475.base = (&NTI3474);
NTI26475.marker = TMP23;
NTI16005.size = sizeof(TY16005*);
NTI16005.kind = 24;
NTI16005.base = (&NTI138);
NTI16005.flags = 2;
NTI16005.marker = TMP40;
NTI108.size = sizeof(NI16);
NTI108.kind = 33;
NTI108.base = 0;
NTI108.flags = 3;
NTI82807.size = sizeof(TY82807);
NTI82807.kind = 16;
NTI82807.base = (&NTI108);
NTI82807.flags = 3;
NTI82804.size = sizeof(NI16*);
NTI82804.kind = 22;
NTI82804.base = (&NTI82807);
NTI82804.flags = 2;
NTI82804.marker = TMP78;
NTI3444.size = sizeof(Assertionerror3444);
NTI3444.kind = 17;
NTI3444.base = (&NTI3424);
TMP0[23].len = 0; TMP0[23].kind = 2;
NTI3444.node = &TMP0[23];
NTI91028.size = sizeof(Assertionerror3444*);
NTI91028.kind = 22;
NTI91028.base = (&NTI3444);
NTI91028.marker = TMP118;
}

