/* Generated by Nim Compiler v0.14.2 */
/*   (c) 2015 Andreas Rumpf */
/* The generated code is subject to the original license. */
/* Compiled for: Linux, amd64, gcc */
/* Command for C compiler:
   g++ -c  -w -w -fpermissive  -I/home/primat/programs/nim-0.14.2/lib -o /home/primat/projects/tests/nim/intro/nimcache/intro.o /home/primat/projects/tests/nim/intro/nimcache/intro.cpp */
#define NIM_INTBITS 64

#include "nimbase.h"
#include <stdio.h>
struct NimStringDesc;
struct TGenericSeq;
struct  TGenericSeq  {
NI len;
NI reserved;
};
struct  NimStringDesc  : public TGenericSeq {
NIM_CHAR data[SEQ_DECL_SIZE];
};
N_NIMCALL(NI, fib_94003_258688446)(NI n0);
static N_INLINE(NI, subInt)(NI a0, NI b0);
N_NOINLINE(void, raiseOverflow)(void);
static N_INLINE(NI, addInt)(NI a0, NI b0);
static N_INLINE(void, nimFrame)(TFrame* s0);
N_NOINLINE(void, stackoverflow_22201_1689653243)(void);
static N_INLINE(void, popFrame)(void);
N_NIMCALL(NimStringDesc*, nimIntToStr)(NI x0);
static N_INLINE(void, initStackBottomWith)(void* locals0);
N_NOINLINE(void, setStackBottom)(void* thestackbottom0);
NIM_EXTERNC N_NOINLINE(void, systemInit000)(void);
NIM_EXTERNC N_NOINLINE(void, systemDatInit000)(void);
NIM_EXTERNC N_NOINLINE(void, introInit000)(void);
NIM_EXTERNC N_NOINLINE(void, introDatInit000)(void);
extern TFrame* frameptr_19636_1689653243;

static N_INLINE(NI, subInt)(NI a0, NI b0) {
	NI result0;
{	result0 = (NI)0;
	result0 = (NI)((NU64)(a0) - (NU64)(b0));
	{
		NIM_BOOL LOC3;
		LOC3 = (NIM_BOOL)0;
		LOC3 = (((NI) 0) <= (NI)(result0 ^ a0));
		if (LOC3) goto LA4;
		LOC3 = (((NI) 0) <= (NI)(result0 ^ (NI)((NU64) ~(b0))));
		LA4: ;
		if (!LOC3) goto LA5;
{		goto BeforeRet;
}	}
	LA5: ;
	raiseOverflow();
	}BeforeRet: ;
	return result0;
}

static N_INLINE(NI, addInt)(NI a0, NI b0) {
	NI result0;
{	result0 = (NI)0;
	result0 = (NI)((NU64)(a0) + (NU64)(b0));
	{
		NIM_BOOL LOC3;
		LOC3 = (NIM_BOOL)0;
		LOC3 = (((NI) 0) <= (NI)(result0 ^ a0));
		if (LOC3) goto LA4;
		LOC3 = (((NI) 0) <= (NI)(result0 ^ b0));
		LA4: ;
		if (!LOC3) goto LA5;
{		goto BeforeRet;
}	}
	LA5: ;
	raiseOverflow();
	}BeforeRet: ;
	return result0;
}

static N_INLINE(void, nimFrame)(TFrame* s0) {
	NI LOC1;
	LOC1 = (NI)0;
	{
		if (!(frameptr_19636_1689653243 == NIM_NIL)) goto LA4;
{		LOC1 = ((NI) 0);
}	}
	goto LA2;
	LA4: ;
	{
		LOC1 = ((NI) ((NI16)((*frameptr_19636_1689653243).calldepth + ((NI16) 1))));
	}
	LA2: ;
	(*s0).calldepth = ((NI16) (LOC1));
	(*s0).prev = frameptr_19636_1689653243;
	frameptr_19636_1689653243 = s0;
	{
		if (!((*s0).calldepth == ((NI16) 2000))) goto LA9;
{		stackoverflow_22201_1689653243();
}	}
	LA9: ;
}

static N_INLINE(void, popFrame)(void) {
	frameptr_19636_1689653243 = (*frameptr_19636_1689653243).prev;
}

N_NIMCALL(NI, fib_94003_258688446)(NI n0) {
	NI result0;
	nimfr("fib", "intro.nim")
{	result0 = (NI)0;
	nimln(6, "intro.nim");
	{
		NI TMP137;
		NI LOC5;
		NI TMP138;
		NI LOC6;
		NI TMP139;
		nimln(351, "system.nim");
		if (!(((NI) 2) < n0)) goto LA3;
{		nimln(7, "intro.nim");
		TMP137 = subInt(n0, ((NI) 1));
		LOC5 = (NI)0;
		LOC5 = fib_94003_258688446((NI)(TMP137));
		TMP138 = subInt(n0, ((NI) 2));
		LOC6 = (NI)0;
		LOC6 = fib_94003_258688446((NI)(TMP138));
		TMP139 = addInt(LOC5, LOC6);
		result0 = (NI)(TMP139);
		goto BeforeRet;
}	}
	goto LA1;
	LA3: ;
	{
		nimln(9, "intro.nim");
		result0 = ((NI) 1);
		goto BeforeRet;
	}
	LA1: ;
	}BeforeRet: ;
	popFrame();
	return result0;
}

static N_INLINE(void, initStackBottomWith)(void* locals0) {
	setStackBottom(locals0);
}
void PreMainInner() {
	systemInit000();
	introDatInit000();
}

void PreMain() {
	void (*volatile inner)();
	systemDatInit000();
	inner = PreMainInner;
	initStackBottomWith((void *)&inner);
	(*inner)();
}

int cmdCount;
char** cmdLine;
char** gEnv;
N_CDECL(void, NimMainInner)(void) {
	introInit000();
}

N_CDECL(void, NimMain)(void) {
	void (*volatile inner)();
	PreMain();
	inner = NimMainInner;
	initStackBottomWith((void *)&inner);
	(*inner)();
}

int main(int argc, char** args, char** env) {
	cmdLine = args;
	cmdCount = argc;
	gEnv = env;
	NimMain();
	return nim_program_result;
}

NIM_EXTERNC N_NOINLINE(void, introInit000)(void) {
	NI LOC1;
	NimStringDesc* LOC2;
	nimfr("intro", "intro.nim")
	nimln(11, "intro.nim");
	LOC1 = (NI)0;
	LOC1 = fib_94003_258688446(((NI) 50));
	LOC2 = (NimStringDesc*)0;
	LOC2 = nimIntToStr(LOC1);
	printf("%s\012", LOC2? (LOC2)->data:"nil");
	fflush(stdout);
	popFrame();
}

NIM_EXTERNC N_NOINLINE(void, introDatInit000)(void) {
}

